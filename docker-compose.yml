# Docker Compose for aiKODA Platform v2
# Includes: Next.js App + PostgreSQL + Redis

version: '3.8'

services:
  # aiKODA Platform Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: aikoda-platform
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://aikoda_user:aikoda_secure_2024@postgres:5432/aikoda_db
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-super-secret-nextauth-key-change-in-production
      - JWT_SECRET=your-jwt-secret-key-change-in-production
      - HUGGING_FACE_TOKEN=${HUGGING_FACE_TOKEN:-hf_demo_token}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-demo_gemini_key}
      - ALLOWED_ORIGINS=http://localhost:3000,https://aikoda.dev
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aikoda-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aikoda-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=aikoda_db
      - POSTGRES_USER=aikoda_user
      - POSTGRES_PASSWORD=aikoda_secure_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - aikoda-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aikoda_user -d aikoda_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: aikoda-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass aikoda_redis_2024
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aikoda-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: aikoda-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - aikoda-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  aikoda-network:
    driver: bridge