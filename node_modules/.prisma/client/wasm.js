
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CandidateScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  cellPhone: 'cellPhone',
  nationality: 'nationality',
  currentLocation: 'currentLocation',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  maritalStatus: 'maritalStatus',
  currentPosition: 'currentPosition',
  experience: 'experience',
  education: 'education',
  technicalSkills: 'technicalSkills',
  languageProficiency: 'languageProficiency',
  certifications: 'certifications',
  culturalBackground: 'culturalBackground',
  workStylePreference: 'workStylePreference',
  communicationStyle: 'communicationStyle',
  adaptabilityScore: 'adaptabilityScore',
  teamworkOrientation: 'teamworkOrientation',
  leadershipStyle: 'leadershipStyle',
  conflictResolution: 'conflictResolution',
  timeManagement: 'timeManagement',
  waHarmonyAlignment: 'waHarmonyAlignment',
  kaizenMindset: 'kaizenMindset',
  omotenashiService: 'omotenashiService',
  bushidoDedication: 'bushidoDedication',
  nemawashiConsensus: 'nemawashiConsensus',
  candidateStatus: 'candidateStatus',
  availabilityDate: 'availabilityDate',
  salaryExpectation: 'salaryExpectation',
  preferredLocation: 'preferredLocation',
  visaStatus: 'visaStatus'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyName: 'companyName',
  industry: 'industry',
  companySize: 'companySize',
  headquarters: 'headquarters',
  website: 'website',
  description: 'description',
  corporateCulture: 'corporateCulture',
  workEnvironment: 'workEnvironment',
  managementStyle: 'managementStyle',
  communicationStyle: 'communicationStyle',
  diversityPolicy: 'diversityPolicy',
  waHarmonyImportance: 'waHarmonyImportance',
  kaizenImplementation: 'kaizenImplementation',
  omotenashiStandards: 'omotenashiStandards',
  hierarchyStructure: 'hierarchyStructure',
  consensusDecisionMaking: 'consensusDecisionMaking',
  revenue: 'revenue',
  foundedYear: 'foundedYear',
  employeeCount: 'employeeCount',
  businessModel: 'businessModel',
  competitiveAdvantage: 'competitiveAdvantage',
  preferredCandidateProfile: 'preferredCandidateProfile',
  culturalRequirements: 'culturalRequirements',
  languageRequirements: 'languageRequirements'
};

exports.Prisma.JobPostingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  jobTitle: 'jobTitle',
  department: 'department',
  location: 'location',
  employmentType: 'employmentType',
  experienceLevel: 'experienceLevel',
  jobDescription: 'jobDescription',
  responsibilities: 'responsibilities',
  requirements: 'requirements',
  qualifications: 'qualifications',
  technicalSkills: 'technicalSkills',
  salaryRangeMinimum: 'salaryRangeMinimum',
  salaryRangeMaximum: 'salaryRangeMaximum',
  benefits: 'benefits',
  bonusStructure: 'bonusStructure',
  culturalFitRequirements: 'culturalFitRequirements',
  languageRequirements: 'languageRequirements',
  communicationStyle: 'communicationStyle',
  teamworkExpectation: 'teamworkExpectation',
  leadershipExpectation: 'leadershipExpectation',
  waHarmonyRequired: 'waHarmonyRequired',
  kaizenParticipation: 'kaizenParticipation',
  omotenashiExpectation: 'omotenashiExpectation',
  hierarchyRespect: 'hierarchyRespect',
  consensusBuilding: 'consensusBuilding',
  postingStatus: 'postingStatus',
  applicationDeadline: 'applicationDeadline',
  startDate: 'startDate',
  urgencyLevel: 'urgencyLevel',
  companyId: 'companyId'
};

exports.Prisma.CulturalAssessmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  assessmentType: 'assessmentType',
  assessmentDate: 'assessmentDate',
  overallScore: 'overallScore',
  culturalFitPrediction: 'culturalFitPrediction',
  integrationTimelineDays: 'integrationTimelineDays',
  waHarmonyScore: 'waHarmonyScore',
  kaizenImprovementScore: 'kaizenImprovementScore',
  omotenashiServiceScore: 'omotenashiServiceScore',
  bushidoDedicationScore: 'bushidoDedicationScore',
  nemawashiConsensusScore: 'nemawashiConsensusScore',
  honneTatemaeBalance: 'honneTatemaeBalance',
  indirectCommunication: 'indirectCommunication',
  nonverbalAwareness: 'nonverbalAwareness',
  silenceComfort: 'silenceComfort',
  contextualUnderstanding: 'contextualUnderstanding',
  senpaiKohaiRespect: 'senpaiKohaiRespect',
  authorityRecognition: 'authorityRecognition',
  formalityAdherence: 'formalityAdherence',
  statusAwareness: 'statusAwareness',
  hierarchyNavigation: 'hierarchyNavigation',
  groupHarmonyPriority: 'groupHarmonyPriority',
  collectiveDecisionMaking: 'collectiveDecisionMaking',
  consensusBuilding: 'consensusBuilding',
  teamLoyalty: 'teamLoyalty',
  groupAccountability: 'groupAccountability',
  dedicationToWork: 'dedicationToWork',
  qualityFocus: 'qualityFocus',
  continuousImprovement: 'continuousImprovement',
  attentionToDetail: 'attentionToDetail',
  processAdherence: 'processAdherence',
  punctualityImportance: 'punctualityImportance',
  timeRespect: 'timeRespect',
  scheduleAdherence: 'scheduleAdherence',
  planningOrientation: 'planningOrientation',
  deadlineCommitment: 'deadlineCommitment',
  relationshipInvestment: 'relationshipInvestment',
  trustBuilding: 'trustBuilding',
  longTermOrientation: 'longTermOrientation',
  loyaltyDemonstration: 'loyaltyDemonstration',
  networkMaintenance: 'networkMaintenance',
  changeAcceptance: 'changeAcceptance',
  flexibilityInApproach: 'flexibilityInApproach',
  learningOrientation: 'learningOrientation',
  culturalAdaptability: 'culturalAdaptability',
  resilienceInChallenges: 'resilienceInChallenges',
  professionalEtiquette: 'professionalEtiquette',
  businessCardProtocol: 'businessCardProtocol',
  meetingParticipation: 'meetingParticipation',
  presentationSkills: 'presentationSkills',
  clientServiceOrientation: 'clientServiceOrientation',
  creativeThinking: 'creativeThinking',
  innovationBalance: 'innovationBalance',
  riskAssessment: 'riskAssessment',
  dimensionScores: 'dimensionScores',
  culturalTrainingNeeded: 'culturalTrainingNeeded',
  assessmentNotes: 'assessmentNotes'
};

exports.Prisma.PsychologicalAssessmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  assessmentType: 'assessmentType',
  assessmentDate: 'assessmentDate',
  openness: 'openness',
  conscientiousness: 'conscientiousness',
  extraversion: 'extraversion',
  agreeableness: 'agreeableness',
  neuroticism: 'neuroticism',
  logicalReasoning: 'logicalReasoning',
  numericalAbility: 'numericalAbility',
  verbalAbility: 'verbalAbility',
  spatialAbility: 'spatialAbility',
  memoryCapacity: 'memoryCapacity',
  selfAwareness: 'selfAwareness',
  selfRegulation: 'selfRegulation',
  motivation: 'motivation',
  empathy: 'empathy',
  socialSkills: 'socialSkills',
  stressResilience: 'stressResilience',
  teamworkAbility: 'teamworkAbility',
  leadershipPotential: 'leadershipPotential',
  adaptability: 'adaptability',
  problemSolving: 'problemSolving',
  overallScore: 'overallScore',
  recommendations: 'recommendations',
  assessmentNotes: 'assessmentNotes'
};

exports.Prisma.LanguageAssessmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  language: 'language',
  assessmentDate: 'assessmentDate',
  assessmentType: 'assessmentType',
  speakingLevel: 'speakingLevel',
  listeningLevel: 'listeningLevel',
  readingLevel: 'readingLevel',
  writingLevel: 'writingLevel',
  overallScore: 'overallScore',
  speakingScore: 'speakingScore',
  listeningScore: 'listeningScore',
  readingScore: 'readingScore',
  writingScore: 'writingScore',
  businessCommunication: 'businessCommunication',
  technicalVocabulary: 'technicalVocabulary',
  presentationSkills: 'presentationSkills',
  negotiationSkills: 'negotiationSkills',
  certificationLevel: 'certificationLevel',
  certificationDate: 'certificationDate',
  assessmentNotes: 'assessmentNotes'
};

exports.Prisma.ProfessionalAssessmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  assessmentType: 'assessmentType',
  assessmentDate: 'assessmentDate',
  technicalProficiency: 'technicalProficiency',
  toolsAndTechnologies: 'toolsAndTechnologies',
  industryKnowledge: 'industryKnowledge',
  problemSolvingAbility: 'problemSolvingAbility',
  innovationCapability: 'innovationCapability',
  projectManagement: 'projectManagement',
  teamLeadership: 'teamLeadership',
  clientManagement: 'clientManagement',
  strategicThinking: 'strategicThinking',
  analyticalSkills: 'analyticalSkills',
  domainExpertise: 'domainExpertise',
  regulatoryKnowledge: 'regulatoryKnowledge',
  marketUnderstanding: 'marketUnderstanding',
  competitorAwareness: 'competitorAwareness',
  overallScore: 'overallScore',
  skillGaps: 'skillGaps',
  developmentPlan: 'developmentPlan',
  assessmentNotes: 'assessmentNotes'
};

exports.Prisma.InterviewSessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  applicationId: 'applicationId',
  interviewType: 'interviewType',
  interviewRound: 'interviewRound',
  interviewDate: 'interviewDate',
  duration: 'duration',
  technicalScore: 'technicalScore',
  culturalFitScore: 'culturalFitScore',
  communicationScore: 'communicationScore',
  motivationScore: 'motivationScore',
  overallScore: 'overallScore',
  strengths: 'strengths',
  weaknesses: 'weaknesses',
  recommendations: 'recommendations',
  interviewNotes: 'interviewNotes',
  recommendation: 'recommendation',
  interviewerName: 'interviewerName',
  interviewerRole: 'interviewerRole'
};

exports.Prisma.OnboardingRecordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  companyId: 'companyId',
  startDate: 'startDate',
  onboardingStatus: 'onboardingStatus',
  documentationComplete: 'documentationComplete',
  systemAccessGranted: 'systemAccessGranted',
  trainingCompleted: 'trainingCompleted',
  culturalOrientationDone: 'culturalOrientationDone',
  mentorAssigned: 'mentorAssigned',
  culturalAdaptationScore: 'culturalAdaptationScore',
  integrationChallenges: 'integrationChallenges',
  supportProvided: 'supportProvided',
  expectedCompletionDate: 'expectedCompletionDate',
  actualCompletionDate: 'actualCompletionDate',
  onboardingNotes: 'onboardingNotes'
};

exports.Prisma.PerformanceReviewScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  companyId: 'companyId',
  reviewPeriod: 'reviewPeriod',
  reviewDate: 'reviewDate',
  reviewType: 'reviewType',
  technicalPerformance: 'technicalPerformance',
  culturalIntegration: 'culturalIntegration',
  teamCollaboration: 'teamCollaboration',
  communicationSkills: 'communicationSkills',
  goalAchievement: 'goalAchievement',
  overallPerformance: 'overallPerformance',
  culturalFitImprovement: 'culturalFitImprovement',
  japaneseBusinessEtiquette: 'japaneseBusinessEtiquette',
  teamHarmonyContribution: 'teamHarmonyContribution',
  achievements: 'achievements',
  areasForImprovement: 'areasForImprovement',
  developmentGoals: 'developmentGoals',
  reviewerName: 'reviewerName',
  reviewerRole: 'reviewerRole',
  reviewNotes: 'reviewNotes'
};

exports.Prisma.CandidateStatusHistoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  candidateId: 'candidateId',
  previousStatus: 'previousStatus',
  newStatus: 'newStatus',
  changeReason: 'changeReason',
  changedBy: 'changedBy',
  notes: 'notes'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  candidateId: 'candidateId',
  companyId: 'companyId',
  jobPostingId: 'jobPostingId',
  applicationStatus: 'applicationStatus',
  applicationDate: 'applicationDate',
  overallMatchScore: 'overallMatchScore',
  technicalMatchScore: 'technicalMatchScore',
  culturalFitScore: 'culturalFitScore',
  languageMatchScore: 'languageMatchScore',
  experienceMatchScore: 'experienceMatchScore',
  resumeUrl: 'resumeUrl',
  coverLetterUrl: 'coverLetterUrl',
  portfolioUrl: 'portfolioUrl',
  finalDecision: 'finalDecision',
  decisionDate: 'decisionDate',
  decisionReason: 'decisionReason',
  applicationNotes: 'applicationNotes'
};

exports.Prisma.MarketIntelligenceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dataType: 'dataType',
  industry: 'industry',
  location: 'location',
  timeframe: 'timeframe',
  averageSalary: 'averageSalary',
  salaryRange: 'salaryRange',
  demandLevel: 'demandLevel',
  supplyLevel: 'supplyLevel',
  inDemandSkills: 'inDemandSkills',
  emergingSkills: 'emergingSkills',
  decliningSkills: 'decliningSkills',
  culturalTrends: 'culturalTrends',
  adaptationChallenges: 'adaptationChallenges',
  successFactors: 'successFactors',
  dataSource: 'dataSource',
  reliability: 'reliability',
  marketNotes: 'marketNotes'
};

exports.Prisma.SystemMetricsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  metricType: 'metricType',
  metricName: 'metricName',
  metricValue: 'metricValue',
  metricUnit: 'metricUnit',
  timeframe: 'timeframe',
  category: 'category',
  subcategory: 'subcategory',
  calculationMethod: 'calculationMethod',
  dataPoints: 'dataPoints',
  confidence: 'confidence',
  metricNotes: 'metricNotes'
};

exports.Prisma.ReportGenerationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reportType: 'reportType',
  reportTitle: 'reportTitle',
  reportFormat: 'reportFormat',
  candidateId: 'candidateId',
  companyId: 'companyId',
  dateRange: 'dateRange',
  filters: 'filters',
  generationStatus: 'generationStatus',
  generatedAt: 'generatedAt',
  reportUrl: 'reportUrl',
  reportSize: 'reportSize',
  keyFindings: 'keyFindings',
  recommendations: 'recommendations',
  dataPoints: 'dataPoints',
  requestedBy: 'requestedBy',
  reportNotes: 'reportNotes'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CandidateStatus = exports.$Enums.CandidateStatus = {
  REGISTERED: 'REGISTERED',
  AVAILABLE: 'AVAILABLE',
  INTERVIEWING: 'INTERVIEWING',
  OFFERED: 'OFFERED',
  HIRED: 'HIRED',
  UNAVAILABLE: 'UNAVAILABLE',
  ARCHIVED: 'ARCHIVED'
};

exports.PostingStatus = exports.$Enums.PostingStatus = {
  draft: 'draft',
  active: 'active',
  paused: 'paused',
  filled: 'filled',
  cancelled: 'cancelled',
  expired: 'expired'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  pending: 'pending',
  reviewing: 'reviewing',
  interviewing: 'interviewing',
  offer: 'offer',
  hired: 'hired',
  rejected: 'rejected',
  withdrawn: 'withdrawn'
};

exports.Prisma.ModelName = {
  Candidate: 'Candidate',
  Company: 'Company',
  JobPosting: 'JobPosting',
  CulturalAssessment: 'CulturalAssessment',
  PsychologicalAssessment: 'PsychologicalAssessment',
  LanguageAssessment: 'LanguageAssessment',
  ProfessionalAssessment: 'ProfessionalAssessment',
  InterviewSession: 'InterviewSession',
  OnboardingRecord: 'OnboardingRecord',
  PerformanceReview: 'PerformanceReview',
  CandidateStatusHistory: 'CandidateStatusHistory',
  Application: 'Application',
  MarketIntelligence: 'MarketIntelligence',
  SystemMetrics: 'SystemMetrics',
  ReportGeneration: 'ReportGeneration'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
