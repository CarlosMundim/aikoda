
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Candidate
 * 
 */
export type Candidate = $Result.DefaultSelection<Prisma.$CandidatePayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model JobPosting
 * 
 */
export type JobPosting = $Result.DefaultSelection<Prisma.$JobPostingPayload>
/**
 * Model CulturalAssessment
 * 
 */
export type CulturalAssessment = $Result.DefaultSelection<Prisma.$CulturalAssessmentPayload>
/**
 * Model PsychologicalAssessment
 * 
 */
export type PsychologicalAssessment = $Result.DefaultSelection<Prisma.$PsychologicalAssessmentPayload>
/**
 * Model LanguageAssessment
 * 
 */
export type LanguageAssessment = $Result.DefaultSelection<Prisma.$LanguageAssessmentPayload>
/**
 * Model ProfessionalAssessment
 * 
 */
export type ProfessionalAssessment = $Result.DefaultSelection<Prisma.$ProfessionalAssessmentPayload>
/**
 * Model InterviewSession
 * 
 */
export type InterviewSession = $Result.DefaultSelection<Prisma.$InterviewSessionPayload>
/**
 * Model OnboardingRecord
 * 
 */
export type OnboardingRecord = $Result.DefaultSelection<Prisma.$OnboardingRecordPayload>
/**
 * Model PerformanceReview
 * 
 */
export type PerformanceReview = $Result.DefaultSelection<Prisma.$PerformanceReviewPayload>
/**
 * Model CandidateStatusHistory
 * 
 */
export type CandidateStatusHistory = $Result.DefaultSelection<Prisma.$CandidateStatusHistoryPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model MarketIntelligence
 * 
 */
export type MarketIntelligence = $Result.DefaultSelection<Prisma.$MarketIntelligencePayload>
/**
 * Model SystemMetrics
 * 
 */
export type SystemMetrics = $Result.DefaultSelection<Prisma.$SystemMetricsPayload>
/**
 * Model ReportGeneration
 * 
 */
export type ReportGeneration = $Result.DefaultSelection<Prisma.$ReportGenerationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CandidateStatus: {
  REGISTERED: 'REGISTERED',
  AVAILABLE: 'AVAILABLE',
  INTERVIEWING: 'INTERVIEWING',
  OFFERED: 'OFFERED',
  HIRED: 'HIRED',
  UNAVAILABLE: 'UNAVAILABLE',
  ARCHIVED: 'ARCHIVED'
};

export type CandidateStatus = (typeof CandidateStatus)[keyof typeof CandidateStatus]


export const ApplicationStatus: {
  pending: 'pending',
  reviewing: 'reviewing',
  interviewing: 'interviewing',
  offer: 'offer',
  hired: 'hired',
  rejected: 'rejected',
  withdrawn: 'withdrawn'
};

export type ApplicationStatus = (typeof ApplicationStatus)[keyof typeof ApplicationStatus]


export const PostingStatus: {
  draft: 'draft',
  active: 'active',
  paused: 'paused',
  filled: 'filled',
  cancelled: 'cancelled',
  expired: 'expired'
};

export type PostingStatus = (typeof PostingStatus)[keyof typeof PostingStatus]

}

export type CandidateStatus = $Enums.CandidateStatus

export const CandidateStatus: typeof $Enums.CandidateStatus

export type ApplicationStatus = $Enums.ApplicationStatus

export const ApplicationStatus: typeof $Enums.ApplicationStatus

export type PostingStatus = $Enums.PostingStatus

export const PostingStatus: typeof $Enums.PostingStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobPosting`: Exposes CRUD operations for the **JobPosting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobPostings
    * const jobPostings = await prisma.jobPosting.findMany()
    * ```
    */
  get jobPosting(): Prisma.JobPostingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.culturalAssessment`: Exposes CRUD operations for the **CulturalAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CulturalAssessments
    * const culturalAssessments = await prisma.culturalAssessment.findMany()
    * ```
    */
  get culturalAssessment(): Prisma.CulturalAssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.psychologicalAssessment`: Exposes CRUD operations for the **PsychologicalAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PsychologicalAssessments
    * const psychologicalAssessments = await prisma.psychologicalAssessment.findMany()
    * ```
    */
  get psychologicalAssessment(): Prisma.PsychologicalAssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.languageAssessment`: Exposes CRUD operations for the **LanguageAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguageAssessments
    * const languageAssessments = await prisma.languageAssessment.findMany()
    * ```
    */
  get languageAssessment(): Prisma.LanguageAssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionalAssessment`: Exposes CRUD operations for the **ProfessionalAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionalAssessments
    * const professionalAssessments = await prisma.professionalAssessment.findMany()
    * ```
    */
  get professionalAssessment(): Prisma.ProfessionalAssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interviewSession`: Exposes CRUD operations for the **InterviewSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InterviewSessions
    * const interviewSessions = await prisma.interviewSession.findMany()
    * ```
    */
  get interviewSession(): Prisma.InterviewSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.onboardingRecord`: Exposes CRUD operations for the **OnboardingRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OnboardingRecords
    * const onboardingRecords = await prisma.onboardingRecord.findMany()
    * ```
    */
  get onboardingRecord(): Prisma.OnboardingRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.performanceReview`: Exposes CRUD operations for the **PerformanceReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformanceReviews
    * const performanceReviews = await prisma.performanceReview.findMany()
    * ```
    */
  get performanceReview(): Prisma.PerformanceReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidateStatusHistory`: Exposes CRUD operations for the **CandidateStatusHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateStatusHistories
    * const candidateStatusHistories = await prisma.candidateStatusHistory.findMany()
    * ```
    */
  get candidateStatusHistory(): Prisma.CandidateStatusHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketIntelligence`: Exposes CRUD operations for the **MarketIntelligence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketIntelligences
    * const marketIntelligences = await prisma.marketIntelligence.findMany()
    * ```
    */
  get marketIntelligence(): Prisma.MarketIntelligenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemMetrics`: Exposes CRUD operations for the **SystemMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemMetrics
    * const systemMetrics = await prisma.systemMetrics.findMany()
    * ```
    */
  get systemMetrics(): Prisma.SystemMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportGeneration`: Exposes CRUD operations for the **ReportGeneration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportGenerations
    * const reportGenerations = await prisma.reportGeneration.findMany()
    * ```
    */
  get reportGeneration(): Prisma.ReportGenerationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Candidate: 'Candidate',
    Company: 'Company',
    JobPosting: 'JobPosting',
    CulturalAssessment: 'CulturalAssessment',
    PsychologicalAssessment: 'PsychologicalAssessment',
    LanguageAssessment: 'LanguageAssessment',
    ProfessionalAssessment: 'ProfessionalAssessment',
    InterviewSession: 'InterviewSession',
    OnboardingRecord: 'OnboardingRecord',
    PerformanceReview: 'PerformanceReview',
    CandidateStatusHistory: 'CandidateStatusHistory',
    Application: 'Application',
    MarketIntelligence: 'MarketIntelligence',
    SystemMetrics: 'SystemMetrics',
    ReportGeneration: 'ReportGeneration'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "candidate" | "company" | "jobPosting" | "culturalAssessment" | "psychologicalAssessment" | "languageAssessment" | "professionalAssessment" | "interviewSession" | "onboardingRecord" | "performanceReview" | "candidateStatusHistory" | "application" | "marketIntelligence" | "systemMetrics" | "reportGeneration"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Candidate: {
        payload: Prisma.$CandidatePayload<ExtArgs>
        fields: Prisma.CandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findFirst: {
            args: Prisma.CandidateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findMany: {
            args: Prisma.CandidateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          create: {
            args: Prisma.CandidateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          createMany: {
            args: Prisma.CandidateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          delete: {
            args: Prisma.CandidateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          update: {
            args: Prisma.CandidateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          deleteMany: {
            args: Prisma.CandidateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          upsert: {
            args: Prisma.CandidateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          aggregate: {
            args: Prisma.CandidateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidate>
          }
          groupBy: {
            args: Prisma.CandidateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      JobPosting: {
        payload: Prisma.$JobPostingPayload<ExtArgs>
        fields: Prisma.JobPostingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobPostingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobPostingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          findFirst: {
            args: Prisma.JobPostingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobPostingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          findMany: {
            args: Prisma.JobPostingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          create: {
            args: Prisma.JobPostingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          createMany: {
            args: Prisma.JobPostingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobPostingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          delete: {
            args: Prisma.JobPostingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          update: {
            args: Prisma.JobPostingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          deleteMany: {
            args: Prisma.JobPostingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobPostingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobPostingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>[]
          }
          upsert: {
            args: Prisma.JobPostingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPostingPayload>
          }
          aggregate: {
            args: Prisma.JobPostingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobPosting>
          }
          groupBy: {
            args: Prisma.JobPostingGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobPostingGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobPostingCountArgs<ExtArgs>
            result: $Utils.Optional<JobPostingCountAggregateOutputType> | number
          }
        }
      }
      CulturalAssessment: {
        payload: Prisma.$CulturalAssessmentPayload<ExtArgs>
        fields: Prisma.CulturalAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CulturalAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CulturalAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>
          }
          findFirst: {
            args: Prisma.CulturalAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CulturalAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>
          }
          findMany: {
            args: Prisma.CulturalAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>[]
          }
          create: {
            args: Prisma.CulturalAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>
          }
          createMany: {
            args: Prisma.CulturalAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CulturalAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>[]
          }
          delete: {
            args: Prisma.CulturalAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>
          }
          update: {
            args: Prisma.CulturalAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.CulturalAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CulturalAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CulturalAssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>[]
          }
          upsert: {
            args: Prisma.CulturalAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CulturalAssessmentPayload>
          }
          aggregate: {
            args: Prisma.CulturalAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCulturalAssessment>
          }
          groupBy: {
            args: Prisma.CulturalAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CulturalAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CulturalAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<CulturalAssessmentCountAggregateOutputType> | number
          }
        }
      }
      PsychologicalAssessment: {
        payload: Prisma.$PsychologicalAssessmentPayload<ExtArgs>
        fields: Prisma.PsychologicalAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PsychologicalAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PsychologicalAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>
          }
          findFirst: {
            args: Prisma.PsychologicalAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PsychologicalAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>
          }
          findMany: {
            args: Prisma.PsychologicalAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>[]
          }
          create: {
            args: Prisma.PsychologicalAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>
          }
          createMany: {
            args: Prisma.PsychologicalAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PsychologicalAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>[]
          }
          delete: {
            args: Prisma.PsychologicalAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>
          }
          update: {
            args: Prisma.PsychologicalAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.PsychologicalAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PsychologicalAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PsychologicalAssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>[]
          }
          upsert: {
            args: Prisma.PsychologicalAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychologicalAssessmentPayload>
          }
          aggregate: {
            args: Prisma.PsychologicalAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePsychologicalAssessment>
          }
          groupBy: {
            args: Prisma.PsychologicalAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PsychologicalAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PsychologicalAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<PsychologicalAssessmentCountAggregateOutputType> | number
          }
        }
      }
      LanguageAssessment: {
        payload: Prisma.$LanguageAssessmentPayload<ExtArgs>
        fields: Prisma.LanguageAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>
          }
          findFirst: {
            args: Prisma.LanguageAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>
          }
          findMany: {
            args: Prisma.LanguageAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>[]
          }
          create: {
            args: Prisma.LanguageAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>
          }
          createMany: {
            args: Prisma.LanguageAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguageAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>[]
          }
          delete: {
            args: Prisma.LanguageAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>
          }
          update: {
            args: Prisma.LanguageAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.LanguageAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LanguageAssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>[]
          }
          upsert: {
            args: Prisma.LanguageAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageAssessmentPayload>
          }
          aggregate: {
            args: Prisma.LanguageAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguageAssessment>
          }
          groupBy: {
            args: Prisma.LanguageAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageAssessmentCountAggregateOutputType> | number
          }
        }
      }
      ProfessionalAssessment: {
        payload: Prisma.$ProfessionalAssessmentPayload<ExtArgs>
        fields: Prisma.ProfessionalAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>
          }
          findFirst: {
            args: Prisma.ProfessionalAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>
          }
          findMany: {
            args: Prisma.ProfessionalAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>[]
          }
          create: {
            args: Prisma.ProfessionalAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>
          }
          createMany: {
            args: Prisma.ProfessionalAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionalAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>[]
          }
          delete: {
            args: Prisma.ProfessionalAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>
          }
          update: {
            args: Prisma.ProfessionalAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionalAssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionalAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalAssessmentPayload>
          }
          aggregate: {
            args: Prisma.ProfessionalAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionalAssessment>
          }
          groupBy: {
            args: Prisma.ProfessionalAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalAssessmentCountAggregateOutputType> | number
          }
        }
      }
      InterviewSession: {
        payload: Prisma.$InterviewSessionPayload<ExtArgs>
        fields: Prisma.InterviewSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterviewSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterviewSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>
          }
          findFirst: {
            args: Prisma.InterviewSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterviewSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>
          }
          findMany: {
            args: Prisma.InterviewSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>[]
          }
          create: {
            args: Prisma.InterviewSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>
          }
          createMany: {
            args: Prisma.InterviewSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InterviewSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>[]
          }
          delete: {
            args: Prisma.InterviewSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>
          }
          update: {
            args: Prisma.InterviewSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>
          }
          deleteMany: {
            args: Prisma.InterviewSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterviewSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InterviewSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>[]
          }
          upsert: {
            args: Prisma.InterviewSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewSessionPayload>
          }
          aggregate: {
            args: Prisma.InterviewSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInterviewSession>
          }
          groupBy: {
            args: Prisma.InterviewSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterviewSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterviewSessionCountArgs<ExtArgs>
            result: $Utils.Optional<InterviewSessionCountAggregateOutputType> | number
          }
        }
      }
      OnboardingRecord: {
        payload: Prisma.$OnboardingRecordPayload<ExtArgs>
        fields: Prisma.OnboardingRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OnboardingRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OnboardingRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>
          }
          findFirst: {
            args: Prisma.OnboardingRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OnboardingRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>
          }
          findMany: {
            args: Prisma.OnboardingRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>[]
          }
          create: {
            args: Prisma.OnboardingRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>
          }
          createMany: {
            args: Prisma.OnboardingRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OnboardingRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>[]
          }
          delete: {
            args: Prisma.OnboardingRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>
          }
          update: {
            args: Prisma.OnboardingRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>
          }
          deleteMany: {
            args: Prisma.OnboardingRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OnboardingRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OnboardingRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>[]
          }
          upsert: {
            args: Prisma.OnboardingRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnboardingRecordPayload>
          }
          aggregate: {
            args: Prisma.OnboardingRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOnboardingRecord>
          }
          groupBy: {
            args: Prisma.OnboardingRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<OnboardingRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.OnboardingRecordCountArgs<ExtArgs>
            result: $Utils.Optional<OnboardingRecordCountAggregateOutputType> | number
          }
        }
      }
      PerformanceReview: {
        payload: Prisma.$PerformanceReviewPayload<ExtArgs>
        fields: Prisma.PerformanceReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformanceReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformanceReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          findFirst: {
            args: Prisma.PerformanceReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformanceReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          findMany: {
            args: Prisma.PerformanceReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>[]
          }
          create: {
            args: Prisma.PerformanceReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          createMany: {
            args: Prisma.PerformanceReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformanceReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>[]
          }
          delete: {
            args: Prisma.PerformanceReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          update: {
            args: Prisma.PerformanceReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          deleteMany: {
            args: Prisma.PerformanceReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformanceReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PerformanceReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>[]
          }
          upsert: {
            args: Prisma.PerformanceReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          aggregate: {
            args: Prisma.PerformanceReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformanceReview>
          }
          groupBy: {
            args: Prisma.PerformanceReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformanceReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformanceReviewCountArgs<ExtArgs>
            result: $Utils.Optional<PerformanceReviewCountAggregateOutputType> | number
          }
        }
      }
      CandidateStatusHistory: {
        payload: Prisma.$CandidateStatusHistoryPayload<ExtArgs>
        fields: Prisma.CandidateStatusHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateStatusHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateStatusHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>
          }
          findFirst: {
            args: Prisma.CandidateStatusHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateStatusHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>
          }
          findMany: {
            args: Prisma.CandidateStatusHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>[]
          }
          create: {
            args: Prisma.CandidateStatusHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>
          }
          createMany: {
            args: Prisma.CandidateStatusHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateStatusHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>[]
          }
          delete: {
            args: Prisma.CandidateStatusHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>
          }
          update: {
            args: Prisma.CandidateStatusHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>
          }
          deleteMany: {
            args: Prisma.CandidateStatusHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateStatusHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateStatusHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>[]
          }
          upsert: {
            args: Prisma.CandidateStatusHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateStatusHistoryPayload>
          }
          aggregate: {
            args: Prisma.CandidateStatusHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidateStatusHistory>
          }
          groupBy: {
            args: Prisma.CandidateStatusHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateStatusHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateStatusHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateStatusHistoryCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      MarketIntelligence: {
        payload: Prisma.$MarketIntelligencePayload<ExtArgs>
        fields: Prisma.MarketIntelligenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketIntelligenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketIntelligenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>
          }
          findFirst: {
            args: Prisma.MarketIntelligenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketIntelligenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>
          }
          findMany: {
            args: Prisma.MarketIntelligenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>[]
          }
          create: {
            args: Prisma.MarketIntelligenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>
          }
          createMany: {
            args: Prisma.MarketIntelligenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketIntelligenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>[]
          }
          delete: {
            args: Prisma.MarketIntelligenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>
          }
          update: {
            args: Prisma.MarketIntelligenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>
          }
          deleteMany: {
            args: Prisma.MarketIntelligenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketIntelligenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketIntelligenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>[]
          }
          upsert: {
            args: Prisma.MarketIntelligenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketIntelligencePayload>
          }
          aggregate: {
            args: Prisma.MarketIntelligenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketIntelligence>
          }
          groupBy: {
            args: Prisma.MarketIntelligenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketIntelligenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketIntelligenceCountArgs<ExtArgs>
            result: $Utils.Optional<MarketIntelligenceCountAggregateOutputType> | number
          }
        }
      }
      SystemMetrics: {
        payload: Prisma.$SystemMetricsPayload<ExtArgs>
        fields: Prisma.SystemMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          findFirst: {
            args: Prisma.SystemMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          findMany: {
            args: Prisma.SystemMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          create: {
            args: Prisma.SystemMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          createMany: {
            args: Prisma.SystemMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          delete: {
            args: Prisma.SystemMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          update: {
            args: Prisma.SystemMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          deleteMany: {
            args: Prisma.SystemMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          upsert: {
            args: Prisma.SystemMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          aggregate: {
            args: Prisma.SystemMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemMetrics>
          }
          groupBy: {
            args: Prisma.SystemMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemMetricsCountAggregateOutputType> | number
          }
        }
      }
      ReportGeneration: {
        payload: Prisma.$ReportGenerationPayload<ExtArgs>
        fields: Prisma.ReportGenerationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportGenerationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportGenerationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>
          }
          findFirst: {
            args: Prisma.ReportGenerationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportGenerationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>
          }
          findMany: {
            args: Prisma.ReportGenerationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>[]
          }
          create: {
            args: Prisma.ReportGenerationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>
          }
          createMany: {
            args: Prisma.ReportGenerationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportGenerationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>[]
          }
          delete: {
            args: Prisma.ReportGenerationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>
          }
          update: {
            args: Prisma.ReportGenerationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>
          }
          deleteMany: {
            args: Prisma.ReportGenerationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportGenerationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportGenerationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>[]
          }
          upsert: {
            args: Prisma.ReportGenerationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportGenerationPayload>
          }
          aggregate: {
            args: Prisma.ReportGenerationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportGeneration>
          }
          groupBy: {
            args: Prisma.ReportGenerationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGenerationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportGenerationCountArgs<ExtArgs>
            result: $Utils.Optional<ReportGenerationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    candidate?: CandidateOmit
    company?: CompanyOmit
    jobPosting?: JobPostingOmit
    culturalAssessment?: CulturalAssessmentOmit
    psychologicalAssessment?: PsychologicalAssessmentOmit
    languageAssessment?: LanguageAssessmentOmit
    professionalAssessment?: ProfessionalAssessmentOmit
    interviewSession?: InterviewSessionOmit
    onboardingRecord?: OnboardingRecordOmit
    performanceReview?: PerformanceReviewOmit
    candidateStatusHistory?: CandidateStatusHistoryOmit
    application?: ApplicationOmit
    marketIntelligence?: MarketIntelligenceOmit
    systemMetrics?: SystemMetricsOmit
    reportGeneration?: ReportGenerationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CandidateCountOutputType
   */

  export type CandidateCountOutputType = {
    applications: number
    culturalAssessments: number
    psychologicalAssessments: number
    languageAssessments: number
    professionalAssessments: number
    interviewSessions: number
    onboardingRecords: number
    performanceReviews: number
    statusHistory: number
  }

  export type CandidateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | CandidateCountOutputTypeCountApplicationsArgs
    culturalAssessments?: boolean | CandidateCountOutputTypeCountCulturalAssessmentsArgs
    psychologicalAssessments?: boolean | CandidateCountOutputTypeCountPsychologicalAssessmentsArgs
    languageAssessments?: boolean | CandidateCountOutputTypeCountLanguageAssessmentsArgs
    professionalAssessments?: boolean | CandidateCountOutputTypeCountProfessionalAssessmentsArgs
    interviewSessions?: boolean | CandidateCountOutputTypeCountInterviewSessionsArgs
    onboardingRecords?: boolean | CandidateCountOutputTypeCountOnboardingRecordsArgs
    performanceReviews?: boolean | CandidateCountOutputTypeCountPerformanceReviewsArgs
    statusHistory?: boolean | CandidateCountOutputTypeCountStatusHistoryArgs
  }

  // Custom InputTypes
  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     */
    select?: CandidateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountCulturalAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CulturalAssessmentWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountPsychologicalAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PsychologicalAssessmentWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountLanguageAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageAssessmentWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountProfessionalAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalAssessmentWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountInterviewSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewSessionWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountOnboardingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OnboardingRecordWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountPerformanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateStatusHistoryWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    jobPostings: number
    applications: number
    onboardingRecords: number
    performanceReviews: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPostings?: boolean | CompanyCountOutputTypeCountJobPostingsArgs
    applications?: boolean | CompanyCountOutputTypeCountApplicationsArgs
    onboardingRecords?: boolean | CompanyCountOutputTypeCountOnboardingRecordsArgs
    performanceReviews?: boolean | CompanyCountOutputTypeCountPerformanceReviewsArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountJobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountOnboardingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OnboardingRecordWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountPerformanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewWhereInput
  }


  /**
   * Count Type JobPostingCountOutputType
   */

  export type JobPostingCountOutputType = {
    applications: number
  }

  export type JobPostingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | JobPostingCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * JobPostingCountOutputType without action
   */
  export type JobPostingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPostingCountOutputType
     */
    select?: JobPostingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobPostingCountOutputType without action
   */
  export type JobPostingCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Count Type ApplicationCountOutputType
   */

  export type ApplicationCountOutputType = {
    interviewSessions: number
  }

  export type ApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interviewSessions?: boolean | ApplicationCountOutputTypeCountInterviewSessionsArgs
  }

  // Custom InputTypes
  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountInterviewSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewSessionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    isActive: boolean | null
    lastLogin: Date | null
    candidateId: string | null
    companyId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    isActive: boolean | null
    lastLogin: Date | null
    candidateId: string | null
    companyId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    password: number
    name: number
    role: number
    isActive: number
    lastLogin: number
    candidateId: number
    companyId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    role?: true
    isActive?: true
    lastLogin?: true
    candidateId?: true
    companyId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    role?: true
    isActive?: true
    lastLogin?: true
    candidateId?: true
    companyId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    role?: true
    isActive?: true
    lastLogin?: true
    candidateId?: true
    companyId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    email: string
    password: string
    name: string | null
    role: string
    isActive: boolean
    lastLogin: Date | null
    candidateId: string | null
    companyId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    candidateId?: boolean
    companyId?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    candidateId?: boolean
    companyId?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    candidateId?: boolean
    companyId?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    candidateId?: boolean
    companyId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "email" | "password" | "name" | "role" | "isActive" | "lastLogin" | "candidateId" | "companyId", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      email: string
      password: string
      name: string | null
      role: string
      isActive: boolean
      lastLogin: Date | null
      candidateId: string | null
      companyId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly candidateId: FieldRef<"User", 'String'>
    readonly companyId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Candidate
   */

  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateAvgAggregateOutputType = {
    experience: number | null
    adaptabilityScore: number | null
    waHarmonyAlignment: number | null
    kaizenMindset: number | null
    omotenashiService: number | null
    bushidoDedication: number | null
    nemawashiConsensus: number | null
    salaryExpectation: number | null
  }

  export type CandidateSumAggregateOutputType = {
    experience: number | null
    adaptabilityScore: number | null
    waHarmonyAlignment: number | null
    kaizenMindset: number | null
    omotenashiService: number | null
    bushidoDedication: number | null
    nemawashiConsensus: number | null
    salaryExpectation: number | null
  }

  export type CandidateMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    email: string | null
    cellPhone: string | null
    nationality: string | null
    currentLocation: string | null
    dateOfBirth: Date | null
    gender: string | null
    maritalStatus: string | null
    currentPosition: string | null
    experience: number | null
    education: string | null
    technicalSkills: string | null
    languageProficiency: string | null
    certifications: string | null
    culturalBackground: string | null
    workStylePreference: string | null
    communicationStyle: string | null
    adaptabilityScore: number | null
    teamworkOrientation: string | null
    leadershipStyle: string | null
    conflictResolution: string | null
    timeManagement: string | null
    waHarmonyAlignment: number | null
    kaizenMindset: number | null
    omotenashiService: number | null
    bushidoDedication: number | null
    nemawashiConsensus: number | null
    candidateStatus: $Enums.CandidateStatus | null
    availabilityDate: Date | null
    salaryExpectation: number | null
    preferredLocation: string | null
    visaStatus: string | null
  }

  export type CandidateMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    email: string | null
    cellPhone: string | null
    nationality: string | null
    currentLocation: string | null
    dateOfBirth: Date | null
    gender: string | null
    maritalStatus: string | null
    currentPosition: string | null
    experience: number | null
    education: string | null
    technicalSkills: string | null
    languageProficiency: string | null
    certifications: string | null
    culturalBackground: string | null
    workStylePreference: string | null
    communicationStyle: string | null
    adaptabilityScore: number | null
    teamworkOrientation: string | null
    leadershipStyle: string | null
    conflictResolution: string | null
    timeManagement: string | null
    waHarmonyAlignment: number | null
    kaizenMindset: number | null
    omotenashiService: number | null
    bushidoDedication: number | null
    nemawashiConsensus: number | null
    candidateStatus: $Enums.CandidateStatus | null
    availabilityDate: Date | null
    salaryExpectation: number | null
    preferredLocation: string | null
    visaStatus: string | null
  }

  export type CandidateCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    firstName: number
    lastName: number
    email: number
    cellPhone: number
    nationality: number
    currentLocation: number
    dateOfBirth: number
    gender: number
    maritalStatus: number
    currentPosition: number
    experience: number
    education: number
    technicalSkills: number
    languageProficiency: number
    certifications: number
    culturalBackground: number
    workStylePreference: number
    communicationStyle: number
    adaptabilityScore: number
    teamworkOrientation: number
    leadershipStyle: number
    conflictResolution: number
    timeManagement: number
    waHarmonyAlignment: number
    kaizenMindset: number
    omotenashiService: number
    bushidoDedication: number
    nemawashiConsensus: number
    candidateStatus: number
    availabilityDate: number
    salaryExpectation: number
    preferredLocation: number
    visaStatus: number
    _all: number
  }


  export type CandidateAvgAggregateInputType = {
    experience?: true
    adaptabilityScore?: true
    waHarmonyAlignment?: true
    kaizenMindset?: true
    omotenashiService?: true
    bushidoDedication?: true
    nemawashiConsensus?: true
    salaryExpectation?: true
  }

  export type CandidateSumAggregateInputType = {
    experience?: true
    adaptabilityScore?: true
    waHarmonyAlignment?: true
    kaizenMindset?: true
    omotenashiService?: true
    bushidoDedication?: true
    nemawashiConsensus?: true
    salaryExpectation?: true
  }

  export type CandidateMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    cellPhone?: true
    nationality?: true
    currentLocation?: true
    dateOfBirth?: true
    gender?: true
    maritalStatus?: true
    currentPosition?: true
    experience?: true
    education?: true
    technicalSkills?: true
    languageProficiency?: true
    certifications?: true
    culturalBackground?: true
    workStylePreference?: true
    communicationStyle?: true
    adaptabilityScore?: true
    teamworkOrientation?: true
    leadershipStyle?: true
    conflictResolution?: true
    timeManagement?: true
    waHarmonyAlignment?: true
    kaizenMindset?: true
    omotenashiService?: true
    bushidoDedication?: true
    nemawashiConsensus?: true
    candidateStatus?: true
    availabilityDate?: true
    salaryExpectation?: true
    preferredLocation?: true
    visaStatus?: true
  }

  export type CandidateMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    cellPhone?: true
    nationality?: true
    currentLocation?: true
    dateOfBirth?: true
    gender?: true
    maritalStatus?: true
    currentPosition?: true
    experience?: true
    education?: true
    technicalSkills?: true
    languageProficiency?: true
    certifications?: true
    culturalBackground?: true
    workStylePreference?: true
    communicationStyle?: true
    adaptabilityScore?: true
    teamworkOrientation?: true
    leadershipStyle?: true
    conflictResolution?: true
    timeManagement?: true
    waHarmonyAlignment?: true
    kaizenMindset?: true
    omotenashiService?: true
    bushidoDedication?: true
    nemawashiConsensus?: true
    candidateStatus?: true
    availabilityDate?: true
    salaryExpectation?: true
    preferredLocation?: true
    visaStatus?: true
  }

  export type CandidateCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    cellPhone?: true
    nationality?: true
    currentLocation?: true
    dateOfBirth?: true
    gender?: true
    maritalStatus?: true
    currentPosition?: true
    experience?: true
    education?: true
    technicalSkills?: true
    languageProficiency?: true
    certifications?: true
    culturalBackground?: true
    workStylePreference?: true
    communicationStyle?: true
    adaptabilityScore?: true
    teamworkOrientation?: true
    leadershipStyle?: true
    conflictResolution?: true
    timeManagement?: true
    waHarmonyAlignment?: true
    kaizenMindset?: true
    omotenashiService?: true
    bushidoDedication?: true
    nemawashiConsensus?: true
    candidateStatus?: true
    availabilityDate?: true
    salaryExpectation?: true
    preferredLocation?: true
    visaStatus?: true
    _all?: true
  }

  export type CandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate to aggregate.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithAggregationInput | CandidateOrderByWithAggregationInput[]
    by: CandidateScalarFieldEnum[] | CandidateScalarFieldEnum
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _avg?: CandidateAvgAggregateInputType
    _sum?: CandidateSumAggregateInputType
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }

  export type CandidateGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    firstName: string
    lastName: string
    email: string
    cellPhone: string | null
    nationality: string
    currentLocation: string
    dateOfBirth: Date | null
    gender: string | null
    maritalStatus: string | null
    currentPosition: string | null
    experience: number | null
    education: string | null
    technicalSkills: string | null
    languageProficiency: string | null
    certifications: string | null
    culturalBackground: string | null
    workStylePreference: string | null
    communicationStyle: string | null
    adaptabilityScore: number | null
    teamworkOrientation: string | null
    leadershipStyle: string | null
    conflictResolution: string | null
    timeManagement: string | null
    waHarmonyAlignment: number | null
    kaizenMindset: number | null
    omotenashiService: number | null
    bushidoDedication: number | null
    nemawashiConsensus: number | null
    candidateStatus: $Enums.CandidateStatus
    availabilityDate: Date | null
    salaryExpectation: number | null
    preferredLocation: string | null
    visaStatus: string | null
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    cellPhone?: boolean
    nationality?: boolean
    currentLocation?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    maritalStatus?: boolean
    currentPosition?: boolean
    experience?: boolean
    education?: boolean
    technicalSkills?: boolean
    languageProficiency?: boolean
    certifications?: boolean
    culturalBackground?: boolean
    workStylePreference?: boolean
    communicationStyle?: boolean
    adaptabilityScore?: boolean
    teamworkOrientation?: boolean
    leadershipStyle?: boolean
    conflictResolution?: boolean
    timeManagement?: boolean
    waHarmonyAlignment?: boolean
    kaizenMindset?: boolean
    omotenashiService?: boolean
    bushidoDedication?: boolean
    nemawashiConsensus?: boolean
    candidateStatus?: boolean
    availabilityDate?: boolean
    salaryExpectation?: boolean
    preferredLocation?: boolean
    visaStatus?: boolean
    applications?: boolean | Candidate$applicationsArgs<ExtArgs>
    culturalAssessments?: boolean | Candidate$culturalAssessmentsArgs<ExtArgs>
    psychologicalAssessments?: boolean | Candidate$psychologicalAssessmentsArgs<ExtArgs>
    languageAssessments?: boolean | Candidate$languageAssessmentsArgs<ExtArgs>
    professionalAssessments?: boolean | Candidate$professionalAssessmentsArgs<ExtArgs>
    interviewSessions?: boolean | Candidate$interviewSessionsArgs<ExtArgs>
    onboardingRecords?: boolean | Candidate$onboardingRecordsArgs<ExtArgs>
    performanceReviews?: boolean | Candidate$performanceReviewsArgs<ExtArgs>
    statusHistory?: boolean | Candidate$statusHistoryArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    cellPhone?: boolean
    nationality?: boolean
    currentLocation?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    maritalStatus?: boolean
    currentPosition?: boolean
    experience?: boolean
    education?: boolean
    technicalSkills?: boolean
    languageProficiency?: boolean
    certifications?: boolean
    culturalBackground?: boolean
    workStylePreference?: boolean
    communicationStyle?: boolean
    adaptabilityScore?: boolean
    teamworkOrientation?: boolean
    leadershipStyle?: boolean
    conflictResolution?: boolean
    timeManagement?: boolean
    waHarmonyAlignment?: boolean
    kaizenMindset?: boolean
    omotenashiService?: boolean
    bushidoDedication?: boolean
    nemawashiConsensus?: boolean
    candidateStatus?: boolean
    availabilityDate?: boolean
    salaryExpectation?: boolean
    preferredLocation?: boolean
    visaStatus?: boolean
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    cellPhone?: boolean
    nationality?: boolean
    currentLocation?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    maritalStatus?: boolean
    currentPosition?: boolean
    experience?: boolean
    education?: boolean
    technicalSkills?: boolean
    languageProficiency?: boolean
    certifications?: boolean
    culturalBackground?: boolean
    workStylePreference?: boolean
    communicationStyle?: boolean
    adaptabilityScore?: boolean
    teamworkOrientation?: boolean
    leadershipStyle?: boolean
    conflictResolution?: boolean
    timeManagement?: boolean
    waHarmonyAlignment?: boolean
    kaizenMindset?: boolean
    omotenashiService?: boolean
    bushidoDedication?: boolean
    nemawashiConsensus?: boolean
    candidateStatus?: boolean
    availabilityDate?: boolean
    salaryExpectation?: boolean
    preferredLocation?: boolean
    visaStatus?: boolean
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    cellPhone?: boolean
    nationality?: boolean
    currentLocation?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    maritalStatus?: boolean
    currentPosition?: boolean
    experience?: boolean
    education?: boolean
    technicalSkills?: boolean
    languageProficiency?: boolean
    certifications?: boolean
    culturalBackground?: boolean
    workStylePreference?: boolean
    communicationStyle?: boolean
    adaptabilityScore?: boolean
    teamworkOrientation?: boolean
    leadershipStyle?: boolean
    conflictResolution?: boolean
    timeManagement?: boolean
    waHarmonyAlignment?: boolean
    kaizenMindset?: boolean
    omotenashiService?: boolean
    bushidoDedication?: boolean
    nemawashiConsensus?: boolean
    candidateStatus?: boolean
    availabilityDate?: boolean
    salaryExpectation?: boolean
    preferredLocation?: boolean
    visaStatus?: boolean
  }

  export type CandidateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "firstName" | "lastName" | "email" | "cellPhone" | "nationality" | "currentLocation" | "dateOfBirth" | "gender" | "maritalStatus" | "currentPosition" | "experience" | "education" | "technicalSkills" | "languageProficiency" | "certifications" | "culturalBackground" | "workStylePreference" | "communicationStyle" | "adaptabilityScore" | "teamworkOrientation" | "leadershipStyle" | "conflictResolution" | "timeManagement" | "waHarmonyAlignment" | "kaizenMindset" | "omotenashiService" | "bushidoDedication" | "nemawashiConsensus" | "candidateStatus" | "availabilityDate" | "salaryExpectation" | "preferredLocation" | "visaStatus", ExtArgs["result"]["candidate"]>
  export type CandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | Candidate$applicationsArgs<ExtArgs>
    culturalAssessments?: boolean | Candidate$culturalAssessmentsArgs<ExtArgs>
    psychologicalAssessments?: boolean | Candidate$psychologicalAssessmentsArgs<ExtArgs>
    languageAssessments?: boolean | Candidate$languageAssessmentsArgs<ExtArgs>
    professionalAssessments?: boolean | Candidate$professionalAssessmentsArgs<ExtArgs>
    interviewSessions?: boolean | Candidate$interviewSessionsArgs<ExtArgs>
    onboardingRecords?: boolean | Candidate$onboardingRecordsArgs<ExtArgs>
    performanceReviews?: boolean | Candidate$performanceReviewsArgs<ExtArgs>
    statusHistory?: boolean | Candidate$statusHistoryArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CandidateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CandidateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate"
    objects: {
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      culturalAssessments: Prisma.$CulturalAssessmentPayload<ExtArgs>[]
      psychologicalAssessments: Prisma.$PsychologicalAssessmentPayload<ExtArgs>[]
      languageAssessments: Prisma.$LanguageAssessmentPayload<ExtArgs>[]
      professionalAssessments: Prisma.$ProfessionalAssessmentPayload<ExtArgs>[]
      interviewSessions: Prisma.$InterviewSessionPayload<ExtArgs>[]
      onboardingRecords: Prisma.$OnboardingRecordPayload<ExtArgs>[]
      performanceReviews: Prisma.$PerformanceReviewPayload<ExtArgs>[]
      statusHistory: Prisma.$CandidateStatusHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      firstName: string
      lastName: string
      email: string
      cellPhone: string | null
      nationality: string
      currentLocation: string
      dateOfBirth: Date | null
      gender: string | null
      maritalStatus: string | null
      currentPosition: string | null
      experience: number | null
      education: string | null
      technicalSkills: string | null
      languageProficiency: string | null
      certifications: string | null
      culturalBackground: string | null
      workStylePreference: string | null
      communicationStyle: string | null
      adaptabilityScore: number | null
      teamworkOrientation: string | null
      leadershipStyle: string | null
      conflictResolution: string | null
      timeManagement: string | null
      waHarmonyAlignment: number | null
      kaizenMindset: number | null
      omotenashiService: number | null
      bushidoDedication: number | null
      nemawashiConsensus: number | null
      candidateStatus: $Enums.CandidateStatus
      availabilityDate: Date | null
      salaryExpectation: number | null
      preferredLocation: string | null
      visaStatus: string | null
    }, ExtArgs["result"]["candidate"]>
    composites: {}
  }

  type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = $Result.GetResult<Prisma.$CandidatePayload, S>

  type CandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateCountAggregateInputType | true
    }

  export interface CandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateFindUniqueArgs>(args: SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Candidate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateFindFirstArgs>(args?: SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateFindManyArgs>(args?: SelectSubset<T, CandidateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
     */
    create<T extends CandidateCreateArgs>(args: SelectSubset<T, CandidateCreateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Candidates.
     * @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateCreateManyArgs>(args?: SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Candidates and returns the data saved in the database.
     * @param {CandidateCreateManyAndReturnArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
     */
    delete<T extends CandidateDeleteArgs>(args: SelectSubset<T, CandidateDeleteArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateUpdateArgs>(args: SelectSubset<T, CandidateUpdateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateDeleteManyArgs>(args?: SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateUpdateManyArgs>(args: SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates and returns the data updated in the database.
     * @param {CandidateUpdateManyAndReturnArgs} args - Arguments to update many Candidates.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
     */
    upsert<T extends CandidateUpsertArgs>(args: SelectSubset<T, CandidateUpsertArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate model
   */
  readonly fields: CandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applications<T extends Candidate$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    culturalAssessments<T extends Candidate$culturalAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$culturalAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    psychologicalAssessments<T extends Candidate$psychologicalAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$psychologicalAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    languageAssessments<T extends Candidate$languageAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$languageAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionalAssessments<T extends Candidate$professionalAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$professionalAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interviewSessions<T extends Candidate$interviewSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$interviewSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    onboardingRecords<T extends Candidate$onboardingRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$onboardingRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceReviews<T extends Candidate$performanceReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$performanceReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    statusHistory<T extends Candidate$statusHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$statusHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Candidate model
   */
  interface CandidateFieldRefs {
    readonly id: FieldRef<"Candidate", 'String'>
    readonly createdAt: FieldRef<"Candidate", 'DateTime'>
    readonly updatedAt: FieldRef<"Candidate", 'DateTime'>
    readonly firstName: FieldRef<"Candidate", 'String'>
    readonly lastName: FieldRef<"Candidate", 'String'>
    readonly email: FieldRef<"Candidate", 'String'>
    readonly cellPhone: FieldRef<"Candidate", 'String'>
    readonly nationality: FieldRef<"Candidate", 'String'>
    readonly currentLocation: FieldRef<"Candidate", 'String'>
    readonly dateOfBirth: FieldRef<"Candidate", 'DateTime'>
    readonly gender: FieldRef<"Candidate", 'String'>
    readonly maritalStatus: FieldRef<"Candidate", 'String'>
    readonly currentPosition: FieldRef<"Candidate", 'String'>
    readonly experience: FieldRef<"Candidate", 'Int'>
    readonly education: FieldRef<"Candidate", 'String'>
    readonly technicalSkills: FieldRef<"Candidate", 'String'>
    readonly languageProficiency: FieldRef<"Candidate", 'String'>
    readonly certifications: FieldRef<"Candidate", 'String'>
    readonly culturalBackground: FieldRef<"Candidate", 'String'>
    readonly workStylePreference: FieldRef<"Candidate", 'String'>
    readonly communicationStyle: FieldRef<"Candidate", 'String'>
    readonly adaptabilityScore: FieldRef<"Candidate", 'Float'>
    readonly teamworkOrientation: FieldRef<"Candidate", 'String'>
    readonly leadershipStyle: FieldRef<"Candidate", 'String'>
    readonly conflictResolution: FieldRef<"Candidate", 'String'>
    readonly timeManagement: FieldRef<"Candidate", 'String'>
    readonly waHarmonyAlignment: FieldRef<"Candidate", 'Float'>
    readonly kaizenMindset: FieldRef<"Candidate", 'Float'>
    readonly omotenashiService: FieldRef<"Candidate", 'Float'>
    readonly bushidoDedication: FieldRef<"Candidate", 'Float'>
    readonly nemawashiConsensus: FieldRef<"Candidate", 'Float'>
    readonly candidateStatus: FieldRef<"Candidate", 'CandidateStatus'>
    readonly availabilityDate: FieldRef<"Candidate", 'DateTime'>
    readonly salaryExpectation: FieldRef<"Candidate", 'Int'>
    readonly preferredLocation: FieldRef<"Candidate", 'String'>
    readonly visaStatus: FieldRef<"Candidate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findUniqueOrThrow
   */
  export type CandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findFirstOrThrow
   */
  export type CandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidates to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate create
   */
  export type CandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate.
     */
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }

  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate createManyAndReturn
   */
  export type CandidateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate update
   */
  export type CandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate.
     */
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
  }

  /**
   * Candidate updateManyAndReturn
   */
  export type CandidateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
  }

  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     */
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     */
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }

  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter which Candidate to delete.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidates to delete
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to delete.
     */
    limit?: number
  }

  /**
   * Candidate.applications
   */
  export type Candidate$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Candidate.culturalAssessments
   */
  export type Candidate$culturalAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    where?: CulturalAssessmentWhereInput
    orderBy?: CulturalAssessmentOrderByWithRelationInput | CulturalAssessmentOrderByWithRelationInput[]
    cursor?: CulturalAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CulturalAssessmentScalarFieldEnum | CulturalAssessmentScalarFieldEnum[]
  }

  /**
   * Candidate.psychologicalAssessments
   */
  export type Candidate$psychologicalAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    where?: PsychologicalAssessmentWhereInput
    orderBy?: PsychologicalAssessmentOrderByWithRelationInput | PsychologicalAssessmentOrderByWithRelationInput[]
    cursor?: PsychologicalAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PsychologicalAssessmentScalarFieldEnum | PsychologicalAssessmentScalarFieldEnum[]
  }

  /**
   * Candidate.languageAssessments
   */
  export type Candidate$languageAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    where?: LanguageAssessmentWhereInput
    orderBy?: LanguageAssessmentOrderByWithRelationInput | LanguageAssessmentOrderByWithRelationInput[]
    cursor?: LanguageAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageAssessmentScalarFieldEnum | LanguageAssessmentScalarFieldEnum[]
  }

  /**
   * Candidate.professionalAssessments
   */
  export type Candidate$professionalAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    where?: ProfessionalAssessmentWhereInput
    orderBy?: ProfessionalAssessmentOrderByWithRelationInput | ProfessionalAssessmentOrderByWithRelationInput[]
    cursor?: ProfessionalAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalAssessmentScalarFieldEnum | ProfessionalAssessmentScalarFieldEnum[]
  }

  /**
   * Candidate.interviewSessions
   */
  export type Candidate$interviewSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    where?: InterviewSessionWhereInput
    orderBy?: InterviewSessionOrderByWithRelationInput | InterviewSessionOrderByWithRelationInput[]
    cursor?: InterviewSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewSessionScalarFieldEnum | InterviewSessionScalarFieldEnum[]
  }

  /**
   * Candidate.onboardingRecords
   */
  export type Candidate$onboardingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    where?: OnboardingRecordWhereInput
    orderBy?: OnboardingRecordOrderByWithRelationInput | OnboardingRecordOrderByWithRelationInput[]
    cursor?: OnboardingRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OnboardingRecordScalarFieldEnum | OnboardingRecordScalarFieldEnum[]
  }

  /**
   * Candidate.performanceReviews
   */
  export type Candidate$performanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    where?: PerformanceReviewWhereInput
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    cursor?: PerformanceReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * Candidate.statusHistory
   */
  export type Candidate$statusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    where?: CandidateStatusHistoryWhereInput
    orderBy?: CandidateStatusHistoryOrderByWithRelationInput | CandidateStatusHistoryOrderByWithRelationInput[]
    cursor?: CandidateStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateStatusHistoryScalarFieldEnum | CandidateStatusHistoryScalarFieldEnum[]
  }

  /**
   * Candidate without action
   */
  export type CandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    waHarmonyImportance: number | null
    kaizenImplementation: number | null
    omotenashiStandards: number | null
    consensusDecisionMaking: number | null
    revenue: number | null
    foundedYear: number | null
    employeeCount: number | null
  }

  export type CompanySumAggregateOutputType = {
    waHarmonyImportance: number | null
    kaizenImplementation: number | null
    omotenashiStandards: number | null
    consensusDecisionMaking: number | null
    revenue: bigint | null
    foundedYear: number | null
    employeeCount: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyName: string | null
    industry: string | null
    companySize: string | null
    headquarters: string | null
    website: string | null
    description: string | null
    corporateCulture: string | null
    workEnvironment: string | null
    managementStyle: string | null
    communicationStyle: string | null
    diversityPolicy: string | null
    waHarmonyImportance: number | null
    kaizenImplementation: number | null
    omotenashiStandards: number | null
    hierarchyStructure: string | null
    consensusDecisionMaking: number | null
    revenue: bigint | null
    foundedYear: number | null
    employeeCount: number | null
    businessModel: string | null
    competitiveAdvantage: string | null
    preferredCandidateProfile: string | null
    culturalRequirements: string | null
    languageRequirements: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    companyName: string | null
    industry: string | null
    companySize: string | null
    headquarters: string | null
    website: string | null
    description: string | null
    corporateCulture: string | null
    workEnvironment: string | null
    managementStyle: string | null
    communicationStyle: string | null
    diversityPolicy: string | null
    waHarmonyImportance: number | null
    kaizenImplementation: number | null
    omotenashiStandards: number | null
    hierarchyStructure: string | null
    consensusDecisionMaking: number | null
    revenue: bigint | null
    foundedYear: number | null
    employeeCount: number | null
    businessModel: string | null
    competitiveAdvantage: string | null
    preferredCandidateProfile: string | null
    culturalRequirements: string | null
    languageRequirements: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    companyName: number
    industry: number
    companySize: number
    headquarters: number
    website: number
    description: number
    corporateCulture: number
    workEnvironment: number
    managementStyle: number
    communicationStyle: number
    diversityPolicy: number
    waHarmonyImportance: number
    kaizenImplementation: number
    omotenashiStandards: number
    hierarchyStructure: number
    consensusDecisionMaking: number
    revenue: number
    foundedYear: number
    employeeCount: number
    businessModel: number
    competitiveAdvantage: number
    preferredCandidateProfile: number
    culturalRequirements: number
    languageRequirements: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    waHarmonyImportance?: true
    kaizenImplementation?: true
    omotenashiStandards?: true
    consensusDecisionMaking?: true
    revenue?: true
    foundedYear?: true
    employeeCount?: true
  }

  export type CompanySumAggregateInputType = {
    waHarmonyImportance?: true
    kaizenImplementation?: true
    omotenashiStandards?: true
    consensusDecisionMaking?: true
    revenue?: true
    foundedYear?: true
    employeeCount?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    companyName?: true
    industry?: true
    companySize?: true
    headquarters?: true
    website?: true
    description?: true
    corporateCulture?: true
    workEnvironment?: true
    managementStyle?: true
    communicationStyle?: true
    diversityPolicy?: true
    waHarmonyImportance?: true
    kaizenImplementation?: true
    omotenashiStandards?: true
    hierarchyStructure?: true
    consensusDecisionMaking?: true
    revenue?: true
    foundedYear?: true
    employeeCount?: true
    businessModel?: true
    competitiveAdvantage?: true
    preferredCandidateProfile?: true
    culturalRequirements?: true
    languageRequirements?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    companyName?: true
    industry?: true
    companySize?: true
    headquarters?: true
    website?: true
    description?: true
    corporateCulture?: true
    workEnvironment?: true
    managementStyle?: true
    communicationStyle?: true
    diversityPolicy?: true
    waHarmonyImportance?: true
    kaizenImplementation?: true
    omotenashiStandards?: true
    hierarchyStructure?: true
    consensusDecisionMaking?: true
    revenue?: true
    foundedYear?: true
    employeeCount?: true
    businessModel?: true
    competitiveAdvantage?: true
    preferredCandidateProfile?: true
    culturalRequirements?: true
    languageRequirements?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    companyName?: true
    industry?: true
    companySize?: true
    headquarters?: true
    website?: true
    description?: true
    corporateCulture?: true
    workEnvironment?: true
    managementStyle?: true
    communicationStyle?: true
    diversityPolicy?: true
    waHarmonyImportance?: true
    kaizenImplementation?: true
    omotenashiStandards?: true
    hierarchyStructure?: true
    consensusDecisionMaking?: true
    revenue?: true
    foundedYear?: true
    employeeCount?: true
    businessModel?: true
    competitiveAdvantage?: true
    preferredCandidateProfile?: true
    culturalRequirements?: true
    languageRequirements?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website: string | null
    description: string | null
    corporateCulture: string | null
    workEnvironment: string | null
    managementStyle: string | null
    communicationStyle: string | null
    diversityPolicy: string | null
    waHarmonyImportance: number | null
    kaizenImplementation: number | null
    omotenashiStandards: number | null
    hierarchyStructure: string | null
    consensusDecisionMaking: number | null
    revenue: bigint | null
    foundedYear: number | null
    employeeCount: number | null
    businessModel: string | null
    competitiveAdvantage: string | null
    preferredCandidateProfile: string | null
    culturalRequirements: string | null
    languageRequirements: string | null
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    headquarters?: boolean
    website?: boolean
    description?: boolean
    corporateCulture?: boolean
    workEnvironment?: boolean
    managementStyle?: boolean
    communicationStyle?: boolean
    diversityPolicy?: boolean
    waHarmonyImportance?: boolean
    kaizenImplementation?: boolean
    omotenashiStandards?: boolean
    hierarchyStructure?: boolean
    consensusDecisionMaking?: boolean
    revenue?: boolean
    foundedYear?: boolean
    employeeCount?: boolean
    businessModel?: boolean
    competitiveAdvantage?: boolean
    preferredCandidateProfile?: boolean
    culturalRequirements?: boolean
    languageRequirements?: boolean
    jobPostings?: boolean | Company$jobPostingsArgs<ExtArgs>
    applications?: boolean | Company$applicationsArgs<ExtArgs>
    onboardingRecords?: boolean | Company$onboardingRecordsArgs<ExtArgs>
    performanceReviews?: boolean | Company$performanceReviewsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    headquarters?: boolean
    website?: boolean
    description?: boolean
    corporateCulture?: boolean
    workEnvironment?: boolean
    managementStyle?: boolean
    communicationStyle?: boolean
    diversityPolicy?: boolean
    waHarmonyImportance?: boolean
    kaizenImplementation?: boolean
    omotenashiStandards?: boolean
    hierarchyStructure?: boolean
    consensusDecisionMaking?: boolean
    revenue?: boolean
    foundedYear?: boolean
    employeeCount?: boolean
    businessModel?: boolean
    competitiveAdvantage?: boolean
    preferredCandidateProfile?: boolean
    culturalRequirements?: boolean
    languageRequirements?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    headquarters?: boolean
    website?: boolean
    description?: boolean
    corporateCulture?: boolean
    workEnvironment?: boolean
    managementStyle?: boolean
    communicationStyle?: boolean
    diversityPolicy?: boolean
    waHarmonyImportance?: boolean
    kaizenImplementation?: boolean
    omotenashiStandards?: boolean
    hierarchyStructure?: boolean
    consensusDecisionMaking?: boolean
    revenue?: boolean
    foundedYear?: boolean
    employeeCount?: boolean
    businessModel?: boolean
    competitiveAdvantage?: boolean
    preferredCandidateProfile?: boolean
    culturalRequirements?: boolean
    languageRequirements?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    headquarters?: boolean
    website?: boolean
    description?: boolean
    corporateCulture?: boolean
    workEnvironment?: boolean
    managementStyle?: boolean
    communicationStyle?: boolean
    diversityPolicy?: boolean
    waHarmonyImportance?: boolean
    kaizenImplementation?: boolean
    omotenashiStandards?: boolean
    hierarchyStructure?: boolean
    consensusDecisionMaking?: boolean
    revenue?: boolean
    foundedYear?: boolean
    employeeCount?: boolean
    businessModel?: boolean
    competitiveAdvantage?: boolean
    preferredCandidateProfile?: boolean
    culturalRequirements?: boolean
    languageRequirements?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "companyName" | "industry" | "companySize" | "headquarters" | "website" | "description" | "corporateCulture" | "workEnvironment" | "managementStyle" | "communicationStyle" | "diversityPolicy" | "waHarmonyImportance" | "kaizenImplementation" | "omotenashiStandards" | "hierarchyStructure" | "consensusDecisionMaking" | "revenue" | "foundedYear" | "employeeCount" | "businessModel" | "competitiveAdvantage" | "preferredCandidateProfile" | "culturalRequirements" | "languageRequirements", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobPostings?: boolean | Company$jobPostingsArgs<ExtArgs>
    applications?: boolean | Company$applicationsArgs<ExtArgs>
    onboardingRecords?: boolean | Company$onboardingRecordsArgs<ExtArgs>
    performanceReviews?: boolean | Company$performanceReviewsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      jobPostings: Prisma.$JobPostingPayload<ExtArgs>[]
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      onboardingRecords: Prisma.$OnboardingRecordPayload<ExtArgs>[]
      performanceReviews: Prisma.$PerformanceReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      companyName: string
      industry: string
      companySize: string
      headquarters: string
      website: string | null
      description: string | null
      corporateCulture: string | null
      workEnvironment: string | null
      managementStyle: string | null
      communicationStyle: string | null
      diversityPolicy: string | null
      waHarmonyImportance: number | null
      kaizenImplementation: number | null
      omotenashiStandards: number | null
      hierarchyStructure: string | null
      consensusDecisionMaking: number | null
      revenue: bigint | null
      foundedYear: number | null
      employeeCount: number | null
      businessModel: string | null
      competitiveAdvantage: string | null
      preferredCandidateProfile: string | null
      culturalRequirements: string | null
      languageRequirements: string | null
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobPostings<T extends Company$jobPostingsArgs<ExtArgs> = {}>(args?: Subset<T, Company$jobPostingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    applications<T extends Company$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Company$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    onboardingRecords<T extends Company$onboardingRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Company$onboardingRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceReviews<T extends Company$performanceReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Company$performanceReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly companyName: FieldRef<"Company", 'String'>
    readonly industry: FieldRef<"Company", 'String'>
    readonly companySize: FieldRef<"Company", 'String'>
    readonly headquarters: FieldRef<"Company", 'String'>
    readonly website: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly corporateCulture: FieldRef<"Company", 'String'>
    readonly workEnvironment: FieldRef<"Company", 'String'>
    readonly managementStyle: FieldRef<"Company", 'String'>
    readonly communicationStyle: FieldRef<"Company", 'String'>
    readonly diversityPolicy: FieldRef<"Company", 'String'>
    readonly waHarmonyImportance: FieldRef<"Company", 'Float'>
    readonly kaizenImplementation: FieldRef<"Company", 'Float'>
    readonly omotenashiStandards: FieldRef<"Company", 'Float'>
    readonly hierarchyStructure: FieldRef<"Company", 'String'>
    readonly consensusDecisionMaking: FieldRef<"Company", 'Float'>
    readonly revenue: FieldRef<"Company", 'BigInt'>
    readonly foundedYear: FieldRef<"Company", 'Int'>
    readonly employeeCount: FieldRef<"Company", 'Int'>
    readonly businessModel: FieldRef<"Company", 'String'>
    readonly competitiveAdvantage: FieldRef<"Company", 'String'>
    readonly preferredCandidateProfile: FieldRef<"Company", 'String'>
    readonly culturalRequirements: FieldRef<"Company", 'String'>
    readonly languageRequirements: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.jobPostings
   */
  export type Company$jobPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    where?: JobPostingWhereInput
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    cursor?: JobPostingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * Company.applications
   */
  export type Company$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Company.onboardingRecords
   */
  export type Company$onboardingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    where?: OnboardingRecordWhereInput
    orderBy?: OnboardingRecordOrderByWithRelationInput | OnboardingRecordOrderByWithRelationInput[]
    cursor?: OnboardingRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OnboardingRecordScalarFieldEnum | OnboardingRecordScalarFieldEnum[]
  }

  /**
   * Company.performanceReviews
   */
  export type Company$performanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    where?: PerformanceReviewWhereInput
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    cursor?: PerformanceReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model JobPosting
   */

  export type AggregateJobPosting = {
    _count: JobPostingCountAggregateOutputType | null
    _avg: JobPostingAvgAggregateOutputType | null
    _sum: JobPostingSumAggregateOutputType | null
    _min: JobPostingMinAggregateOutputType | null
    _max: JobPostingMaxAggregateOutputType | null
  }

  export type JobPostingAvgAggregateOutputType = {
    salaryRangeMinimum: number | null
    salaryRangeMaximum: number | null
    waHarmonyRequired: number | null
    kaizenParticipation: number | null
    omotenashiExpectation: number | null
    hierarchyRespect: number | null
    consensusBuilding: number | null
  }

  export type JobPostingSumAggregateOutputType = {
    salaryRangeMinimum: number | null
    salaryRangeMaximum: number | null
    waHarmonyRequired: number | null
    kaizenParticipation: number | null
    omotenashiExpectation: number | null
    hierarchyRespect: number | null
    consensusBuilding: number | null
  }

  export type JobPostingMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    jobTitle: string | null
    department: string | null
    location: string | null
    employmentType: string | null
    experienceLevel: string | null
    jobDescription: string | null
    responsibilities: string | null
    requirements: string | null
    qualifications: string | null
    technicalSkills: string | null
    salaryRangeMinimum: number | null
    salaryRangeMaximum: number | null
    benefits: string | null
    bonusStructure: string | null
    culturalFitRequirements: string | null
    languageRequirements: string | null
    communicationStyle: string | null
    teamworkExpectation: string | null
    leadershipExpectation: string | null
    waHarmonyRequired: number | null
    kaizenParticipation: number | null
    omotenashiExpectation: number | null
    hierarchyRespect: number | null
    consensusBuilding: number | null
    postingStatus: $Enums.PostingStatus | null
    applicationDeadline: Date | null
    startDate: Date | null
    urgencyLevel: string | null
    companyId: string | null
  }

  export type JobPostingMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    jobTitle: string | null
    department: string | null
    location: string | null
    employmentType: string | null
    experienceLevel: string | null
    jobDescription: string | null
    responsibilities: string | null
    requirements: string | null
    qualifications: string | null
    technicalSkills: string | null
    salaryRangeMinimum: number | null
    salaryRangeMaximum: number | null
    benefits: string | null
    bonusStructure: string | null
    culturalFitRequirements: string | null
    languageRequirements: string | null
    communicationStyle: string | null
    teamworkExpectation: string | null
    leadershipExpectation: string | null
    waHarmonyRequired: number | null
    kaizenParticipation: number | null
    omotenashiExpectation: number | null
    hierarchyRespect: number | null
    consensusBuilding: number | null
    postingStatus: $Enums.PostingStatus | null
    applicationDeadline: Date | null
    startDate: Date | null
    urgencyLevel: string | null
    companyId: string | null
  }

  export type JobPostingCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    jobTitle: number
    department: number
    location: number
    employmentType: number
    experienceLevel: number
    jobDescription: number
    responsibilities: number
    requirements: number
    qualifications: number
    technicalSkills: number
    salaryRangeMinimum: number
    salaryRangeMaximum: number
    benefits: number
    bonusStructure: number
    culturalFitRequirements: number
    languageRequirements: number
    communicationStyle: number
    teamworkExpectation: number
    leadershipExpectation: number
    waHarmonyRequired: number
    kaizenParticipation: number
    omotenashiExpectation: number
    hierarchyRespect: number
    consensusBuilding: number
    postingStatus: number
    applicationDeadline: number
    startDate: number
    urgencyLevel: number
    companyId: number
    _all: number
  }


  export type JobPostingAvgAggregateInputType = {
    salaryRangeMinimum?: true
    salaryRangeMaximum?: true
    waHarmonyRequired?: true
    kaizenParticipation?: true
    omotenashiExpectation?: true
    hierarchyRespect?: true
    consensusBuilding?: true
  }

  export type JobPostingSumAggregateInputType = {
    salaryRangeMinimum?: true
    salaryRangeMaximum?: true
    waHarmonyRequired?: true
    kaizenParticipation?: true
    omotenashiExpectation?: true
    hierarchyRespect?: true
    consensusBuilding?: true
  }

  export type JobPostingMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    jobTitle?: true
    department?: true
    location?: true
    employmentType?: true
    experienceLevel?: true
    jobDescription?: true
    responsibilities?: true
    requirements?: true
    qualifications?: true
    technicalSkills?: true
    salaryRangeMinimum?: true
    salaryRangeMaximum?: true
    benefits?: true
    bonusStructure?: true
    culturalFitRequirements?: true
    languageRequirements?: true
    communicationStyle?: true
    teamworkExpectation?: true
    leadershipExpectation?: true
    waHarmonyRequired?: true
    kaizenParticipation?: true
    omotenashiExpectation?: true
    hierarchyRespect?: true
    consensusBuilding?: true
    postingStatus?: true
    applicationDeadline?: true
    startDate?: true
    urgencyLevel?: true
    companyId?: true
  }

  export type JobPostingMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    jobTitle?: true
    department?: true
    location?: true
    employmentType?: true
    experienceLevel?: true
    jobDescription?: true
    responsibilities?: true
    requirements?: true
    qualifications?: true
    technicalSkills?: true
    salaryRangeMinimum?: true
    salaryRangeMaximum?: true
    benefits?: true
    bonusStructure?: true
    culturalFitRequirements?: true
    languageRequirements?: true
    communicationStyle?: true
    teamworkExpectation?: true
    leadershipExpectation?: true
    waHarmonyRequired?: true
    kaizenParticipation?: true
    omotenashiExpectation?: true
    hierarchyRespect?: true
    consensusBuilding?: true
    postingStatus?: true
    applicationDeadline?: true
    startDate?: true
    urgencyLevel?: true
    companyId?: true
  }

  export type JobPostingCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    jobTitle?: true
    department?: true
    location?: true
    employmentType?: true
    experienceLevel?: true
    jobDescription?: true
    responsibilities?: true
    requirements?: true
    qualifications?: true
    technicalSkills?: true
    salaryRangeMinimum?: true
    salaryRangeMaximum?: true
    benefits?: true
    bonusStructure?: true
    culturalFitRequirements?: true
    languageRequirements?: true
    communicationStyle?: true
    teamworkExpectation?: true
    leadershipExpectation?: true
    waHarmonyRequired?: true
    kaizenParticipation?: true
    omotenashiExpectation?: true
    hierarchyRespect?: true
    consensusBuilding?: true
    postingStatus?: true
    applicationDeadline?: true
    startDate?: true
    urgencyLevel?: true
    companyId?: true
    _all?: true
  }

  export type JobPostingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPosting to aggregate.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobPostings
    **/
    _count?: true | JobPostingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobPostingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobPostingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobPostingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobPostingMaxAggregateInputType
  }

  export type GetJobPostingAggregateType<T extends JobPostingAggregateArgs> = {
        [P in keyof T & keyof AggregateJobPosting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobPosting[P]>
      : GetScalarType<T[P], AggregateJobPosting[P]>
  }




  export type JobPostingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobPostingWhereInput
    orderBy?: JobPostingOrderByWithAggregationInput | JobPostingOrderByWithAggregationInput[]
    by: JobPostingScalarFieldEnum[] | JobPostingScalarFieldEnum
    having?: JobPostingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobPostingCountAggregateInputType | true
    _avg?: JobPostingAvgAggregateInputType
    _sum?: JobPostingSumAggregateInputType
    _min?: JobPostingMinAggregateInputType
    _max?: JobPostingMaxAggregateInputType
  }

  export type JobPostingGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    jobTitle: string
    department: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities: string | null
    requirements: string | null
    qualifications: string | null
    technicalSkills: string | null
    salaryRangeMinimum: number | null
    salaryRangeMaximum: number | null
    benefits: string | null
    bonusStructure: string | null
    culturalFitRequirements: string | null
    languageRequirements: string | null
    communicationStyle: string | null
    teamworkExpectation: string | null
    leadershipExpectation: string | null
    waHarmonyRequired: number | null
    kaizenParticipation: number | null
    omotenashiExpectation: number | null
    hierarchyRespect: number | null
    consensusBuilding: number | null
    postingStatus: $Enums.PostingStatus
    applicationDeadline: Date | null
    startDate: Date | null
    urgencyLevel: string | null
    companyId: string
    _count: JobPostingCountAggregateOutputType | null
    _avg: JobPostingAvgAggregateOutputType | null
    _sum: JobPostingSumAggregateOutputType | null
    _min: JobPostingMinAggregateOutputType | null
    _max: JobPostingMaxAggregateOutputType | null
  }

  type GetJobPostingGroupByPayload<T extends JobPostingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobPostingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobPostingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobPostingGroupByOutputType[P]>
            : GetScalarType<T[P], JobPostingGroupByOutputType[P]>
        }
      >
    >


  export type JobPostingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobTitle?: boolean
    department?: boolean
    location?: boolean
    employmentType?: boolean
    experienceLevel?: boolean
    jobDescription?: boolean
    responsibilities?: boolean
    requirements?: boolean
    qualifications?: boolean
    technicalSkills?: boolean
    salaryRangeMinimum?: boolean
    salaryRangeMaximum?: boolean
    benefits?: boolean
    bonusStructure?: boolean
    culturalFitRequirements?: boolean
    languageRequirements?: boolean
    communicationStyle?: boolean
    teamworkExpectation?: boolean
    leadershipExpectation?: boolean
    waHarmonyRequired?: boolean
    kaizenParticipation?: boolean
    omotenashiExpectation?: boolean
    hierarchyRespect?: boolean
    consensusBuilding?: boolean
    postingStatus?: boolean
    applicationDeadline?: boolean
    startDate?: boolean
    urgencyLevel?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    applications?: boolean | JobPosting$applicationsArgs<ExtArgs>
    _count?: boolean | JobPostingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobTitle?: boolean
    department?: boolean
    location?: boolean
    employmentType?: boolean
    experienceLevel?: boolean
    jobDescription?: boolean
    responsibilities?: boolean
    requirements?: boolean
    qualifications?: boolean
    technicalSkills?: boolean
    salaryRangeMinimum?: boolean
    salaryRangeMaximum?: boolean
    benefits?: boolean
    bonusStructure?: boolean
    culturalFitRequirements?: boolean
    languageRequirements?: boolean
    communicationStyle?: boolean
    teamworkExpectation?: boolean
    leadershipExpectation?: boolean
    waHarmonyRequired?: boolean
    kaizenParticipation?: boolean
    omotenashiExpectation?: boolean
    hierarchyRespect?: boolean
    consensusBuilding?: boolean
    postingStatus?: boolean
    applicationDeadline?: boolean
    startDate?: boolean
    urgencyLevel?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobTitle?: boolean
    department?: boolean
    location?: boolean
    employmentType?: boolean
    experienceLevel?: boolean
    jobDescription?: boolean
    responsibilities?: boolean
    requirements?: boolean
    qualifications?: boolean
    technicalSkills?: boolean
    salaryRangeMinimum?: boolean
    salaryRangeMaximum?: boolean
    benefits?: boolean
    bonusStructure?: boolean
    culturalFitRequirements?: boolean
    languageRequirements?: boolean
    communicationStyle?: boolean
    teamworkExpectation?: boolean
    leadershipExpectation?: boolean
    waHarmonyRequired?: boolean
    kaizenParticipation?: boolean
    omotenashiExpectation?: boolean
    hierarchyRespect?: boolean
    consensusBuilding?: boolean
    postingStatus?: boolean
    applicationDeadline?: boolean
    startDate?: boolean
    urgencyLevel?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobPosting"]>

  export type JobPostingSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobTitle?: boolean
    department?: boolean
    location?: boolean
    employmentType?: boolean
    experienceLevel?: boolean
    jobDescription?: boolean
    responsibilities?: boolean
    requirements?: boolean
    qualifications?: boolean
    technicalSkills?: boolean
    salaryRangeMinimum?: boolean
    salaryRangeMaximum?: boolean
    benefits?: boolean
    bonusStructure?: boolean
    culturalFitRequirements?: boolean
    languageRequirements?: boolean
    communicationStyle?: boolean
    teamworkExpectation?: boolean
    leadershipExpectation?: boolean
    waHarmonyRequired?: boolean
    kaizenParticipation?: boolean
    omotenashiExpectation?: boolean
    hierarchyRespect?: boolean
    consensusBuilding?: boolean
    postingStatus?: boolean
    applicationDeadline?: boolean
    startDate?: boolean
    urgencyLevel?: boolean
    companyId?: boolean
  }

  export type JobPostingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "jobTitle" | "department" | "location" | "employmentType" | "experienceLevel" | "jobDescription" | "responsibilities" | "requirements" | "qualifications" | "technicalSkills" | "salaryRangeMinimum" | "salaryRangeMaximum" | "benefits" | "bonusStructure" | "culturalFitRequirements" | "languageRequirements" | "communicationStyle" | "teamworkExpectation" | "leadershipExpectation" | "waHarmonyRequired" | "kaizenParticipation" | "omotenashiExpectation" | "hierarchyRespect" | "consensusBuilding" | "postingStatus" | "applicationDeadline" | "startDate" | "urgencyLevel" | "companyId", ExtArgs["result"]["jobPosting"]>
  export type JobPostingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    applications?: boolean | JobPosting$applicationsArgs<ExtArgs>
    _count?: boolean | JobPostingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobPostingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type JobPostingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $JobPostingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobPosting"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      jobTitle: string
      department: string | null
      location: string
      employmentType: string
      experienceLevel: string
      jobDescription: string
      responsibilities: string | null
      requirements: string | null
      qualifications: string | null
      technicalSkills: string | null
      salaryRangeMinimum: number | null
      salaryRangeMaximum: number | null
      benefits: string | null
      bonusStructure: string | null
      culturalFitRequirements: string | null
      languageRequirements: string | null
      communicationStyle: string | null
      teamworkExpectation: string | null
      leadershipExpectation: string | null
      waHarmonyRequired: number | null
      kaizenParticipation: number | null
      omotenashiExpectation: number | null
      hierarchyRespect: number | null
      consensusBuilding: number | null
      postingStatus: $Enums.PostingStatus
      applicationDeadline: Date | null
      startDate: Date | null
      urgencyLevel: string | null
      companyId: string
    }, ExtArgs["result"]["jobPosting"]>
    composites: {}
  }

  type JobPostingGetPayload<S extends boolean | null | undefined | JobPostingDefaultArgs> = $Result.GetResult<Prisma.$JobPostingPayload, S>

  type JobPostingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobPostingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobPostingCountAggregateInputType | true
    }

  export interface JobPostingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobPosting'], meta: { name: 'JobPosting' } }
    /**
     * Find zero or one JobPosting that matches the filter.
     * @param {JobPostingFindUniqueArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobPostingFindUniqueArgs>(args: SelectSubset<T, JobPostingFindUniqueArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobPosting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobPostingFindUniqueOrThrowArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobPostingFindUniqueOrThrowArgs>(args: SelectSubset<T, JobPostingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobPosting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindFirstArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobPostingFindFirstArgs>(args?: SelectSubset<T, JobPostingFindFirstArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobPosting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindFirstOrThrowArgs} args - Arguments to find a JobPosting
     * @example
     * // Get one JobPosting
     * const jobPosting = await prisma.jobPosting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobPostingFindFirstOrThrowArgs>(args?: SelectSubset<T, JobPostingFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobPostings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobPostings
     * const jobPostings = await prisma.jobPosting.findMany()
     * 
     * // Get first 10 JobPostings
     * const jobPostings = await prisma.jobPosting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobPostingFindManyArgs>(args?: SelectSubset<T, JobPostingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobPosting.
     * @param {JobPostingCreateArgs} args - Arguments to create a JobPosting.
     * @example
     * // Create one JobPosting
     * const JobPosting = await prisma.jobPosting.create({
     *   data: {
     *     // ... data to create a JobPosting
     *   }
     * })
     * 
     */
    create<T extends JobPostingCreateArgs>(args: SelectSubset<T, JobPostingCreateArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobPostings.
     * @param {JobPostingCreateManyArgs} args - Arguments to create many JobPostings.
     * @example
     * // Create many JobPostings
     * const jobPosting = await prisma.jobPosting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobPostingCreateManyArgs>(args?: SelectSubset<T, JobPostingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobPostings and returns the data saved in the database.
     * @param {JobPostingCreateManyAndReturnArgs} args - Arguments to create many JobPostings.
     * @example
     * // Create many JobPostings
     * const jobPosting = await prisma.jobPosting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobPostings and only return the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobPostingCreateManyAndReturnArgs>(args?: SelectSubset<T, JobPostingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobPosting.
     * @param {JobPostingDeleteArgs} args - Arguments to delete one JobPosting.
     * @example
     * // Delete one JobPosting
     * const JobPosting = await prisma.jobPosting.delete({
     *   where: {
     *     // ... filter to delete one JobPosting
     *   }
     * })
     * 
     */
    delete<T extends JobPostingDeleteArgs>(args: SelectSubset<T, JobPostingDeleteArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobPosting.
     * @param {JobPostingUpdateArgs} args - Arguments to update one JobPosting.
     * @example
     * // Update one JobPosting
     * const jobPosting = await prisma.jobPosting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobPostingUpdateArgs>(args: SelectSubset<T, JobPostingUpdateArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobPostings.
     * @param {JobPostingDeleteManyArgs} args - Arguments to filter JobPostings to delete.
     * @example
     * // Delete a few JobPostings
     * const { count } = await prisma.jobPosting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobPostingDeleteManyArgs>(args?: SelectSubset<T, JobPostingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobPostings
     * const jobPosting = await prisma.jobPosting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobPostingUpdateManyArgs>(args: SelectSubset<T, JobPostingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobPostings and returns the data updated in the database.
     * @param {JobPostingUpdateManyAndReturnArgs} args - Arguments to update many JobPostings.
     * @example
     * // Update many JobPostings
     * const jobPosting = await prisma.jobPosting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobPostings and only return the `id`
     * const jobPostingWithIdOnly = await prisma.jobPosting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobPostingUpdateManyAndReturnArgs>(args: SelectSubset<T, JobPostingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobPosting.
     * @param {JobPostingUpsertArgs} args - Arguments to update or create a JobPosting.
     * @example
     * // Update or create a JobPosting
     * const jobPosting = await prisma.jobPosting.upsert({
     *   create: {
     *     // ... data to create a JobPosting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobPosting we want to update
     *   }
     * })
     */
    upsert<T extends JobPostingUpsertArgs>(args: SelectSubset<T, JobPostingUpsertArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobPostings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingCountArgs} args - Arguments to filter JobPostings to count.
     * @example
     * // Count the number of JobPostings
     * const count = await prisma.jobPosting.count({
     *   where: {
     *     // ... the filter for the JobPostings we want to count
     *   }
     * })
    **/
    count<T extends JobPostingCountArgs>(
      args?: Subset<T, JobPostingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobPostingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobPosting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobPostingAggregateArgs>(args: Subset<T, JobPostingAggregateArgs>): Prisma.PrismaPromise<GetJobPostingAggregateType<T>>

    /**
     * Group by JobPosting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobPostingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobPostingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobPostingGroupByArgs['orderBy'] }
        : { orderBy?: JobPostingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobPostingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobPostingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobPosting model
   */
  readonly fields: JobPostingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobPosting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobPostingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    applications<T extends JobPosting$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, JobPosting$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobPosting model
   */
  interface JobPostingFieldRefs {
    readonly id: FieldRef<"JobPosting", 'String'>
    readonly createdAt: FieldRef<"JobPosting", 'DateTime'>
    readonly updatedAt: FieldRef<"JobPosting", 'DateTime'>
    readonly jobTitle: FieldRef<"JobPosting", 'String'>
    readonly department: FieldRef<"JobPosting", 'String'>
    readonly location: FieldRef<"JobPosting", 'String'>
    readonly employmentType: FieldRef<"JobPosting", 'String'>
    readonly experienceLevel: FieldRef<"JobPosting", 'String'>
    readonly jobDescription: FieldRef<"JobPosting", 'String'>
    readonly responsibilities: FieldRef<"JobPosting", 'String'>
    readonly requirements: FieldRef<"JobPosting", 'String'>
    readonly qualifications: FieldRef<"JobPosting", 'String'>
    readonly technicalSkills: FieldRef<"JobPosting", 'String'>
    readonly salaryRangeMinimum: FieldRef<"JobPosting", 'Int'>
    readonly salaryRangeMaximum: FieldRef<"JobPosting", 'Int'>
    readonly benefits: FieldRef<"JobPosting", 'String'>
    readonly bonusStructure: FieldRef<"JobPosting", 'String'>
    readonly culturalFitRequirements: FieldRef<"JobPosting", 'String'>
    readonly languageRequirements: FieldRef<"JobPosting", 'String'>
    readonly communicationStyle: FieldRef<"JobPosting", 'String'>
    readonly teamworkExpectation: FieldRef<"JobPosting", 'String'>
    readonly leadershipExpectation: FieldRef<"JobPosting", 'String'>
    readonly waHarmonyRequired: FieldRef<"JobPosting", 'Float'>
    readonly kaizenParticipation: FieldRef<"JobPosting", 'Float'>
    readonly omotenashiExpectation: FieldRef<"JobPosting", 'Float'>
    readonly hierarchyRespect: FieldRef<"JobPosting", 'Float'>
    readonly consensusBuilding: FieldRef<"JobPosting", 'Float'>
    readonly postingStatus: FieldRef<"JobPosting", 'PostingStatus'>
    readonly applicationDeadline: FieldRef<"JobPosting", 'DateTime'>
    readonly startDate: FieldRef<"JobPosting", 'DateTime'>
    readonly urgencyLevel: FieldRef<"JobPosting", 'String'>
    readonly companyId: FieldRef<"JobPosting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JobPosting findUnique
   */
  export type JobPostingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting findUniqueOrThrow
   */
  export type JobPostingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting findFirst
   */
  export type JobPostingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting findFirstOrThrow
   */
  export type JobPostingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPosting to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobPostings.
     */
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting findMany
   */
  export type JobPostingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter, which JobPostings to fetch.
     */
    where?: JobPostingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobPostings to fetch.
     */
    orderBy?: JobPostingOrderByWithRelationInput | JobPostingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobPostings.
     */
    cursor?: JobPostingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobPostings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobPostings.
     */
    skip?: number
    distinct?: JobPostingScalarFieldEnum | JobPostingScalarFieldEnum[]
  }

  /**
   * JobPosting create
   */
  export type JobPostingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The data needed to create a JobPosting.
     */
    data: XOR<JobPostingCreateInput, JobPostingUncheckedCreateInput>
  }

  /**
   * JobPosting createMany
   */
  export type JobPostingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobPostings.
     */
    data: JobPostingCreateManyInput | JobPostingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobPosting createManyAndReturn
   */
  export type JobPostingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * The data used to create many JobPostings.
     */
    data: JobPostingCreateManyInput | JobPostingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobPosting update
   */
  export type JobPostingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The data needed to update a JobPosting.
     */
    data: XOR<JobPostingUpdateInput, JobPostingUncheckedUpdateInput>
    /**
     * Choose, which JobPosting to update.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting updateMany
   */
  export type JobPostingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobPostings.
     */
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings to update
     */
    where?: JobPostingWhereInput
    /**
     * Limit how many JobPostings to update.
     */
    limit?: number
  }

  /**
   * JobPosting updateManyAndReturn
   */
  export type JobPostingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * The data used to update JobPostings.
     */
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyInput>
    /**
     * Filter which JobPostings to update
     */
    where?: JobPostingWhereInput
    /**
     * Limit how many JobPostings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobPosting upsert
   */
  export type JobPostingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * The filter to search for the JobPosting to update in case it exists.
     */
    where: JobPostingWhereUniqueInput
    /**
     * In case the JobPosting found by the `where` argument doesn't exist, create a new JobPosting with this data.
     */
    create: XOR<JobPostingCreateInput, JobPostingUncheckedCreateInput>
    /**
     * In case the JobPosting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobPostingUpdateInput, JobPostingUncheckedUpdateInput>
  }

  /**
   * JobPosting delete
   */
  export type JobPostingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
    /**
     * Filter which JobPosting to delete.
     */
    where: JobPostingWhereUniqueInput
  }

  /**
   * JobPosting deleteMany
   */
  export type JobPostingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobPostings to delete
     */
    where?: JobPostingWhereInput
    /**
     * Limit how many JobPostings to delete.
     */
    limit?: number
  }

  /**
   * JobPosting.applications
   */
  export type JobPosting$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * JobPosting without action
   */
  export type JobPostingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobPosting
     */
    select?: JobPostingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobPosting
     */
    omit?: JobPostingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobPostingInclude<ExtArgs> | null
  }


  /**
   * Model CulturalAssessment
   */

  export type AggregateCulturalAssessment = {
    _count: CulturalAssessmentCountAggregateOutputType | null
    _avg: CulturalAssessmentAvgAggregateOutputType | null
    _sum: CulturalAssessmentSumAggregateOutputType | null
    _min: CulturalAssessmentMinAggregateOutputType | null
    _max: CulturalAssessmentMaxAggregateOutputType | null
  }

  export type CulturalAssessmentAvgAggregateOutputType = {
    overallScore: number | null
    culturalFitPrediction: number | null
    integrationTimelineDays: number | null
    waHarmonyScore: number | null
    kaizenImprovementScore: number | null
    omotenashiServiceScore: number | null
    bushidoDedicationScore: number | null
    nemawashiConsensusScore: number | null
    honneTatemaeBalance: number | null
    indirectCommunication: number | null
    nonverbalAwareness: number | null
    silenceComfort: number | null
    contextualUnderstanding: number | null
    senpaiKohaiRespect: number | null
    authorityRecognition: number | null
    formalityAdherence: number | null
    statusAwareness: number | null
    hierarchyNavigation: number | null
    groupHarmonyPriority: number | null
    collectiveDecisionMaking: number | null
    consensusBuilding: number | null
    teamLoyalty: number | null
    groupAccountability: number | null
    dedicationToWork: number | null
    qualityFocus: number | null
    continuousImprovement: number | null
    attentionToDetail: number | null
    processAdherence: number | null
    punctualityImportance: number | null
    timeRespect: number | null
    scheduleAdherence: number | null
    planningOrientation: number | null
    deadlineCommitment: number | null
    relationshipInvestment: number | null
    trustBuilding: number | null
    longTermOrientation: number | null
    loyaltyDemonstration: number | null
    networkMaintenance: number | null
    changeAcceptance: number | null
    flexibilityInApproach: number | null
    learningOrientation: number | null
    culturalAdaptability: number | null
    resilienceInChallenges: number | null
    professionalEtiquette: number | null
    businessCardProtocol: number | null
    meetingParticipation: number | null
    presentationSkills: number | null
    clientServiceOrientation: number | null
    creativeThinking: number | null
    innovationBalance: number | null
    riskAssessment: number | null
  }

  export type CulturalAssessmentSumAggregateOutputType = {
    overallScore: number | null
    culturalFitPrediction: number | null
    integrationTimelineDays: number | null
    waHarmonyScore: number | null
    kaizenImprovementScore: number | null
    omotenashiServiceScore: number | null
    bushidoDedicationScore: number | null
    nemawashiConsensusScore: number | null
    honneTatemaeBalance: number | null
    indirectCommunication: number | null
    nonverbalAwareness: number | null
    silenceComfort: number | null
    contextualUnderstanding: number | null
    senpaiKohaiRespect: number | null
    authorityRecognition: number | null
    formalityAdherence: number | null
    statusAwareness: number | null
    hierarchyNavigation: number | null
    groupHarmonyPriority: number | null
    collectiveDecisionMaking: number | null
    consensusBuilding: number | null
    teamLoyalty: number | null
    groupAccountability: number | null
    dedicationToWork: number | null
    qualityFocus: number | null
    continuousImprovement: number | null
    attentionToDetail: number | null
    processAdherence: number | null
    punctualityImportance: number | null
    timeRespect: number | null
    scheduleAdherence: number | null
    planningOrientation: number | null
    deadlineCommitment: number | null
    relationshipInvestment: number | null
    trustBuilding: number | null
    longTermOrientation: number | null
    loyaltyDemonstration: number | null
    networkMaintenance: number | null
    changeAcceptance: number | null
    flexibilityInApproach: number | null
    learningOrientation: number | null
    culturalAdaptability: number | null
    resilienceInChallenges: number | null
    professionalEtiquette: number | null
    businessCardProtocol: number | null
    meetingParticipation: number | null
    presentationSkills: number | null
    clientServiceOrientation: number | null
    creativeThinking: number | null
    innovationBalance: number | null
    riskAssessment: number | null
  }

  export type CulturalAssessmentMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    overallScore: number | null
    culturalFitPrediction: number | null
    integrationTimelineDays: number | null
    waHarmonyScore: number | null
    kaizenImprovementScore: number | null
    omotenashiServiceScore: number | null
    bushidoDedicationScore: number | null
    nemawashiConsensusScore: number | null
    honneTatemaeBalance: number | null
    indirectCommunication: number | null
    nonverbalAwareness: number | null
    silenceComfort: number | null
    contextualUnderstanding: number | null
    senpaiKohaiRespect: number | null
    authorityRecognition: number | null
    formalityAdherence: number | null
    statusAwareness: number | null
    hierarchyNavigation: number | null
    groupHarmonyPriority: number | null
    collectiveDecisionMaking: number | null
    consensusBuilding: number | null
    teamLoyalty: number | null
    groupAccountability: number | null
    dedicationToWork: number | null
    qualityFocus: number | null
    continuousImprovement: number | null
    attentionToDetail: number | null
    processAdherence: number | null
    punctualityImportance: number | null
    timeRespect: number | null
    scheduleAdherence: number | null
    planningOrientation: number | null
    deadlineCommitment: number | null
    relationshipInvestment: number | null
    trustBuilding: number | null
    longTermOrientation: number | null
    loyaltyDemonstration: number | null
    networkMaintenance: number | null
    changeAcceptance: number | null
    flexibilityInApproach: number | null
    learningOrientation: number | null
    culturalAdaptability: number | null
    resilienceInChallenges: number | null
    professionalEtiquette: number | null
    businessCardProtocol: number | null
    meetingParticipation: number | null
    presentationSkills: number | null
    clientServiceOrientation: number | null
    creativeThinking: number | null
    innovationBalance: number | null
    riskAssessment: number | null
    dimensionScores: string | null
    culturalTrainingNeeded: string | null
    assessmentNotes: string | null
  }

  export type CulturalAssessmentMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    overallScore: number | null
    culturalFitPrediction: number | null
    integrationTimelineDays: number | null
    waHarmonyScore: number | null
    kaizenImprovementScore: number | null
    omotenashiServiceScore: number | null
    bushidoDedicationScore: number | null
    nemawashiConsensusScore: number | null
    honneTatemaeBalance: number | null
    indirectCommunication: number | null
    nonverbalAwareness: number | null
    silenceComfort: number | null
    contextualUnderstanding: number | null
    senpaiKohaiRespect: number | null
    authorityRecognition: number | null
    formalityAdherence: number | null
    statusAwareness: number | null
    hierarchyNavigation: number | null
    groupHarmonyPriority: number | null
    collectiveDecisionMaking: number | null
    consensusBuilding: number | null
    teamLoyalty: number | null
    groupAccountability: number | null
    dedicationToWork: number | null
    qualityFocus: number | null
    continuousImprovement: number | null
    attentionToDetail: number | null
    processAdherence: number | null
    punctualityImportance: number | null
    timeRespect: number | null
    scheduleAdherence: number | null
    planningOrientation: number | null
    deadlineCommitment: number | null
    relationshipInvestment: number | null
    trustBuilding: number | null
    longTermOrientation: number | null
    loyaltyDemonstration: number | null
    networkMaintenance: number | null
    changeAcceptance: number | null
    flexibilityInApproach: number | null
    learningOrientation: number | null
    culturalAdaptability: number | null
    resilienceInChallenges: number | null
    professionalEtiquette: number | null
    businessCardProtocol: number | null
    meetingParticipation: number | null
    presentationSkills: number | null
    clientServiceOrientation: number | null
    creativeThinking: number | null
    innovationBalance: number | null
    riskAssessment: number | null
    dimensionScores: string | null
    culturalTrainingNeeded: string | null
    assessmentNotes: string | null
  }

  export type CulturalAssessmentCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    assessmentType: number
    assessmentDate: number
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore: number
    kaizenImprovementScore: number
    omotenashiServiceScore: number
    bushidoDedicationScore: number
    nemawashiConsensusScore: number
    honneTatemaeBalance: number
    indirectCommunication: number
    nonverbalAwareness: number
    silenceComfort: number
    contextualUnderstanding: number
    senpaiKohaiRespect: number
    authorityRecognition: number
    formalityAdherence: number
    statusAwareness: number
    hierarchyNavigation: number
    groupHarmonyPriority: number
    collectiveDecisionMaking: number
    consensusBuilding: number
    teamLoyalty: number
    groupAccountability: number
    dedicationToWork: number
    qualityFocus: number
    continuousImprovement: number
    attentionToDetail: number
    processAdherence: number
    punctualityImportance: number
    timeRespect: number
    scheduleAdherence: number
    planningOrientation: number
    deadlineCommitment: number
    relationshipInvestment: number
    trustBuilding: number
    longTermOrientation: number
    loyaltyDemonstration: number
    networkMaintenance: number
    changeAcceptance: number
    flexibilityInApproach: number
    learningOrientation: number
    culturalAdaptability: number
    resilienceInChallenges: number
    professionalEtiquette: number
    businessCardProtocol: number
    meetingParticipation: number
    presentationSkills: number
    clientServiceOrientation: number
    creativeThinking: number
    innovationBalance: number
    riskAssessment: number
    dimensionScores: number
    culturalTrainingNeeded: number
    assessmentNotes: number
    _all: number
  }


  export type CulturalAssessmentAvgAggregateInputType = {
    overallScore?: true
    culturalFitPrediction?: true
    integrationTimelineDays?: true
    waHarmonyScore?: true
    kaizenImprovementScore?: true
    omotenashiServiceScore?: true
    bushidoDedicationScore?: true
    nemawashiConsensusScore?: true
    honneTatemaeBalance?: true
    indirectCommunication?: true
    nonverbalAwareness?: true
    silenceComfort?: true
    contextualUnderstanding?: true
    senpaiKohaiRespect?: true
    authorityRecognition?: true
    formalityAdherence?: true
    statusAwareness?: true
    hierarchyNavigation?: true
    groupHarmonyPriority?: true
    collectiveDecisionMaking?: true
    consensusBuilding?: true
    teamLoyalty?: true
    groupAccountability?: true
    dedicationToWork?: true
    qualityFocus?: true
    continuousImprovement?: true
    attentionToDetail?: true
    processAdherence?: true
    punctualityImportance?: true
    timeRespect?: true
    scheduleAdherence?: true
    planningOrientation?: true
    deadlineCommitment?: true
    relationshipInvestment?: true
    trustBuilding?: true
    longTermOrientation?: true
    loyaltyDemonstration?: true
    networkMaintenance?: true
    changeAcceptance?: true
    flexibilityInApproach?: true
    learningOrientation?: true
    culturalAdaptability?: true
    resilienceInChallenges?: true
    professionalEtiquette?: true
    businessCardProtocol?: true
    meetingParticipation?: true
    presentationSkills?: true
    clientServiceOrientation?: true
    creativeThinking?: true
    innovationBalance?: true
    riskAssessment?: true
  }

  export type CulturalAssessmentSumAggregateInputType = {
    overallScore?: true
    culturalFitPrediction?: true
    integrationTimelineDays?: true
    waHarmonyScore?: true
    kaizenImprovementScore?: true
    omotenashiServiceScore?: true
    bushidoDedicationScore?: true
    nemawashiConsensusScore?: true
    honneTatemaeBalance?: true
    indirectCommunication?: true
    nonverbalAwareness?: true
    silenceComfort?: true
    contextualUnderstanding?: true
    senpaiKohaiRespect?: true
    authorityRecognition?: true
    formalityAdherence?: true
    statusAwareness?: true
    hierarchyNavigation?: true
    groupHarmonyPriority?: true
    collectiveDecisionMaking?: true
    consensusBuilding?: true
    teamLoyalty?: true
    groupAccountability?: true
    dedicationToWork?: true
    qualityFocus?: true
    continuousImprovement?: true
    attentionToDetail?: true
    processAdherence?: true
    punctualityImportance?: true
    timeRespect?: true
    scheduleAdherence?: true
    planningOrientation?: true
    deadlineCommitment?: true
    relationshipInvestment?: true
    trustBuilding?: true
    longTermOrientation?: true
    loyaltyDemonstration?: true
    networkMaintenance?: true
    changeAcceptance?: true
    flexibilityInApproach?: true
    learningOrientation?: true
    culturalAdaptability?: true
    resilienceInChallenges?: true
    professionalEtiquette?: true
    businessCardProtocol?: true
    meetingParticipation?: true
    presentationSkills?: true
    clientServiceOrientation?: true
    creativeThinking?: true
    innovationBalance?: true
    riskAssessment?: true
  }

  export type CulturalAssessmentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    overallScore?: true
    culturalFitPrediction?: true
    integrationTimelineDays?: true
    waHarmonyScore?: true
    kaizenImprovementScore?: true
    omotenashiServiceScore?: true
    bushidoDedicationScore?: true
    nemawashiConsensusScore?: true
    honneTatemaeBalance?: true
    indirectCommunication?: true
    nonverbalAwareness?: true
    silenceComfort?: true
    contextualUnderstanding?: true
    senpaiKohaiRespect?: true
    authorityRecognition?: true
    formalityAdherence?: true
    statusAwareness?: true
    hierarchyNavigation?: true
    groupHarmonyPriority?: true
    collectiveDecisionMaking?: true
    consensusBuilding?: true
    teamLoyalty?: true
    groupAccountability?: true
    dedicationToWork?: true
    qualityFocus?: true
    continuousImprovement?: true
    attentionToDetail?: true
    processAdherence?: true
    punctualityImportance?: true
    timeRespect?: true
    scheduleAdherence?: true
    planningOrientation?: true
    deadlineCommitment?: true
    relationshipInvestment?: true
    trustBuilding?: true
    longTermOrientation?: true
    loyaltyDemonstration?: true
    networkMaintenance?: true
    changeAcceptance?: true
    flexibilityInApproach?: true
    learningOrientation?: true
    culturalAdaptability?: true
    resilienceInChallenges?: true
    professionalEtiquette?: true
    businessCardProtocol?: true
    meetingParticipation?: true
    presentationSkills?: true
    clientServiceOrientation?: true
    creativeThinking?: true
    innovationBalance?: true
    riskAssessment?: true
    dimensionScores?: true
    culturalTrainingNeeded?: true
    assessmentNotes?: true
  }

  export type CulturalAssessmentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    overallScore?: true
    culturalFitPrediction?: true
    integrationTimelineDays?: true
    waHarmonyScore?: true
    kaizenImprovementScore?: true
    omotenashiServiceScore?: true
    bushidoDedicationScore?: true
    nemawashiConsensusScore?: true
    honneTatemaeBalance?: true
    indirectCommunication?: true
    nonverbalAwareness?: true
    silenceComfort?: true
    contextualUnderstanding?: true
    senpaiKohaiRespect?: true
    authorityRecognition?: true
    formalityAdherence?: true
    statusAwareness?: true
    hierarchyNavigation?: true
    groupHarmonyPriority?: true
    collectiveDecisionMaking?: true
    consensusBuilding?: true
    teamLoyalty?: true
    groupAccountability?: true
    dedicationToWork?: true
    qualityFocus?: true
    continuousImprovement?: true
    attentionToDetail?: true
    processAdherence?: true
    punctualityImportance?: true
    timeRespect?: true
    scheduleAdherence?: true
    planningOrientation?: true
    deadlineCommitment?: true
    relationshipInvestment?: true
    trustBuilding?: true
    longTermOrientation?: true
    loyaltyDemonstration?: true
    networkMaintenance?: true
    changeAcceptance?: true
    flexibilityInApproach?: true
    learningOrientation?: true
    culturalAdaptability?: true
    resilienceInChallenges?: true
    professionalEtiquette?: true
    businessCardProtocol?: true
    meetingParticipation?: true
    presentationSkills?: true
    clientServiceOrientation?: true
    creativeThinking?: true
    innovationBalance?: true
    riskAssessment?: true
    dimensionScores?: true
    culturalTrainingNeeded?: true
    assessmentNotes?: true
  }

  export type CulturalAssessmentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    overallScore?: true
    culturalFitPrediction?: true
    integrationTimelineDays?: true
    waHarmonyScore?: true
    kaizenImprovementScore?: true
    omotenashiServiceScore?: true
    bushidoDedicationScore?: true
    nemawashiConsensusScore?: true
    honneTatemaeBalance?: true
    indirectCommunication?: true
    nonverbalAwareness?: true
    silenceComfort?: true
    contextualUnderstanding?: true
    senpaiKohaiRespect?: true
    authorityRecognition?: true
    formalityAdherence?: true
    statusAwareness?: true
    hierarchyNavigation?: true
    groupHarmonyPriority?: true
    collectiveDecisionMaking?: true
    consensusBuilding?: true
    teamLoyalty?: true
    groupAccountability?: true
    dedicationToWork?: true
    qualityFocus?: true
    continuousImprovement?: true
    attentionToDetail?: true
    processAdherence?: true
    punctualityImportance?: true
    timeRespect?: true
    scheduleAdherence?: true
    planningOrientation?: true
    deadlineCommitment?: true
    relationshipInvestment?: true
    trustBuilding?: true
    longTermOrientation?: true
    loyaltyDemonstration?: true
    networkMaintenance?: true
    changeAcceptance?: true
    flexibilityInApproach?: true
    learningOrientation?: true
    culturalAdaptability?: true
    resilienceInChallenges?: true
    professionalEtiquette?: true
    businessCardProtocol?: true
    meetingParticipation?: true
    presentationSkills?: true
    clientServiceOrientation?: true
    creativeThinking?: true
    innovationBalance?: true
    riskAssessment?: true
    dimensionScores?: true
    culturalTrainingNeeded?: true
    assessmentNotes?: true
    _all?: true
  }

  export type CulturalAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CulturalAssessment to aggregate.
     */
    where?: CulturalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalAssessments to fetch.
     */
    orderBy?: CulturalAssessmentOrderByWithRelationInput | CulturalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CulturalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CulturalAssessments
    **/
    _count?: true | CulturalAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CulturalAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CulturalAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CulturalAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CulturalAssessmentMaxAggregateInputType
  }

  export type GetCulturalAssessmentAggregateType<T extends CulturalAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateCulturalAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCulturalAssessment[P]>
      : GetScalarType<T[P], AggregateCulturalAssessment[P]>
  }




  export type CulturalAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CulturalAssessmentWhereInput
    orderBy?: CulturalAssessmentOrderByWithAggregationInput | CulturalAssessmentOrderByWithAggregationInput[]
    by: CulturalAssessmentScalarFieldEnum[] | CulturalAssessmentScalarFieldEnum
    having?: CulturalAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CulturalAssessmentCountAggregateInputType | true
    _avg?: CulturalAssessmentAvgAggregateInputType
    _sum?: CulturalAssessmentSumAggregateInputType
    _min?: CulturalAssessmentMinAggregateInputType
    _max?: CulturalAssessmentMaxAggregateInputType
  }

  export type CulturalAssessmentGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    assessmentType: string
    assessmentDate: Date
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore: number
    kaizenImprovementScore: number
    omotenashiServiceScore: number
    bushidoDedicationScore: number
    nemawashiConsensusScore: number
    honneTatemaeBalance: number
    indirectCommunication: number
    nonverbalAwareness: number
    silenceComfort: number
    contextualUnderstanding: number
    senpaiKohaiRespect: number
    authorityRecognition: number
    formalityAdherence: number
    statusAwareness: number
    hierarchyNavigation: number
    groupHarmonyPriority: number
    collectiveDecisionMaking: number
    consensusBuilding: number
    teamLoyalty: number
    groupAccountability: number
    dedicationToWork: number
    qualityFocus: number
    continuousImprovement: number
    attentionToDetail: number
    processAdherence: number
    punctualityImportance: number
    timeRespect: number
    scheduleAdherence: number
    planningOrientation: number
    deadlineCommitment: number
    relationshipInvestment: number
    trustBuilding: number
    longTermOrientation: number
    loyaltyDemonstration: number
    networkMaintenance: number
    changeAcceptance: number
    flexibilityInApproach: number
    learningOrientation: number
    culturalAdaptability: number
    resilienceInChallenges: number
    professionalEtiquette: number
    businessCardProtocol: number
    meetingParticipation: number
    presentationSkills: number
    clientServiceOrientation: number
    creativeThinking: number
    innovationBalance: number
    riskAssessment: number
    dimensionScores: string | null
    culturalTrainingNeeded: string | null
    assessmentNotes: string | null
    _count: CulturalAssessmentCountAggregateOutputType | null
    _avg: CulturalAssessmentAvgAggregateOutputType | null
    _sum: CulturalAssessmentSumAggregateOutputType | null
    _min: CulturalAssessmentMinAggregateOutputType | null
    _max: CulturalAssessmentMaxAggregateOutputType | null
  }

  type GetCulturalAssessmentGroupByPayload<T extends CulturalAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CulturalAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CulturalAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CulturalAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], CulturalAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type CulturalAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    overallScore?: boolean
    culturalFitPrediction?: boolean
    integrationTimelineDays?: boolean
    waHarmonyScore?: boolean
    kaizenImprovementScore?: boolean
    omotenashiServiceScore?: boolean
    bushidoDedicationScore?: boolean
    nemawashiConsensusScore?: boolean
    honneTatemaeBalance?: boolean
    indirectCommunication?: boolean
    nonverbalAwareness?: boolean
    silenceComfort?: boolean
    contextualUnderstanding?: boolean
    senpaiKohaiRespect?: boolean
    authorityRecognition?: boolean
    formalityAdherence?: boolean
    statusAwareness?: boolean
    hierarchyNavigation?: boolean
    groupHarmonyPriority?: boolean
    collectiveDecisionMaking?: boolean
    consensusBuilding?: boolean
    teamLoyalty?: boolean
    groupAccountability?: boolean
    dedicationToWork?: boolean
    qualityFocus?: boolean
    continuousImprovement?: boolean
    attentionToDetail?: boolean
    processAdherence?: boolean
    punctualityImportance?: boolean
    timeRespect?: boolean
    scheduleAdherence?: boolean
    planningOrientation?: boolean
    deadlineCommitment?: boolean
    relationshipInvestment?: boolean
    trustBuilding?: boolean
    longTermOrientation?: boolean
    loyaltyDemonstration?: boolean
    networkMaintenance?: boolean
    changeAcceptance?: boolean
    flexibilityInApproach?: boolean
    learningOrientation?: boolean
    culturalAdaptability?: boolean
    resilienceInChallenges?: boolean
    professionalEtiquette?: boolean
    businessCardProtocol?: boolean
    meetingParticipation?: boolean
    presentationSkills?: boolean
    clientServiceOrientation?: boolean
    creativeThinking?: boolean
    innovationBalance?: boolean
    riskAssessment?: boolean
    dimensionScores?: boolean
    culturalTrainingNeeded?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culturalAssessment"]>

  export type CulturalAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    overallScore?: boolean
    culturalFitPrediction?: boolean
    integrationTimelineDays?: boolean
    waHarmonyScore?: boolean
    kaizenImprovementScore?: boolean
    omotenashiServiceScore?: boolean
    bushidoDedicationScore?: boolean
    nemawashiConsensusScore?: boolean
    honneTatemaeBalance?: boolean
    indirectCommunication?: boolean
    nonverbalAwareness?: boolean
    silenceComfort?: boolean
    contextualUnderstanding?: boolean
    senpaiKohaiRespect?: boolean
    authorityRecognition?: boolean
    formalityAdherence?: boolean
    statusAwareness?: boolean
    hierarchyNavigation?: boolean
    groupHarmonyPriority?: boolean
    collectiveDecisionMaking?: boolean
    consensusBuilding?: boolean
    teamLoyalty?: boolean
    groupAccountability?: boolean
    dedicationToWork?: boolean
    qualityFocus?: boolean
    continuousImprovement?: boolean
    attentionToDetail?: boolean
    processAdherence?: boolean
    punctualityImportance?: boolean
    timeRespect?: boolean
    scheduleAdherence?: boolean
    planningOrientation?: boolean
    deadlineCommitment?: boolean
    relationshipInvestment?: boolean
    trustBuilding?: boolean
    longTermOrientation?: boolean
    loyaltyDemonstration?: boolean
    networkMaintenance?: boolean
    changeAcceptance?: boolean
    flexibilityInApproach?: boolean
    learningOrientation?: boolean
    culturalAdaptability?: boolean
    resilienceInChallenges?: boolean
    professionalEtiquette?: boolean
    businessCardProtocol?: boolean
    meetingParticipation?: boolean
    presentationSkills?: boolean
    clientServiceOrientation?: boolean
    creativeThinking?: boolean
    innovationBalance?: boolean
    riskAssessment?: boolean
    dimensionScores?: boolean
    culturalTrainingNeeded?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culturalAssessment"]>

  export type CulturalAssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    overallScore?: boolean
    culturalFitPrediction?: boolean
    integrationTimelineDays?: boolean
    waHarmonyScore?: boolean
    kaizenImprovementScore?: boolean
    omotenashiServiceScore?: boolean
    bushidoDedicationScore?: boolean
    nemawashiConsensusScore?: boolean
    honneTatemaeBalance?: boolean
    indirectCommunication?: boolean
    nonverbalAwareness?: boolean
    silenceComfort?: boolean
    contextualUnderstanding?: boolean
    senpaiKohaiRespect?: boolean
    authorityRecognition?: boolean
    formalityAdherence?: boolean
    statusAwareness?: boolean
    hierarchyNavigation?: boolean
    groupHarmonyPriority?: boolean
    collectiveDecisionMaking?: boolean
    consensusBuilding?: boolean
    teamLoyalty?: boolean
    groupAccountability?: boolean
    dedicationToWork?: boolean
    qualityFocus?: boolean
    continuousImprovement?: boolean
    attentionToDetail?: boolean
    processAdherence?: boolean
    punctualityImportance?: boolean
    timeRespect?: boolean
    scheduleAdherence?: boolean
    planningOrientation?: boolean
    deadlineCommitment?: boolean
    relationshipInvestment?: boolean
    trustBuilding?: boolean
    longTermOrientation?: boolean
    loyaltyDemonstration?: boolean
    networkMaintenance?: boolean
    changeAcceptance?: boolean
    flexibilityInApproach?: boolean
    learningOrientation?: boolean
    culturalAdaptability?: boolean
    resilienceInChallenges?: boolean
    professionalEtiquette?: boolean
    businessCardProtocol?: boolean
    meetingParticipation?: boolean
    presentationSkills?: boolean
    clientServiceOrientation?: boolean
    creativeThinking?: boolean
    innovationBalance?: boolean
    riskAssessment?: boolean
    dimensionScores?: boolean
    culturalTrainingNeeded?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["culturalAssessment"]>

  export type CulturalAssessmentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    overallScore?: boolean
    culturalFitPrediction?: boolean
    integrationTimelineDays?: boolean
    waHarmonyScore?: boolean
    kaizenImprovementScore?: boolean
    omotenashiServiceScore?: boolean
    bushidoDedicationScore?: boolean
    nemawashiConsensusScore?: boolean
    honneTatemaeBalance?: boolean
    indirectCommunication?: boolean
    nonverbalAwareness?: boolean
    silenceComfort?: boolean
    contextualUnderstanding?: boolean
    senpaiKohaiRespect?: boolean
    authorityRecognition?: boolean
    formalityAdherence?: boolean
    statusAwareness?: boolean
    hierarchyNavigation?: boolean
    groupHarmonyPriority?: boolean
    collectiveDecisionMaking?: boolean
    consensusBuilding?: boolean
    teamLoyalty?: boolean
    groupAccountability?: boolean
    dedicationToWork?: boolean
    qualityFocus?: boolean
    continuousImprovement?: boolean
    attentionToDetail?: boolean
    processAdherence?: boolean
    punctualityImportance?: boolean
    timeRespect?: boolean
    scheduleAdherence?: boolean
    planningOrientation?: boolean
    deadlineCommitment?: boolean
    relationshipInvestment?: boolean
    trustBuilding?: boolean
    longTermOrientation?: boolean
    loyaltyDemonstration?: boolean
    networkMaintenance?: boolean
    changeAcceptance?: boolean
    flexibilityInApproach?: boolean
    learningOrientation?: boolean
    culturalAdaptability?: boolean
    resilienceInChallenges?: boolean
    professionalEtiquette?: boolean
    businessCardProtocol?: boolean
    meetingParticipation?: boolean
    presentationSkills?: boolean
    clientServiceOrientation?: boolean
    creativeThinking?: boolean
    innovationBalance?: boolean
    riskAssessment?: boolean
    dimensionScores?: boolean
    culturalTrainingNeeded?: boolean
    assessmentNotes?: boolean
  }

  export type CulturalAssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "assessmentType" | "assessmentDate" | "overallScore" | "culturalFitPrediction" | "integrationTimelineDays" | "waHarmonyScore" | "kaizenImprovementScore" | "omotenashiServiceScore" | "bushidoDedicationScore" | "nemawashiConsensusScore" | "honneTatemaeBalance" | "indirectCommunication" | "nonverbalAwareness" | "silenceComfort" | "contextualUnderstanding" | "senpaiKohaiRespect" | "authorityRecognition" | "formalityAdherence" | "statusAwareness" | "hierarchyNavigation" | "groupHarmonyPriority" | "collectiveDecisionMaking" | "consensusBuilding" | "teamLoyalty" | "groupAccountability" | "dedicationToWork" | "qualityFocus" | "continuousImprovement" | "attentionToDetail" | "processAdherence" | "punctualityImportance" | "timeRespect" | "scheduleAdherence" | "planningOrientation" | "deadlineCommitment" | "relationshipInvestment" | "trustBuilding" | "longTermOrientation" | "loyaltyDemonstration" | "networkMaintenance" | "changeAcceptance" | "flexibilityInApproach" | "learningOrientation" | "culturalAdaptability" | "resilienceInChallenges" | "professionalEtiquette" | "businessCardProtocol" | "meetingParticipation" | "presentationSkills" | "clientServiceOrientation" | "creativeThinking" | "innovationBalance" | "riskAssessment" | "dimensionScores" | "culturalTrainingNeeded" | "assessmentNotes", ExtArgs["result"]["culturalAssessment"]>
  export type CulturalAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CulturalAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CulturalAssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $CulturalAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CulturalAssessment"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      assessmentType: string
      assessmentDate: Date
      overallScore: number
      culturalFitPrediction: number
      integrationTimelineDays: number
      waHarmonyScore: number
      kaizenImprovementScore: number
      omotenashiServiceScore: number
      bushidoDedicationScore: number
      nemawashiConsensusScore: number
      honneTatemaeBalance: number
      indirectCommunication: number
      nonverbalAwareness: number
      silenceComfort: number
      contextualUnderstanding: number
      senpaiKohaiRespect: number
      authorityRecognition: number
      formalityAdherence: number
      statusAwareness: number
      hierarchyNavigation: number
      groupHarmonyPriority: number
      collectiveDecisionMaking: number
      consensusBuilding: number
      teamLoyalty: number
      groupAccountability: number
      dedicationToWork: number
      qualityFocus: number
      continuousImprovement: number
      attentionToDetail: number
      processAdherence: number
      punctualityImportance: number
      timeRespect: number
      scheduleAdherence: number
      planningOrientation: number
      deadlineCommitment: number
      relationshipInvestment: number
      trustBuilding: number
      longTermOrientation: number
      loyaltyDemonstration: number
      networkMaintenance: number
      changeAcceptance: number
      flexibilityInApproach: number
      learningOrientation: number
      culturalAdaptability: number
      resilienceInChallenges: number
      professionalEtiquette: number
      businessCardProtocol: number
      meetingParticipation: number
      presentationSkills: number
      clientServiceOrientation: number
      creativeThinking: number
      innovationBalance: number
      riskAssessment: number
      dimensionScores: string | null
      culturalTrainingNeeded: string | null
      assessmentNotes: string | null
    }, ExtArgs["result"]["culturalAssessment"]>
    composites: {}
  }

  type CulturalAssessmentGetPayload<S extends boolean | null | undefined | CulturalAssessmentDefaultArgs> = $Result.GetResult<Prisma.$CulturalAssessmentPayload, S>

  type CulturalAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CulturalAssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CulturalAssessmentCountAggregateInputType | true
    }

  export interface CulturalAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CulturalAssessment'], meta: { name: 'CulturalAssessment' } }
    /**
     * Find zero or one CulturalAssessment that matches the filter.
     * @param {CulturalAssessmentFindUniqueArgs} args - Arguments to find a CulturalAssessment
     * @example
     * // Get one CulturalAssessment
     * const culturalAssessment = await prisma.culturalAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CulturalAssessmentFindUniqueArgs>(args: SelectSubset<T, CulturalAssessmentFindUniqueArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CulturalAssessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CulturalAssessmentFindUniqueOrThrowArgs} args - Arguments to find a CulturalAssessment
     * @example
     * // Get one CulturalAssessment
     * const culturalAssessment = await prisma.culturalAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CulturalAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, CulturalAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CulturalAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalAssessmentFindFirstArgs} args - Arguments to find a CulturalAssessment
     * @example
     * // Get one CulturalAssessment
     * const culturalAssessment = await prisma.culturalAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CulturalAssessmentFindFirstArgs>(args?: SelectSubset<T, CulturalAssessmentFindFirstArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CulturalAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalAssessmentFindFirstOrThrowArgs} args - Arguments to find a CulturalAssessment
     * @example
     * // Get one CulturalAssessment
     * const culturalAssessment = await prisma.culturalAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CulturalAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, CulturalAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CulturalAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CulturalAssessments
     * const culturalAssessments = await prisma.culturalAssessment.findMany()
     * 
     * // Get first 10 CulturalAssessments
     * const culturalAssessments = await prisma.culturalAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const culturalAssessmentWithIdOnly = await prisma.culturalAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CulturalAssessmentFindManyArgs>(args?: SelectSubset<T, CulturalAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CulturalAssessment.
     * @param {CulturalAssessmentCreateArgs} args - Arguments to create a CulturalAssessment.
     * @example
     * // Create one CulturalAssessment
     * const CulturalAssessment = await prisma.culturalAssessment.create({
     *   data: {
     *     // ... data to create a CulturalAssessment
     *   }
     * })
     * 
     */
    create<T extends CulturalAssessmentCreateArgs>(args: SelectSubset<T, CulturalAssessmentCreateArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CulturalAssessments.
     * @param {CulturalAssessmentCreateManyArgs} args - Arguments to create many CulturalAssessments.
     * @example
     * // Create many CulturalAssessments
     * const culturalAssessment = await prisma.culturalAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CulturalAssessmentCreateManyArgs>(args?: SelectSubset<T, CulturalAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CulturalAssessments and returns the data saved in the database.
     * @param {CulturalAssessmentCreateManyAndReturnArgs} args - Arguments to create many CulturalAssessments.
     * @example
     * // Create many CulturalAssessments
     * const culturalAssessment = await prisma.culturalAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CulturalAssessments and only return the `id`
     * const culturalAssessmentWithIdOnly = await prisma.culturalAssessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CulturalAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, CulturalAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CulturalAssessment.
     * @param {CulturalAssessmentDeleteArgs} args - Arguments to delete one CulturalAssessment.
     * @example
     * // Delete one CulturalAssessment
     * const CulturalAssessment = await prisma.culturalAssessment.delete({
     *   where: {
     *     // ... filter to delete one CulturalAssessment
     *   }
     * })
     * 
     */
    delete<T extends CulturalAssessmentDeleteArgs>(args: SelectSubset<T, CulturalAssessmentDeleteArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CulturalAssessment.
     * @param {CulturalAssessmentUpdateArgs} args - Arguments to update one CulturalAssessment.
     * @example
     * // Update one CulturalAssessment
     * const culturalAssessment = await prisma.culturalAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CulturalAssessmentUpdateArgs>(args: SelectSubset<T, CulturalAssessmentUpdateArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CulturalAssessments.
     * @param {CulturalAssessmentDeleteManyArgs} args - Arguments to filter CulturalAssessments to delete.
     * @example
     * // Delete a few CulturalAssessments
     * const { count } = await prisma.culturalAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CulturalAssessmentDeleteManyArgs>(args?: SelectSubset<T, CulturalAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CulturalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CulturalAssessments
     * const culturalAssessment = await prisma.culturalAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CulturalAssessmentUpdateManyArgs>(args: SelectSubset<T, CulturalAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CulturalAssessments and returns the data updated in the database.
     * @param {CulturalAssessmentUpdateManyAndReturnArgs} args - Arguments to update many CulturalAssessments.
     * @example
     * // Update many CulturalAssessments
     * const culturalAssessment = await prisma.culturalAssessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CulturalAssessments and only return the `id`
     * const culturalAssessmentWithIdOnly = await prisma.culturalAssessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CulturalAssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, CulturalAssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CulturalAssessment.
     * @param {CulturalAssessmentUpsertArgs} args - Arguments to update or create a CulturalAssessment.
     * @example
     * // Update or create a CulturalAssessment
     * const culturalAssessment = await prisma.culturalAssessment.upsert({
     *   create: {
     *     // ... data to create a CulturalAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CulturalAssessment we want to update
     *   }
     * })
     */
    upsert<T extends CulturalAssessmentUpsertArgs>(args: SelectSubset<T, CulturalAssessmentUpsertArgs<ExtArgs>>): Prisma__CulturalAssessmentClient<$Result.GetResult<Prisma.$CulturalAssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CulturalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalAssessmentCountArgs} args - Arguments to filter CulturalAssessments to count.
     * @example
     * // Count the number of CulturalAssessments
     * const count = await prisma.culturalAssessment.count({
     *   where: {
     *     // ... the filter for the CulturalAssessments we want to count
     *   }
     * })
    **/
    count<T extends CulturalAssessmentCountArgs>(
      args?: Subset<T, CulturalAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CulturalAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CulturalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CulturalAssessmentAggregateArgs>(args: Subset<T, CulturalAssessmentAggregateArgs>): Prisma.PrismaPromise<GetCulturalAssessmentAggregateType<T>>

    /**
     * Group by CulturalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CulturalAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CulturalAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CulturalAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: CulturalAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CulturalAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCulturalAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CulturalAssessment model
   */
  readonly fields: CulturalAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CulturalAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CulturalAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CulturalAssessment model
   */
  interface CulturalAssessmentFieldRefs {
    readonly id: FieldRef<"CulturalAssessment", 'String'>
    readonly createdAt: FieldRef<"CulturalAssessment", 'DateTime'>
    readonly updatedAt: FieldRef<"CulturalAssessment", 'DateTime'>
    readonly candidateId: FieldRef<"CulturalAssessment", 'String'>
    readonly assessmentType: FieldRef<"CulturalAssessment", 'String'>
    readonly assessmentDate: FieldRef<"CulturalAssessment", 'DateTime'>
    readonly overallScore: FieldRef<"CulturalAssessment", 'Float'>
    readonly culturalFitPrediction: FieldRef<"CulturalAssessment", 'Float'>
    readonly integrationTimelineDays: FieldRef<"CulturalAssessment", 'Int'>
    readonly waHarmonyScore: FieldRef<"CulturalAssessment", 'Float'>
    readonly kaizenImprovementScore: FieldRef<"CulturalAssessment", 'Float'>
    readonly omotenashiServiceScore: FieldRef<"CulturalAssessment", 'Float'>
    readonly bushidoDedicationScore: FieldRef<"CulturalAssessment", 'Float'>
    readonly nemawashiConsensusScore: FieldRef<"CulturalAssessment", 'Float'>
    readonly honneTatemaeBalance: FieldRef<"CulturalAssessment", 'Float'>
    readonly indirectCommunication: FieldRef<"CulturalAssessment", 'Float'>
    readonly nonverbalAwareness: FieldRef<"CulturalAssessment", 'Float'>
    readonly silenceComfort: FieldRef<"CulturalAssessment", 'Float'>
    readonly contextualUnderstanding: FieldRef<"CulturalAssessment", 'Float'>
    readonly senpaiKohaiRespect: FieldRef<"CulturalAssessment", 'Float'>
    readonly authorityRecognition: FieldRef<"CulturalAssessment", 'Float'>
    readonly formalityAdherence: FieldRef<"CulturalAssessment", 'Float'>
    readonly statusAwareness: FieldRef<"CulturalAssessment", 'Float'>
    readonly hierarchyNavigation: FieldRef<"CulturalAssessment", 'Float'>
    readonly groupHarmonyPriority: FieldRef<"CulturalAssessment", 'Float'>
    readonly collectiveDecisionMaking: FieldRef<"CulturalAssessment", 'Float'>
    readonly consensusBuilding: FieldRef<"CulturalAssessment", 'Float'>
    readonly teamLoyalty: FieldRef<"CulturalAssessment", 'Float'>
    readonly groupAccountability: FieldRef<"CulturalAssessment", 'Float'>
    readonly dedicationToWork: FieldRef<"CulturalAssessment", 'Float'>
    readonly qualityFocus: FieldRef<"CulturalAssessment", 'Float'>
    readonly continuousImprovement: FieldRef<"CulturalAssessment", 'Float'>
    readonly attentionToDetail: FieldRef<"CulturalAssessment", 'Float'>
    readonly processAdherence: FieldRef<"CulturalAssessment", 'Float'>
    readonly punctualityImportance: FieldRef<"CulturalAssessment", 'Float'>
    readonly timeRespect: FieldRef<"CulturalAssessment", 'Float'>
    readonly scheduleAdherence: FieldRef<"CulturalAssessment", 'Float'>
    readonly planningOrientation: FieldRef<"CulturalAssessment", 'Float'>
    readonly deadlineCommitment: FieldRef<"CulturalAssessment", 'Float'>
    readonly relationshipInvestment: FieldRef<"CulturalAssessment", 'Float'>
    readonly trustBuilding: FieldRef<"CulturalAssessment", 'Float'>
    readonly longTermOrientation: FieldRef<"CulturalAssessment", 'Float'>
    readonly loyaltyDemonstration: FieldRef<"CulturalAssessment", 'Float'>
    readonly networkMaintenance: FieldRef<"CulturalAssessment", 'Float'>
    readonly changeAcceptance: FieldRef<"CulturalAssessment", 'Float'>
    readonly flexibilityInApproach: FieldRef<"CulturalAssessment", 'Float'>
    readonly learningOrientation: FieldRef<"CulturalAssessment", 'Float'>
    readonly culturalAdaptability: FieldRef<"CulturalAssessment", 'Float'>
    readonly resilienceInChallenges: FieldRef<"CulturalAssessment", 'Float'>
    readonly professionalEtiquette: FieldRef<"CulturalAssessment", 'Float'>
    readonly businessCardProtocol: FieldRef<"CulturalAssessment", 'Float'>
    readonly meetingParticipation: FieldRef<"CulturalAssessment", 'Float'>
    readonly presentationSkills: FieldRef<"CulturalAssessment", 'Float'>
    readonly clientServiceOrientation: FieldRef<"CulturalAssessment", 'Float'>
    readonly creativeThinking: FieldRef<"CulturalAssessment", 'Float'>
    readonly innovationBalance: FieldRef<"CulturalAssessment", 'Float'>
    readonly riskAssessment: FieldRef<"CulturalAssessment", 'Float'>
    readonly dimensionScores: FieldRef<"CulturalAssessment", 'String'>
    readonly culturalTrainingNeeded: FieldRef<"CulturalAssessment", 'String'>
    readonly assessmentNotes: FieldRef<"CulturalAssessment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CulturalAssessment findUnique
   */
  export type CulturalAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CulturalAssessment to fetch.
     */
    where: CulturalAssessmentWhereUniqueInput
  }

  /**
   * CulturalAssessment findUniqueOrThrow
   */
  export type CulturalAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CulturalAssessment to fetch.
     */
    where: CulturalAssessmentWhereUniqueInput
  }

  /**
   * CulturalAssessment findFirst
   */
  export type CulturalAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CulturalAssessment to fetch.
     */
    where?: CulturalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalAssessments to fetch.
     */
    orderBy?: CulturalAssessmentOrderByWithRelationInput | CulturalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CulturalAssessments.
     */
    cursor?: CulturalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CulturalAssessments.
     */
    distinct?: CulturalAssessmentScalarFieldEnum | CulturalAssessmentScalarFieldEnum[]
  }

  /**
   * CulturalAssessment findFirstOrThrow
   */
  export type CulturalAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CulturalAssessment to fetch.
     */
    where?: CulturalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalAssessments to fetch.
     */
    orderBy?: CulturalAssessmentOrderByWithRelationInput | CulturalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CulturalAssessments.
     */
    cursor?: CulturalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CulturalAssessments.
     */
    distinct?: CulturalAssessmentScalarFieldEnum | CulturalAssessmentScalarFieldEnum[]
  }

  /**
   * CulturalAssessment findMany
   */
  export type CulturalAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CulturalAssessments to fetch.
     */
    where?: CulturalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CulturalAssessments to fetch.
     */
    orderBy?: CulturalAssessmentOrderByWithRelationInput | CulturalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CulturalAssessments.
     */
    cursor?: CulturalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CulturalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CulturalAssessments.
     */
    skip?: number
    distinct?: CulturalAssessmentScalarFieldEnum | CulturalAssessmentScalarFieldEnum[]
  }

  /**
   * CulturalAssessment create
   */
  export type CulturalAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a CulturalAssessment.
     */
    data: XOR<CulturalAssessmentCreateInput, CulturalAssessmentUncheckedCreateInput>
  }

  /**
   * CulturalAssessment createMany
   */
  export type CulturalAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CulturalAssessments.
     */
    data: CulturalAssessmentCreateManyInput | CulturalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CulturalAssessment createManyAndReturn
   */
  export type CulturalAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many CulturalAssessments.
     */
    data: CulturalAssessmentCreateManyInput | CulturalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CulturalAssessment update
   */
  export type CulturalAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a CulturalAssessment.
     */
    data: XOR<CulturalAssessmentUpdateInput, CulturalAssessmentUncheckedUpdateInput>
    /**
     * Choose, which CulturalAssessment to update.
     */
    where: CulturalAssessmentWhereUniqueInput
  }

  /**
   * CulturalAssessment updateMany
   */
  export type CulturalAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CulturalAssessments.
     */
    data: XOR<CulturalAssessmentUpdateManyMutationInput, CulturalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which CulturalAssessments to update
     */
    where?: CulturalAssessmentWhereInput
    /**
     * Limit how many CulturalAssessments to update.
     */
    limit?: number
  }

  /**
   * CulturalAssessment updateManyAndReturn
   */
  export type CulturalAssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * The data used to update CulturalAssessments.
     */
    data: XOR<CulturalAssessmentUpdateManyMutationInput, CulturalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which CulturalAssessments to update
     */
    where?: CulturalAssessmentWhereInput
    /**
     * Limit how many CulturalAssessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CulturalAssessment upsert
   */
  export type CulturalAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the CulturalAssessment to update in case it exists.
     */
    where: CulturalAssessmentWhereUniqueInput
    /**
     * In case the CulturalAssessment found by the `where` argument doesn't exist, create a new CulturalAssessment with this data.
     */
    create: XOR<CulturalAssessmentCreateInput, CulturalAssessmentUncheckedCreateInput>
    /**
     * In case the CulturalAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CulturalAssessmentUpdateInput, CulturalAssessmentUncheckedUpdateInput>
  }

  /**
   * CulturalAssessment delete
   */
  export type CulturalAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
    /**
     * Filter which CulturalAssessment to delete.
     */
    where: CulturalAssessmentWhereUniqueInput
  }

  /**
   * CulturalAssessment deleteMany
   */
  export type CulturalAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CulturalAssessments to delete
     */
    where?: CulturalAssessmentWhereInput
    /**
     * Limit how many CulturalAssessments to delete.
     */
    limit?: number
  }

  /**
   * CulturalAssessment without action
   */
  export type CulturalAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CulturalAssessment
     */
    select?: CulturalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CulturalAssessment
     */
    omit?: CulturalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CulturalAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model PsychologicalAssessment
   */

  export type AggregatePsychologicalAssessment = {
    _count: PsychologicalAssessmentCountAggregateOutputType | null
    _avg: PsychologicalAssessmentAvgAggregateOutputType | null
    _sum: PsychologicalAssessmentSumAggregateOutputType | null
    _min: PsychologicalAssessmentMinAggregateOutputType | null
    _max: PsychologicalAssessmentMaxAggregateOutputType | null
  }

  export type PsychologicalAssessmentAvgAggregateOutputType = {
    openness: number | null
    conscientiousness: number | null
    extraversion: number | null
    agreeableness: number | null
    neuroticism: number | null
    logicalReasoning: number | null
    numericalAbility: number | null
    verbalAbility: number | null
    spatialAbility: number | null
    memoryCapacity: number | null
    selfAwareness: number | null
    selfRegulation: number | null
    motivation: number | null
    empathy: number | null
    socialSkills: number | null
    stressResilience: number | null
    teamworkAbility: number | null
    leadershipPotential: number | null
    adaptability: number | null
    problemSolving: number | null
    overallScore: number | null
  }

  export type PsychologicalAssessmentSumAggregateOutputType = {
    openness: number | null
    conscientiousness: number | null
    extraversion: number | null
    agreeableness: number | null
    neuroticism: number | null
    logicalReasoning: number | null
    numericalAbility: number | null
    verbalAbility: number | null
    spatialAbility: number | null
    memoryCapacity: number | null
    selfAwareness: number | null
    selfRegulation: number | null
    motivation: number | null
    empathy: number | null
    socialSkills: number | null
    stressResilience: number | null
    teamworkAbility: number | null
    leadershipPotential: number | null
    adaptability: number | null
    problemSolving: number | null
    overallScore: number | null
  }

  export type PsychologicalAssessmentMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    openness: number | null
    conscientiousness: number | null
    extraversion: number | null
    agreeableness: number | null
    neuroticism: number | null
    logicalReasoning: number | null
    numericalAbility: number | null
    verbalAbility: number | null
    spatialAbility: number | null
    memoryCapacity: number | null
    selfAwareness: number | null
    selfRegulation: number | null
    motivation: number | null
    empathy: number | null
    socialSkills: number | null
    stressResilience: number | null
    teamworkAbility: number | null
    leadershipPotential: number | null
    adaptability: number | null
    problemSolving: number | null
    overallScore: number | null
    recommendations: string | null
    assessmentNotes: string | null
  }

  export type PsychologicalAssessmentMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    openness: number | null
    conscientiousness: number | null
    extraversion: number | null
    agreeableness: number | null
    neuroticism: number | null
    logicalReasoning: number | null
    numericalAbility: number | null
    verbalAbility: number | null
    spatialAbility: number | null
    memoryCapacity: number | null
    selfAwareness: number | null
    selfRegulation: number | null
    motivation: number | null
    empathy: number | null
    socialSkills: number | null
    stressResilience: number | null
    teamworkAbility: number | null
    leadershipPotential: number | null
    adaptability: number | null
    problemSolving: number | null
    overallScore: number | null
    recommendations: string | null
    assessmentNotes: string | null
  }

  export type PsychologicalAssessmentCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    assessmentType: number
    assessmentDate: number
    openness: number
    conscientiousness: number
    extraversion: number
    agreeableness: number
    neuroticism: number
    logicalReasoning: number
    numericalAbility: number
    verbalAbility: number
    spatialAbility: number
    memoryCapacity: number
    selfAwareness: number
    selfRegulation: number
    motivation: number
    empathy: number
    socialSkills: number
    stressResilience: number
    teamworkAbility: number
    leadershipPotential: number
    adaptability: number
    problemSolving: number
    overallScore: number
    recommendations: number
    assessmentNotes: number
    _all: number
  }


  export type PsychologicalAssessmentAvgAggregateInputType = {
    openness?: true
    conscientiousness?: true
    extraversion?: true
    agreeableness?: true
    neuroticism?: true
    logicalReasoning?: true
    numericalAbility?: true
    verbalAbility?: true
    spatialAbility?: true
    memoryCapacity?: true
    selfAwareness?: true
    selfRegulation?: true
    motivation?: true
    empathy?: true
    socialSkills?: true
    stressResilience?: true
    teamworkAbility?: true
    leadershipPotential?: true
    adaptability?: true
    problemSolving?: true
    overallScore?: true
  }

  export type PsychologicalAssessmentSumAggregateInputType = {
    openness?: true
    conscientiousness?: true
    extraversion?: true
    agreeableness?: true
    neuroticism?: true
    logicalReasoning?: true
    numericalAbility?: true
    verbalAbility?: true
    spatialAbility?: true
    memoryCapacity?: true
    selfAwareness?: true
    selfRegulation?: true
    motivation?: true
    empathy?: true
    socialSkills?: true
    stressResilience?: true
    teamworkAbility?: true
    leadershipPotential?: true
    adaptability?: true
    problemSolving?: true
    overallScore?: true
  }

  export type PsychologicalAssessmentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    openness?: true
    conscientiousness?: true
    extraversion?: true
    agreeableness?: true
    neuroticism?: true
    logicalReasoning?: true
    numericalAbility?: true
    verbalAbility?: true
    spatialAbility?: true
    memoryCapacity?: true
    selfAwareness?: true
    selfRegulation?: true
    motivation?: true
    empathy?: true
    socialSkills?: true
    stressResilience?: true
    teamworkAbility?: true
    leadershipPotential?: true
    adaptability?: true
    problemSolving?: true
    overallScore?: true
    recommendations?: true
    assessmentNotes?: true
  }

  export type PsychologicalAssessmentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    openness?: true
    conscientiousness?: true
    extraversion?: true
    agreeableness?: true
    neuroticism?: true
    logicalReasoning?: true
    numericalAbility?: true
    verbalAbility?: true
    spatialAbility?: true
    memoryCapacity?: true
    selfAwareness?: true
    selfRegulation?: true
    motivation?: true
    empathy?: true
    socialSkills?: true
    stressResilience?: true
    teamworkAbility?: true
    leadershipPotential?: true
    adaptability?: true
    problemSolving?: true
    overallScore?: true
    recommendations?: true
    assessmentNotes?: true
  }

  export type PsychologicalAssessmentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    openness?: true
    conscientiousness?: true
    extraversion?: true
    agreeableness?: true
    neuroticism?: true
    logicalReasoning?: true
    numericalAbility?: true
    verbalAbility?: true
    spatialAbility?: true
    memoryCapacity?: true
    selfAwareness?: true
    selfRegulation?: true
    motivation?: true
    empathy?: true
    socialSkills?: true
    stressResilience?: true
    teamworkAbility?: true
    leadershipPotential?: true
    adaptability?: true
    problemSolving?: true
    overallScore?: true
    recommendations?: true
    assessmentNotes?: true
    _all?: true
  }

  export type PsychologicalAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PsychologicalAssessment to aggregate.
     */
    where?: PsychologicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychologicalAssessments to fetch.
     */
    orderBy?: PsychologicalAssessmentOrderByWithRelationInput | PsychologicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PsychologicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychologicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychologicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PsychologicalAssessments
    **/
    _count?: true | PsychologicalAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PsychologicalAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PsychologicalAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PsychologicalAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PsychologicalAssessmentMaxAggregateInputType
  }

  export type GetPsychologicalAssessmentAggregateType<T extends PsychologicalAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePsychologicalAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePsychologicalAssessment[P]>
      : GetScalarType<T[P], AggregatePsychologicalAssessment[P]>
  }




  export type PsychologicalAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PsychologicalAssessmentWhereInput
    orderBy?: PsychologicalAssessmentOrderByWithAggregationInput | PsychologicalAssessmentOrderByWithAggregationInput[]
    by: PsychologicalAssessmentScalarFieldEnum[] | PsychologicalAssessmentScalarFieldEnum
    having?: PsychologicalAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PsychologicalAssessmentCountAggregateInputType | true
    _avg?: PsychologicalAssessmentAvgAggregateInputType
    _sum?: PsychologicalAssessmentSumAggregateInputType
    _min?: PsychologicalAssessmentMinAggregateInputType
    _max?: PsychologicalAssessmentMaxAggregateInputType
  }

  export type PsychologicalAssessmentGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    assessmentType: string
    assessmentDate: Date
    openness: number | null
    conscientiousness: number | null
    extraversion: number | null
    agreeableness: number | null
    neuroticism: number | null
    logicalReasoning: number | null
    numericalAbility: number | null
    verbalAbility: number | null
    spatialAbility: number | null
    memoryCapacity: number | null
    selfAwareness: number | null
    selfRegulation: number | null
    motivation: number | null
    empathy: number | null
    socialSkills: number | null
    stressResilience: number | null
    teamworkAbility: number | null
    leadershipPotential: number | null
    adaptability: number | null
    problemSolving: number | null
    overallScore: number
    recommendations: string | null
    assessmentNotes: string | null
    _count: PsychologicalAssessmentCountAggregateOutputType | null
    _avg: PsychologicalAssessmentAvgAggregateOutputType | null
    _sum: PsychologicalAssessmentSumAggregateOutputType | null
    _min: PsychologicalAssessmentMinAggregateOutputType | null
    _max: PsychologicalAssessmentMaxAggregateOutputType | null
  }

  type GetPsychologicalAssessmentGroupByPayload<T extends PsychologicalAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PsychologicalAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PsychologicalAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PsychologicalAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], PsychologicalAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type PsychologicalAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    openness?: boolean
    conscientiousness?: boolean
    extraversion?: boolean
    agreeableness?: boolean
    neuroticism?: boolean
    logicalReasoning?: boolean
    numericalAbility?: boolean
    verbalAbility?: boolean
    spatialAbility?: boolean
    memoryCapacity?: boolean
    selfAwareness?: boolean
    selfRegulation?: boolean
    motivation?: boolean
    empathy?: boolean
    socialSkills?: boolean
    stressResilience?: boolean
    teamworkAbility?: boolean
    leadershipPotential?: boolean
    adaptability?: boolean
    problemSolving?: boolean
    overallScore?: boolean
    recommendations?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psychologicalAssessment"]>

  export type PsychologicalAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    openness?: boolean
    conscientiousness?: boolean
    extraversion?: boolean
    agreeableness?: boolean
    neuroticism?: boolean
    logicalReasoning?: boolean
    numericalAbility?: boolean
    verbalAbility?: boolean
    spatialAbility?: boolean
    memoryCapacity?: boolean
    selfAwareness?: boolean
    selfRegulation?: boolean
    motivation?: boolean
    empathy?: boolean
    socialSkills?: boolean
    stressResilience?: boolean
    teamworkAbility?: boolean
    leadershipPotential?: boolean
    adaptability?: boolean
    problemSolving?: boolean
    overallScore?: boolean
    recommendations?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psychologicalAssessment"]>

  export type PsychologicalAssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    openness?: boolean
    conscientiousness?: boolean
    extraversion?: boolean
    agreeableness?: boolean
    neuroticism?: boolean
    logicalReasoning?: boolean
    numericalAbility?: boolean
    verbalAbility?: boolean
    spatialAbility?: boolean
    memoryCapacity?: boolean
    selfAwareness?: boolean
    selfRegulation?: boolean
    motivation?: boolean
    empathy?: boolean
    socialSkills?: boolean
    stressResilience?: boolean
    teamworkAbility?: boolean
    leadershipPotential?: boolean
    adaptability?: boolean
    problemSolving?: boolean
    overallScore?: boolean
    recommendations?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psychologicalAssessment"]>

  export type PsychologicalAssessmentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    openness?: boolean
    conscientiousness?: boolean
    extraversion?: boolean
    agreeableness?: boolean
    neuroticism?: boolean
    logicalReasoning?: boolean
    numericalAbility?: boolean
    verbalAbility?: boolean
    spatialAbility?: boolean
    memoryCapacity?: boolean
    selfAwareness?: boolean
    selfRegulation?: boolean
    motivation?: boolean
    empathy?: boolean
    socialSkills?: boolean
    stressResilience?: boolean
    teamworkAbility?: boolean
    leadershipPotential?: boolean
    adaptability?: boolean
    problemSolving?: boolean
    overallScore?: boolean
    recommendations?: boolean
    assessmentNotes?: boolean
  }

  export type PsychologicalAssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "assessmentType" | "assessmentDate" | "openness" | "conscientiousness" | "extraversion" | "agreeableness" | "neuroticism" | "logicalReasoning" | "numericalAbility" | "verbalAbility" | "spatialAbility" | "memoryCapacity" | "selfAwareness" | "selfRegulation" | "motivation" | "empathy" | "socialSkills" | "stressResilience" | "teamworkAbility" | "leadershipPotential" | "adaptability" | "problemSolving" | "overallScore" | "recommendations" | "assessmentNotes", ExtArgs["result"]["psychologicalAssessment"]>
  export type PsychologicalAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type PsychologicalAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type PsychologicalAssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $PsychologicalAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PsychologicalAssessment"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      assessmentType: string
      assessmentDate: Date
      openness: number | null
      conscientiousness: number | null
      extraversion: number | null
      agreeableness: number | null
      neuroticism: number | null
      logicalReasoning: number | null
      numericalAbility: number | null
      verbalAbility: number | null
      spatialAbility: number | null
      memoryCapacity: number | null
      selfAwareness: number | null
      selfRegulation: number | null
      motivation: number | null
      empathy: number | null
      socialSkills: number | null
      stressResilience: number | null
      teamworkAbility: number | null
      leadershipPotential: number | null
      adaptability: number | null
      problemSolving: number | null
      overallScore: number
      recommendations: string | null
      assessmentNotes: string | null
    }, ExtArgs["result"]["psychologicalAssessment"]>
    composites: {}
  }

  type PsychologicalAssessmentGetPayload<S extends boolean | null | undefined | PsychologicalAssessmentDefaultArgs> = $Result.GetResult<Prisma.$PsychologicalAssessmentPayload, S>

  type PsychologicalAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PsychologicalAssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PsychologicalAssessmentCountAggregateInputType | true
    }

  export interface PsychologicalAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PsychologicalAssessment'], meta: { name: 'PsychologicalAssessment' } }
    /**
     * Find zero or one PsychologicalAssessment that matches the filter.
     * @param {PsychologicalAssessmentFindUniqueArgs} args - Arguments to find a PsychologicalAssessment
     * @example
     * // Get one PsychologicalAssessment
     * const psychologicalAssessment = await prisma.psychologicalAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PsychologicalAssessmentFindUniqueArgs>(args: SelectSubset<T, PsychologicalAssessmentFindUniqueArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PsychologicalAssessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PsychologicalAssessmentFindUniqueOrThrowArgs} args - Arguments to find a PsychologicalAssessment
     * @example
     * // Get one PsychologicalAssessment
     * const psychologicalAssessment = await prisma.psychologicalAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PsychologicalAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PsychologicalAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PsychologicalAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychologicalAssessmentFindFirstArgs} args - Arguments to find a PsychologicalAssessment
     * @example
     * // Get one PsychologicalAssessment
     * const psychologicalAssessment = await prisma.psychologicalAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PsychologicalAssessmentFindFirstArgs>(args?: SelectSubset<T, PsychologicalAssessmentFindFirstArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PsychologicalAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychologicalAssessmentFindFirstOrThrowArgs} args - Arguments to find a PsychologicalAssessment
     * @example
     * // Get one PsychologicalAssessment
     * const psychologicalAssessment = await prisma.psychologicalAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PsychologicalAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PsychologicalAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PsychologicalAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychologicalAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PsychologicalAssessments
     * const psychologicalAssessments = await prisma.psychologicalAssessment.findMany()
     * 
     * // Get first 10 PsychologicalAssessments
     * const psychologicalAssessments = await prisma.psychologicalAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const psychologicalAssessmentWithIdOnly = await prisma.psychologicalAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PsychologicalAssessmentFindManyArgs>(args?: SelectSubset<T, PsychologicalAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PsychologicalAssessment.
     * @param {PsychologicalAssessmentCreateArgs} args - Arguments to create a PsychologicalAssessment.
     * @example
     * // Create one PsychologicalAssessment
     * const PsychologicalAssessment = await prisma.psychologicalAssessment.create({
     *   data: {
     *     // ... data to create a PsychologicalAssessment
     *   }
     * })
     * 
     */
    create<T extends PsychologicalAssessmentCreateArgs>(args: SelectSubset<T, PsychologicalAssessmentCreateArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PsychologicalAssessments.
     * @param {PsychologicalAssessmentCreateManyArgs} args - Arguments to create many PsychologicalAssessments.
     * @example
     * // Create many PsychologicalAssessments
     * const psychologicalAssessment = await prisma.psychologicalAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PsychologicalAssessmentCreateManyArgs>(args?: SelectSubset<T, PsychologicalAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PsychologicalAssessments and returns the data saved in the database.
     * @param {PsychologicalAssessmentCreateManyAndReturnArgs} args - Arguments to create many PsychologicalAssessments.
     * @example
     * // Create many PsychologicalAssessments
     * const psychologicalAssessment = await prisma.psychologicalAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PsychologicalAssessments and only return the `id`
     * const psychologicalAssessmentWithIdOnly = await prisma.psychologicalAssessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PsychologicalAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PsychologicalAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PsychologicalAssessment.
     * @param {PsychologicalAssessmentDeleteArgs} args - Arguments to delete one PsychologicalAssessment.
     * @example
     * // Delete one PsychologicalAssessment
     * const PsychologicalAssessment = await prisma.psychologicalAssessment.delete({
     *   where: {
     *     // ... filter to delete one PsychologicalAssessment
     *   }
     * })
     * 
     */
    delete<T extends PsychologicalAssessmentDeleteArgs>(args: SelectSubset<T, PsychologicalAssessmentDeleteArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PsychologicalAssessment.
     * @param {PsychologicalAssessmentUpdateArgs} args - Arguments to update one PsychologicalAssessment.
     * @example
     * // Update one PsychologicalAssessment
     * const psychologicalAssessment = await prisma.psychologicalAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PsychologicalAssessmentUpdateArgs>(args: SelectSubset<T, PsychologicalAssessmentUpdateArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PsychologicalAssessments.
     * @param {PsychologicalAssessmentDeleteManyArgs} args - Arguments to filter PsychologicalAssessments to delete.
     * @example
     * // Delete a few PsychologicalAssessments
     * const { count } = await prisma.psychologicalAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PsychologicalAssessmentDeleteManyArgs>(args?: SelectSubset<T, PsychologicalAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PsychologicalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychologicalAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PsychologicalAssessments
     * const psychologicalAssessment = await prisma.psychologicalAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PsychologicalAssessmentUpdateManyArgs>(args: SelectSubset<T, PsychologicalAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PsychologicalAssessments and returns the data updated in the database.
     * @param {PsychologicalAssessmentUpdateManyAndReturnArgs} args - Arguments to update many PsychologicalAssessments.
     * @example
     * // Update many PsychologicalAssessments
     * const psychologicalAssessment = await prisma.psychologicalAssessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PsychologicalAssessments and only return the `id`
     * const psychologicalAssessmentWithIdOnly = await prisma.psychologicalAssessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PsychologicalAssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, PsychologicalAssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PsychologicalAssessment.
     * @param {PsychologicalAssessmentUpsertArgs} args - Arguments to update or create a PsychologicalAssessment.
     * @example
     * // Update or create a PsychologicalAssessment
     * const psychologicalAssessment = await prisma.psychologicalAssessment.upsert({
     *   create: {
     *     // ... data to create a PsychologicalAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PsychologicalAssessment we want to update
     *   }
     * })
     */
    upsert<T extends PsychologicalAssessmentUpsertArgs>(args: SelectSubset<T, PsychologicalAssessmentUpsertArgs<ExtArgs>>): Prisma__PsychologicalAssessmentClient<$Result.GetResult<Prisma.$PsychologicalAssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PsychologicalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychologicalAssessmentCountArgs} args - Arguments to filter PsychologicalAssessments to count.
     * @example
     * // Count the number of PsychologicalAssessments
     * const count = await prisma.psychologicalAssessment.count({
     *   where: {
     *     // ... the filter for the PsychologicalAssessments we want to count
     *   }
     * })
    **/
    count<T extends PsychologicalAssessmentCountArgs>(
      args?: Subset<T, PsychologicalAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PsychologicalAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PsychologicalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychologicalAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PsychologicalAssessmentAggregateArgs>(args: Subset<T, PsychologicalAssessmentAggregateArgs>): Prisma.PrismaPromise<GetPsychologicalAssessmentAggregateType<T>>

    /**
     * Group by PsychologicalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychologicalAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PsychologicalAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PsychologicalAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: PsychologicalAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PsychologicalAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPsychologicalAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PsychologicalAssessment model
   */
  readonly fields: PsychologicalAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PsychologicalAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PsychologicalAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PsychologicalAssessment model
   */
  interface PsychologicalAssessmentFieldRefs {
    readonly id: FieldRef<"PsychologicalAssessment", 'String'>
    readonly createdAt: FieldRef<"PsychologicalAssessment", 'DateTime'>
    readonly updatedAt: FieldRef<"PsychologicalAssessment", 'DateTime'>
    readonly candidateId: FieldRef<"PsychologicalAssessment", 'String'>
    readonly assessmentType: FieldRef<"PsychologicalAssessment", 'String'>
    readonly assessmentDate: FieldRef<"PsychologicalAssessment", 'DateTime'>
    readonly openness: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly conscientiousness: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly extraversion: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly agreeableness: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly neuroticism: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly logicalReasoning: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly numericalAbility: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly verbalAbility: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly spatialAbility: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly memoryCapacity: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly selfAwareness: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly selfRegulation: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly motivation: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly empathy: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly socialSkills: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly stressResilience: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly teamworkAbility: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly leadershipPotential: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly adaptability: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly problemSolving: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly overallScore: FieldRef<"PsychologicalAssessment", 'Float'>
    readonly recommendations: FieldRef<"PsychologicalAssessment", 'String'>
    readonly assessmentNotes: FieldRef<"PsychologicalAssessment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PsychologicalAssessment findUnique
   */
  export type PsychologicalAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PsychologicalAssessment to fetch.
     */
    where: PsychologicalAssessmentWhereUniqueInput
  }

  /**
   * PsychologicalAssessment findUniqueOrThrow
   */
  export type PsychologicalAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PsychologicalAssessment to fetch.
     */
    where: PsychologicalAssessmentWhereUniqueInput
  }

  /**
   * PsychologicalAssessment findFirst
   */
  export type PsychologicalAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PsychologicalAssessment to fetch.
     */
    where?: PsychologicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychologicalAssessments to fetch.
     */
    orderBy?: PsychologicalAssessmentOrderByWithRelationInput | PsychologicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PsychologicalAssessments.
     */
    cursor?: PsychologicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychologicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychologicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PsychologicalAssessments.
     */
    distinct?: PsychologicalAssessmentScalarFieldEnum | PsychologicalAssessmentScalarFieldEnum[]
  }

  /**
   * PsychologicalAssessment findFirstOrThrow
   */
  export type PsychologicalAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PsychologicalAssessment to fetch.
     */
    where?: PsychologicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychologicalAssessments to fetch.
     */
    orderBy?: PsychologicalAssessmentOrderByWithRelationInput | PsychologicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PsychologicalAssessments.
     */
    cursor?: PsychologicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychologicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychologicalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PsychologicalAssessments.
     */
    distinct?: PsychologicalAssessmentScalarFieldEnum | PsychologicalAssessmentScalarFieldEnum[]
  }

  /**
   * PsychologicalAssessment findMany
   */
  export type PsychologicalAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PsychologicalAssessments to fetch.
     */
    where?: PsychologicalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychologicalAssessments to fetch.
     */
    orderBy?: PsychologicalAssessmentOrderByWithRelationInput | PsychologicalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PsychologicalAssessments.
     */
    cursor?: PsychologicalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychologicalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychologicalAssessments.
     */
    skip?: number
    distinct?: PsychologicalAssessmentScalarFieldEnum | PsychologicalAssessmentScalarFieldEnum[]
  }

  /**
   * PsychologicalAssessment create
   */
  export type PsychologicalAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PsychologicalAssessment.
     */
    data: XOR<PsychologicalAssessmentCreateInput, PsychologicalAssessmentUncheckedCreateInput>
  }

  /**
   * PsychologicalAssessment createMany
   */
  export type PsychologicalAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PsychologicalAssessments.
     */
    data: PsychologicalAssessmentCreateManyInput | PsychologicalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PsychologicalAssessment createManyAndReturn
   */
  export type PsychologicalAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many PsychologicalAssessments.
     */
    data: PsychologicalAssessmentCreateManyInput | PsychologicalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PsychologicalAssessment update
   */
  export type PsychologicalAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PsychologicalAssessment.
     */
    data: XOR<PsychologicalAssessmentUpdateInput, PsychologicalAssessmentUncheckedUpdateInput>
    /**
     * Choose, which PsychologicalAssessment to update.
     */
    where: PsychologicalAssessmentWhereUniqueInput
  }

  /**
   * PsychologicalAssessment updateMany
   */
  export type PsychologicalAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PsychologicalAssessments.
     */
    data: XOR<PsychologicalAssessmentUpdateManyMutationInput, PsychologicalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which PsychologicalAssessments to update
     */
    where?: PsychologicalAssessmentWhereInput
    /**
     * Limit how many PsychologicalAssessments to update.
     */
    limit?: number
  }

  /**
   * PsychologicalAssessment updateManyAndReturn
   */
  export type PsychologicalAssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * The data used to update PsychologicalAssessments.
     */
    data: XOR<PsychologicalAssessmentUpdateManyMutationInput, PsychologicalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which PsychologicalAssessments to update
     */
    where?: PsychologicalAssessmentWhereInput
    /**
     * Limit how many PsychologicalAssessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PsychologicalAssessment upsert
   */
  export type PsychologicalAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PsychologicalAssessment to update in case it exists.
     */
    where: PsychologicalAssessmentWhereUniqueInput
    /**
     * In case the PsychologicalAssessment found by the `where` argument doesn't exist, create a new PsychologicalAssessment with this data.
     */
    create: XOR<PsychologicalAssessmentCreateInput, PsychologicalAssessmentUncheckedCreateInput>
    /**
     * In case the PsychologicalAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PsychologicalAssessmentUpdateInput, PsychologicalAssessmentUncheckedUpdateInput>
  }

  /**
   * PsychologicalAssessment delete
   */
  export type PsychologicalAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
    /**
     * Filter which PsychologicalAssessment to delete.
     */
    where: PsychologicalAssessmentWhereUniqueInput
  }

  /**
   * PsychologicalAssessment deleteMany
   */
  export type PsychologicalAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PsychologicalAssessments to delete
     */
    where?: PsychologicalAssessmentWhereInput
    /**
     * Limit how many PsychologicalAssessments to delete.
     */
    limit?: number
  }

  /**
   * PsychologicalAssessment without action
   */
  export type PsychologicalAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychologicalAssessment
     */
    select?: PsychologicalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychologicalAssessment
     */
    omit?: PsychologicalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychologicalAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model LanguageAssessment
   */

  export type AggregateLanguageAssessment = {
    _count: LanguageAssessmentCountAggregateOutputType | null
    _avg: LanguageAssessmentAvgAggregateOutputType | null
    _sum: LanguageAssessmentSumAggregateOutputType | null
    _min: LanguageAssessmentMinAggregateOutputType | null
    _max: LanguageAssessmentMaxAggregateOutputType | null
  }

  export type LanguageAssessmentAvgAggregateOutputType = {
    overallScore: number | null
    speakingScore: number | null
    listeningScore: number | null
    readingScore: number | null
    writingScore: number | null
    businessCommunication: number | null
    technicalVocabulary: number | null
    presentationSkills: number | null
    negotiationSkills: number | null
  }

  export type LanguageAssessmentSumAggregateOutputType = {
    overallScore: number | null
    speakingScore: number | null
    listeningScore: number | null
    readingScore: number | null
    writingScore: number | null
    businessCommunication: number | null
    technicalVocabulary: number | null
    presentationSkills: number | null
    negotiationSkills: number | null
  }

  export type LanguageAssessmentMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    language: string | null
    assessmentDate: Date | null
    assessmentType: string | null
    speakingLevel: string | null
    listeningLevel: string | null
    readingLevel: string | null
    writingLevel: string | null
    overallScore: number | null
    speakingScore: number | null
    listeningScore: number | null
    readingScore: number | null
    writingScore: number | null
    businessCommunication: number | null
    technicalVocabulary: number | null
    presentationSkills: number | null
    negotiationSkills: number | null
    certificationLevel: string | null
    certificationDate: Date | null
    assessmentNotes: string | null
  }

  export type LanguageAssessmentMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    language: string | null
    assessmentDate: Date | null
    assessmentType: string | null
    speakingLevel: string | null
    listeningLevel: string | null
    readingLevel: string | null
    writingLevel: string | null
    overallScore: number | null
    speakingScore: number | null
    listeningScore: number | null
    readingScore: number | null
    writingScore: number | null
    businessCommunication: number | null
    technicalVocabulary: number | null
    presentationSkills: number | null
    negotiationSkills: number | null
    certificationLevel: string | null
    certificationDate: Date | null
    assessmentNotes: string | null
  }

  export type LanguageAssessmentCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    language: number
    assessmentDate: number
    assessmentType: number
    speakingLevel: number
    listeningLevel: number
    readingLevel: number
    writingLevel: number
    overallScore: number
    speakingScore: number
    listeningScore: number
    readingScore: number
    writingScore: number
    businessCommunication: number
    technicalVocabulary: number
    presentationSkills: number
    negotiationSkills: number
    certificationLevel: number
    certificationDate: number
    assessmentNotes: number
    _all: number
  }


  export type LanguageAssessmentAvgAggregateInputType = {
    overallScore?: true
    speakingScore?: true
    listeningScore?: true
    readingScore?: true
    writingScore?: true
    businessCommunication?: true
    technicalVocabulary?: true
    presentationSkills?: true
    negotiationSkills?: true
  }

  export type LanguageAssessmentSumAggregateInputType = {
    overallScore?: true
    speakingScore?: true
    listeningScore?: true
    readingScore?: true
    writingScore?: true
    businessCommunication?: true
    technicalVocabulary?: true
    presentationSkills?: true
    negotiationSkills?: true
  }

  export type LanguageAssessmentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    language?: true
    assessmentDate?: true
    assessmentType?: true
    speakingLevel?: true
    listeningLevel?: true
    readingLevel?: true
    writingLevel?: true
    overallScore?: true
    speakingScore?: true
    listeningScore?: true
    readingScore?: true
    writingScore?: true
    businessCommunication?: true
    technicalVocabulary?: true
    presentationSkills?: true
    negotiationSkills?: true
    certificationLevel?: true
    certificationDate?: true
    assessmentNotes?: true
  }

  export type LanguageAssessmentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    language?: true
    assessmentDate?: true
    assessmentType?: true
    speakingLevel?: true
    listeningLevel?: true
    readingLevel?: true
    writingLevel?: true
    overallScore?: true
    speakingScore?: true
    listeningScore?: true
    readingScore?: true
    writingScore?: true
    businessCommunication?: true
    technicalVocabulary?: true
    presentationSkills?: true
    negotiationSkills?: true
    certificationLevel?: true
    certificationDate?: true
    assessmentNotes?: true
  }

  export type LanguageAssessmentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    language?: true
    assessmentDate?: true
    assessmentType?: true
    speakingLevel?: true
    listeningLevel?: true
    readingLevel?: true
    writingLevel?: true
    overallScore?: true
    speakingScore?: true
    listeningScore?: true
    readingScore?: true
    writingScore?: true
    businessCommunication?: true
    technicalVocabulary?: true
    presentationSkills?: true
    negotiationSkills?: true
    certificationLevel?: true
    certificationDate?: true
    assessmentNotes?: true
    _all?: true
  }

  export type LanguageAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageAssessment to aggregate.
     */
    where?: LanguageAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageAssessments to fetch.
     */
    orderBy?: LanguageAssessmentOrderByWithRelationInput | LanguageAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguageAssessments
    **/
    _count?: true | LanguageAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguageAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguageAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageAssessmentMaxAggregateInputType
  }

  export type GetLanguageAssessmentAggregateType<T extends LanguageAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguageAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguageAssessment[P]>
      : GetScalarType<T[P], AggregateLanguageAssessment[P]>
  }




  export type LanguageAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageAssessmentWhereInput
    orderBy?: LanguageAssessmentOrderByWithAggregationInput | LanguageAssessmentOrderByWithAggregationInput[]
    by: LanguageAssessmentScalarFieldEnum[] | LanguageAssessmentScalarFieldEnum
    having?: LanguageAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageAssessmentCountAggregateInputType | true
    _avg?: LanguageAssessmentAvgAggregateInputType
    _sum?: LanguageAssessmentSumAggregateInputType
    _min?: LanguageAssessmentMinAggregateInputType
    _max?: LanguageAssessmentMaxAggregateInputType
  }

  export type LanguageAssessmentGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    language: string
    assessmentDate: Date
    assessmentType: string
    speakingLevel: string
    listeningLevel: string
    readingLevel: string
    writingLevel: string
    overallScore: number
    speakingScore: number | null
    listeningScore: number | null
    readingScore: number | null
    writingScore: number | null
    businessCommunication: number | null
    technicalVocabulary: number | null
    presentationSkills: number | null
    negotiationSkills: number | null
    certificationLevel: string | null
    certificationDate: Date | null
    assessmentNotes: string | null
    _count: LanguageAssessmentCountAggregateOutputType | null
    _avg: LanguageAssessmentAvgAggregateOutputType | null
    _sum: LanguageAssessmentSumAggregateOutputType | null
    _min: LanguageAssessmentMinAggregateOutputType | null
    _max: LanguageAssessmentMaxAggregateOutputType | null
  }

  type GetLanguageAssessmentGroupByPayload<T extends LanguageAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type LanguageAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    language?: boolean
    assessmentDate?: boolean
    assessmentType?: boolean
    speakingLevel?: boolean
    listeningLevel?: boolean
    readingLevel?: boolean
    writingLevel?: boolean
    overallScore?: boolean
    speakingScore?: boolean
    listeningScore?: boolean
    readingScore?: boolean
    writingScore?: boolean
    businessCommunication?: boolean
    technicalVocabulary?: boolean
    presentationSkills?: boolean
    negotiationSkills?: boolean
    certificationLevel?: boolean
    certificationDate?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageAssessment"]>

  export type LanguageAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    language?: boolean
    assessmentDate?: boolean
    assessmentType?: boolean
    speakingLevel?: boolean
    listeningLevel?: boolean
    readingLevel?: boolean
    writingLevel?: boolean
    overallScore?: boolean
    speakingScore?: boolean
    listeningScore?: boolean
    readingScore?: boolean
    writingScore?: boolean
    businessCommunication?: boolean
    technicalVocabulary?: boolean
    presentationSkills?: boolean
    negotiationSkills?: boolean
    certificationLevel?: boolean
    certificationDate?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageAssessment"]>

  export type LanguageAssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    language?: boolean
    assessmentDate?: boolean
    assessmentType?: boolean
    speakingLevel?: boolean
    listeningLevel?: boolean
    readingLevel?: boolean
    writingLevel?: boolean
    overallScore?: boolean
    speakingScore?: boolean
    listeningScore?: boolean
    readingScore?: boolean
    writingScore?: boolean
    businessCommunication?: boolean
    technicalVocabulary?: boolean
    presentationSkills?: boolean
    negotiationSkills?: boolean
    certificationLevel?: boolean
    certificationDate?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageAssessment"]>

  export type LanguageAssessmentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    language?: boolean
    assessmentDate?: boolean
    assessmentType?: boolean
    speakingLevel?: boolean
    listeningLevel?: boolean
    readingLevel?: boolean
    writingLevel?: boolean
    overallScore?: boolean
    speakingScore?: boolean
    listeningScore?: boolean
    readingScore?: boolean
    writingScore?: boolean
    businessCommunication?: boolean
    technicalVocabulary?: boolean
    presentationSkills?: boolean
    negotiationSkills?: boolean
    certificationLevel?: boolean
    certificationDate?: boolean
    assessmentNotes?: boolean
  }

  export type LanguageAssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "language" | "assessmentDate" | "assessmentType" | "speakingLevel" | "listeningLevel" | "readingLevel" | "writingLevel" | "overallScore" | "speakingScore" | "listeningScore" | "readingScore" | "writingScore" | "businessCommunication" | "technicalVocabulary" | "presentationSkills" | "negotiationSkills" | "certificationLevel" | "certificationDate" | "assessmentNotes", ExtArgs["result"]["languageAssessment"]>
  export type LanguageAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type LanguageAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type LanguageAssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $LanguageAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguageAssessment"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      language: string
      assessmentDate: Date
      assessmentType: string
      speakingLevel: string
      listeningLevel: string
      readingLevel: string
      writingLevel: string
      overallScore: number
      speakingScore: number | null
      listeningScore: number | null
      readingScore: number | null
      writingScore: number | null
      businessCommunication: number | null
      technicalVocabulary: number | null
      presentationSkills: number | null
      negotiationSkills: number | null
      certificationLevel: string | null
      certificationDate: Date | null
      assessmentNotes: string | null
    }, ExtArgs["result"]["languageAssessment"]>
    composites: {}
  }

  type LanguageAssessmentGetPayload<S extends boolean | null | undefined | LanguageAssessmentDefaultArgs> = $Result.GetResult<Prisma.$LanguageAssessmentPayload, S>

  type LanguageAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageAssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageAssessmentCountAggregateInputType | true
    }

  export interface LanguageAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguageAssessment'], meta: { name: 'LanguageAssessment' } }
    /**
     * Find zero or one LanguageAssessment that matches the filter.
     * @param {LanguageAssessmentFindUniqueArgs} args - Arguments to find a LanguageAssessment
     * @example
     * // Get one LanguageAssessment
     * const languageAssessment = await prisma.languageAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageAssessmentFindUniqueArgs>(args: SelectSubset<T, LanguageAssessmentFindUniqueArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LanguageAssessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageAssessmentFindUniqueOrThrowArgs} args - Arguments to find a LanguageAssessment
     * @example
     * // Get one LanguageAssessment
     * const languageAssessment = await prisma.languageAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAssessmentFindFirstArgs} args - Arguments to find a LanguageAssessment
     * @example
     * // Get one LanguageAssessment
     * const languageAssessment = await prisma.languageAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageAssessmentFindFirstArgs>(args?: SelectSubset<T, LanguageAssessmentFindFirstArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAssessmentFindFirstOrThrowArgs} args - Arguments to find a LanguageAssessment
     * @example
     * // Get one LanguageAssessment
     * const languageAssessment = await prisma.languageAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LanguageAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguageAssessments
     * const languageAssessments = await prisma.languageAssessment.findMany()
     * 
     * // Get first 10 LanguageAssessments
     * const languageAssessments = await prisma.languageAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageAssessmentWithIdOnly = await prisma.languageAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageAssessmentFindManyArgs>(args?: SelectSubset<T, LanguageAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LanguageAssessment.
     * @param {LanguageAssessmentCreateArgs} args - Arguments to create a LanguageAssessment.
     * @example
     * // Create one LanguageAssessment
     * const LanguageAssessment = await prisma.languageAssessment.create({
     *   data: {
     *     // ... data to create a LanguageAssessment
     *   }
     * })
     * 
     */
    create<T extends LanguageAssessmentCreateArgs>(args: SelectSubset<T, LanguageAssessmentCreateArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LanguageAssessments.
     * @param {LanguageAssessmentCreateManyArgs} args - Arguments to create many LanguageAssessments.
     * @example
     * // Create many LanguageAssessments
     * const languageAssessment = await prisma.languageAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageAssessmentCreateManyArgs>(args?: SelectSubset<T, LanguageAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LanguageAssessments and returns the data saved in the database.
     * @param {LanguageAssessmentCreateManyAndReturnArgs} args - Arguments to create many LanguageAssessments.
     * @example
     * // Create many LanguageAssessments
     * const languageAssessment = await prisma.languageAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LanguageAssessments and only return the `id`
     * const languageAssessmentWithIdOnly = await prisma.languageAssessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguageAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguageAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LanguageAssessment.
     * @param {LanguageAssessmentDeleteArgs} args - Arguments to delete one LanguageAssessment.
     * @example
     * // Delete one LanguageAssessment
     * const LanguageAssessment = await prisma.languageAssessment.delete({
     *   where: {
     *     // ... filter to delete one LanguageAssessment
     *   }
     * })
     * 
     */
    delete<T extends LanguageAssessmentDeleteArgs>(args: SelectSubset<T, LanguageAssessmentDeleteArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LanguageAssessment.
     * @param {LanguageAssessmentUpdateArgs} args - Arguments to update one LanguageAssessment.
     * @example
     * // Update one LanguageAssessment
     * const languageAssessment = await prisma.languageAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageAssessmentUpdateArgs>(args: SelectSubset<T, LanguageAssessmentUpdateArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LanguageAssessments.
     * @param {LanguageAssessmentDeleteManyArgs} args - Arguments to filter LanguageAssessments to delete.
     * @example
     * // Delete a few LanguageAssessments
     * const { count } = await prisma.languageAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageAssessmentDeleteManyArgs>(args?: SelectSubset<T, LanguageAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguageAssessments
     * const languageAssessment = await prisma.languageAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageAssessmentUpdateManyArgs>(args: SelectSubset<T, LanguageAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageAssessments and returns the data updated in the database.
     * @param {LanguageAssessmentUpdateManyAndReturnArgs} args - Arguments to update many LanguageAssessments.
     * @example
     * // Update many LanguageAssessments
     * const languageAssessment = await prisma.languageAssessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LanguageAssessments and only return the `id`
     * const languageAssessmentWithIdOnly = await prisma.languageAssessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LanguageAssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, LanguageAssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LanguageAssessment.
     * @param {LanguageAssessmentUpsertArgs} args - Arguments to update or create a LanguageAssessment.
     * @example
     * // Update or create a LanguageAssessment
     * const languageAssessment = await prisma.languageAssessment.upsert({
     *   create: {
     *     // ... data to create a LanguageAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguageAssessment we want to update
     *   }
     * })
     */
    upsert<T extends LanguageAssessmentUpsertArgs>(args: SelectSubset<T, LanguageAssessmentUpsertArgs<ExtArgs>>): Prisma__LanguageAssessmentClient<$Result.GetResult<Prisma.$LanguageAssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LanguageAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAssessmentCountArgs} args - Arguments to filter LanguageAssessments to count.
     * @example
     * // Count the number of LanguageAssessments
     * const count = await prisma.languageAssessment.count({
     *   where: {
     *     // ... the filter for the LanguageAssessments we want to count
     *   }
     * })
    **/
    count<T extends LanguageAssessmentCountArgs>(
      args?: Subset<T, LanguageAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguageAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageAssessmentAggregateArgs>(args: Subset<T, LanguageAssessmentAggregateArgs>): Prisma.PrismaPromise<GetLanguageAssessmentAggregateType<T>>

    /**
     * Group by LanguageAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: LanguageAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguageAssessment model
   */
  readonly fields: LanguageAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguageAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LanguageAssessment model
   */
  interface LanguageAssessmentFieldRefs {
    readonly id: FieldRef<"LanguageAssessment", 'String'>
    readonly createdAt: FieldRef<"LanguageAssessment", 'DateTime'>
    readonly updatedAt: FieldRef<"LanguageAssessment", 'DateTime'>
    readonly candidateId: FieldRef<"LanguageAssessment", 'String'>
    readonly language: FieldRef<"LanguageAssessment", 'String'>
    readonly assessmentDate: FieldRef<"LanguageAssessment", 'DateTime'>
    readonly assessmentType: FieldRef<"LanguageAssessment", 'String'>
    readonly speakingLevel: FieldRef<"LanguageAssessment", 'String'>
    readonly listeningLevel: FieldRef<"LanguageAssessment", 'String'>
    readonly readingLevel: FieldRef<"LanguageAssessment", 'String'>
    readonly writingLevel: FieldRef<"LanguageAssessment", 'String'>
    readonly overallScore: FieldRef<"LanguageAssessment", 'Float'>
    readonly speakingScore: FieldRef<"LanguageAssessment", 'Float'>
    readonly listeningScore: FieldRef<"LanguageAssessment", 'Float'>
    readonly readingScore: FieldRef<"LanguageAssessment", 'Float'>
    readonly writingScore: FieldRef<"LanguageAssessment", 'Float'>
    readonly businessCommunication: FieldRef<"LanguageAssessment", 'Float'>
    readonly technicalVocabulary: FieldRef<"LanguageAssessment", 'Float'>
    readonly presentationSkills: FieldRef<"LanguageAssessment", 'Float'>
    readonly negotiationSkills: FieldRef<"LanguageAssessment", 'Float'>
    readonly certificationLevel: FieldRef<"LanguageAssessment", 'String'>
    readonly certificationDate: FieldRef<"LanguageAssessment", 'DateTime'>
    readonly assessmentNotes: FieldRef<"LanguageAssessment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LanguageAssessment findUnique
   */
  export type LanguageAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which LanguageAssessment to fetch.
     */
    where: LanguageAssessmentWhereUniqueInput
  }

  /**
   * LanguageAssessment findUniqueOrThrow
   */
  export type LanguageAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which LanguageAssessment to fetch.
     */
    where: LanguageAssessmentWhereUniqueInput
  }

  /**
   * LanguageAssessment findFirst
   */
  export type LanguageAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which LanguageAssessment to fetch.
     */
    where?: LanguageAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageAssessments to fetch.
     */
    orderBy?: LanguageAssessmentOrderByWithRelationInput | LanguageAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageAssessments.
     */
    cursor?: LanguageAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageAssessments.
     */
    distinct?: LanguageAssessmentScalarFieldEnum | LanguageAssessmentScalarFieldEnum[]
  }

  /**
   * LanguageAssessment findFirstOrThrow
   */
  export type LanguageAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which LanguageAssessment to fetch.
     */
    where?: LanguageAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageAssessments to fetch.
     */
    orderBy?: LanguageAssessmentOrderByWithRelationInput | LanguageAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageAssessments.
     */
    cursor?: LanguageAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageAssessments.
     */
    distinct?: LanguageAssessmentScalarFieldEnum | LanguageAssessmentScalarFieldEnum[]
  }

  /**
   * LanguageAssessment findMany
   */
  export type LanguageAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which LanguageAssessments to fetch.
     */
    where?: LanguageAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageAssessments to fetch.
     */
    orderBy?: LanguageAssessmentOrderByWithRelationInput | LanguageAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguageAssessments.
     */
    cursor?: LanguageAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageAssessments.
     */
    skip?: number
    distinct?: LanguageAssessmentScalarFieldEnum | LanguageAssessmentScalarFieldEnum[]
  }

  /**
   * LanguageAssessment create
   */
  export type LanguageAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguageAssessment.
     */
    data: XOR<LanguageAssessmentCreateInput, LanguageAssessmentUncheckedCreateInput>
  }

  /**
   * LanguageAssessment createMany
   */
  export type LanguageAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguageAssessments.
     */
    data: LanguageAssessmentCreateManyInput | LanguageAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageAssessment createManyAndReturn
   */
  export type LanguageAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many LanguageAssessments.
     */
    data: LanguageAssessmentCreateManyInput | LanguageAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageAssessment update
   */
  export type LanguageAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguageAssessment.
     */
    data: XOR<LanguageAssessmentUpdateInput, LanguageAssessmentUncheckedUpdateInput>
    /**
     * Choose, which LanguageAssessment to update.
     */
    where: LanguageAssessmentWhereUniqueInput
  }

  /**
   * LanguageAssessment updateMany
   */
  export type LanguageAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguageAssessments.
     */
    data: XOR<LanguageAssessmentUpdateManyMutationInput, LanguageAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which LanguageAssessments to update
     */
    where?: LanguageAssessmentWhereInput
    /**
     * Limit how many LanguageAssessments to update.
     */
    limit?: number
  }

  /**
   * LanguageAssessment updateManyAndReturn
   */
  export type LanguageAssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * The data used to update LanguageAssessments.
     */
    data: XOR<LanguageAssessmentUpdateManyMutationInput, LanguageAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which LanguageAssessments to update
     */
    where?: LanguageAssessmentWhereInput
    /**
     * Limit how many LanguageAssessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageAssessment upsert
   */
  export type LanguageAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguageAssessment to update in case it exists.
     */
    where: LanguageAssessmentWhereUniqueInput
    /**
     * In case the LanguageAssessment found by the `where` argument doesn't exist, create a new LanguageAssessment with this data.
     */
    create: XOR<LanguageAssessmentCreateInput, LanguageAssessmentUncheckedCreateInput>
    /**
     * In case the LanguageAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageAssessmentUpdateInput, LanguageAssessmentUncheckedUpdateInput>
  }

  /**
   * LanguageAssessment delete
   */
  export type LanguageAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
    /**
     * Filter which LanguageAssessment to delete.
     */
    where: LanguageAssessmentWhereUniqueInput
  }

  /**
   * LanguageAssessment deleteMany
   */
  export type LanguageAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageAssessments to delete
     */
    where?: LanguageAssessmentWhereInput
    /**
     * Limit how many LanguageAssessments to delete.
     */
    limit?: number
  }

  /**
   * LanguageAssessment without action
   */
  export type LanguageAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageAssessment
     */
    select?: LanguageAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageAssessment
     */
    omit?: LanguageAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model ProfessionalAssessment
   */

  export type AggregateProfessionalAssessment = {
    _count: ProfessionalAssessmentCountAggregateOutputType | null
    _avg: ProfessionalAssessmentAvgAggregateOutputType | null
    _sum: ProfessionalAssessmentSumAggregateOutputType | null
    _min: ProfessionalAssessmentMinAggregateOutputType | null
    _max: ProfessionalAssessmentMaxAggregateOutputType | null
  }

  export type ProfessionalAssessmentAvgAggregateOutputType = {
    technicalProficiency: number | null
    industryKnowledge: number | null
    problemSolvingAbility: number | null
    innovationCapability: number | null
    projectManagement: number | null
    teamLeadership: number | null
    clientManagement: number | null
    strategicThinking: number | null
    analyticalSkills: number | null
    domainExpertise: number | null
    regulatoryKnowledge: number | null
    marketUnderstanding: number | null
    competitorAwareness: number | null
    overallScore: number | null
  }

  export type ProfessionalAssessmentSumAggregateOutputType = {
    technicalProficiency: number | null
    industryKnowledge: number | null
    problemSolvingAbility: number | null
    innovationCapability: number | null
    projectManagement: number | null
    teamLeadership: number | null
    clientManagement: number | null
    strategicThinking: number | null
    analyticalSkills: number | null
    domainExpertise: number | null
    regulatoryKnowledge: number | null
    marketUnderstanding: number | null
    competitorAwareness: number | null
    overallScore: number | null
  }

  export type ProfessionalAssessmentMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    technicalProficiency: number | null
    toolsAndTechnologies: string | null
    industryKnowledge: number | null
    problemSolvingAbility: number | null
    innovationCapability: number | null
    projectManagement: number | null
    teamLeadership: number | null
    clientManagement: number | null
    strategicThinking: number | null
    analyticalSkills: number | null
    domainExpertise: number | null
    regulatoryKnowledge: number | null
    marketUnderstanding: number | null
    competitorAwareness: number | null
    overallScore: number | null
    skillGaps: string | null
    developmentPlan: string | null
    assessmentNotes: string | null
  }

  export type ProfessionalAssessmentMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    assessmentType: string | null
    assessmentDate: Date | null
    technicalProficiency: number | null
    toolsAndTechnologies: string | null
    industryKnowledge: number | null
    problemSolvingAbility: number | null
    innovationCapability: number | null
    projectManagement: number | null
    teamLeadership: number | null
    clientManagement: number | null
    strategicThinking: number | null
    analyticalSkills: number | null
    domainExpertise: number | null
    regulatoryKnowledge: number | null
    marketUnderstanding: number | null
    competitorAwareness: number | null
    overallScore: number | null
    skillGaps: string | null
    developmentPlan: string | null
    assessmentNotes: string | null
  }

  export type ProfessionalAssessmentCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    assessmentType: number
    assessmentDate: number
    technicalProficiency: number
    toolsAndTechnologies: number
    industryKnowledge: number
    problemSolvingAbility: number
    innovationCapability: number
    projectManagement: number
    teamLeadership: number
    clientManagement: number
    strategicThinking: number
    analyticalSkills: number
    domainExpertise: number
    regulatoryKnowledge: number
    marketUnderstanding: number
    competitorAwareness: number
    overallScore: number
    skillGaps: number
    developmentPlan: number
    assessmentNotes: number
    _all: number
  }


  export type ProfessionalAssessmentAvgAggregateInputType = {
    technicalProficiency?: true
    industryKnowledge?: true
    problemSolvingAbility?: true
    innovationCapability?: true
    projectManagement?: true
    teamLeadership?: true
    clientManagement?: true
    strategicThinking?: true
    analyticalSkills?: true
    domainExpertise?: true
    regulatoryKnowledge?: true
    marketUnderstanding?: true
    competitorAwareness?: true
    overallScore?: true
  }

  export type ProfessionalAssessmentSumAggregateInputType = {
    technicalProficiency?: true
    industryKnowledge?: true
    problemSolvingAbility?: true
    innovationCapability?: true
    projectManagement?: true
    teamLeadership?: true
    clientManagement?: true
    strategicThinking?: true
    analyticalSkills?: true
    domainExpertise?: true
    regulatoryKnowledge?: true
    marketUnderstanding?: true
    competitorAwareness?: true
    overallScore?: true
  }

  export type ProfessionalAssessmentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    technicalProficiency?: true
    toolsAndTechnologies?: true
    industryKnowledge?: true
    problemSolvingAbility?: true
    innovationCapability?: true
    projectManagement?: true
    teamLeadership?: true
    clientManagement?: true
    strategicThinking?: true
    analyticalSkills?: true
    domainExpertise?: true
    regulatoryKnowledge?: true
    marketUnderstanding?: true
    competitorAwareness?: true
    overallScore?: true
    skillGaps?: true
    developmentPlan?: true
    assessmentNotes?: true
  }

  export type ProfessionalAssessmentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    technicalProficiency?: true
    toolsAndTechnologies?: true
    industryKnowledge?: true
    problemSolvingAbility?: true
    innovationCapability?: true
    projectManagement?: true
    teamLeadership?: true
    clientManagement?: true
    strategicThinking?: true
    analyticalSkills?: true
    domainExpertise?: true
    regulatoryKnowledge?: true
    marketUnderstanding?: true
    competitorAwareness?: true
    overallScore?: true
    skillGaps?: true
    developmentPlan?: true
    assessmentNotes?: true
  }

  export type ProfessionalAssessmentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    assessmentType?: true
    assessmentDate?: true
    technicalProficiency?: true
    toolsAndTechnologies?: true
    industryKnowledge?: true
    problemSolvingAbility?: true
    innovationCapability?: true
    projectManagement?: true
    teamLeadership?: true
    clientManagement?: true
    strategicThinking?: true
    analyticalSkills?: true
    domainExpertise?: true
    regulatoryKnowledge?: true
    marketUnderstanding?: true
    competitorAwareness?: true
    overallScore?: true
    skillGaps?: true
    developmentPlan?: true
    assessmentNotes?: true
    _all?: true
  }

  export type ProfessionalAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalAssessment to aggregate.
     */
    where?: ProfessionalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalAssessments to fetch.
     */
    orderBy?: ProfessionalAssessmentOrderByWithRelationInput | ProfessionalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionalAssessments
    **/
    _count?: true | ProfessionalAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionalAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionalAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalAssessmentMaxAggregateInputType
  }

  export type GetProfessionalAssessmentAggregateType<T extends ProfessionalAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionalAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionalAssessment[P]>
      : GetScalarType<T[P], AggregateProfessionalAssessment[P]>
  }




  export type ProfessionalAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalAssessmentWhereInput
    orderBy?: ProfessionalAssessmentOrderByWithAggregationInput | ProfessionalAssessmentOrderByWithAggregationInput[]
    by: ProfessionalAssessmentScalarFieldEnum[] | ProfessionalAssessmentScalarFieldEnum
    having?: ProfessionalAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalAssessmentCountAggregateInputType | true
    _avg?: ProfessionalAssessmentAvgAggregateInputType
    _sum?: ProfessionalAssessmentSumAggregateInputType
    _min?: ProfessionalAssessmentMinAggregateInputType
    _max?: ProfessionalAssessmentMaxAggregateInputType
  }

  export type ProfessionalAssessmentGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    assessmentType: string
    assessmentDate: Date
    technicalProficiency: number | null
    toolsAndTechnologies: string | null
    industryKnowledge: number | null
    problemSolvingAbility: number | null
    innovationCapability: number | null
    projectManagement: number | null
    teamLeadership: number | null
    clientManagement: number | null
    strategicThinking: number | null
    analyticalSkills: number | null
    domainExpertise: number | null
    regulatoryKnowledge: number | null
    marketUnderstanding: number | null
    competitorAwareness: number | null
    overallScore: number
    skillGaps: string | null
    developmentPlan: string | null
    assessmentNotes: string | null
    _count: ProfessionalAssessmentCountAggregateOutputType | null
    _avg: ProfessionalAssessmentAvgAggregateOutputType | null
    _sum: ProfessionalAssessmentSumAggregateOutputType | null
    _min: ProfessionalAssessmentMinAggregateOutputType | null
    _max: ProfessionalAssessmentMaxAggregateOutputType | null
  }

  type GetProfessionalAssessmentGroupByPayload<T extends ProfessionalAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    technicalProficiency?: boolean
    toolsAndTechnologies?: boolean
    industryKnowledge?: boolean
    problemSolvingAbility?: boolean
    innovationCapability?: boolean
    projectManagement?: boolean
    teamLeadership?: boolean
    clientManagement?: boolean
    strategicThinking?: boolean
    analyticalSkills?: boolean
    domainExpertise?: boolean
    regulatoryKnowledge?: boolean
    marketUnderstanding?: boolean
    competitorAwareness?: boolean
    overallScore?: boolean
    skillGaps?: boolean
    developmentPlan?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalAssessment"]>

  export type ProfessionalAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    technicalProficiency?: boolean
    toolsAndTechnologies?: boolean
    industryKnowledge?: boolean
    problemSolvingAbility?: boolean
    innovationCapability?: boolean
    projectManagement?: boolean
    teamLeadership?: boolean
    clientManagement?: boolean
    strategicThinking?: boolean
    analyticalSkills?: boolean
    domainExpertise?: boolean
    regulatoryKnowledge?: boolean
    marketUnderstanding?: boolean
    competitorAwareness?: boolean
    overallScore?: boolean
    skillGaps?: boolean
    developmentPlan?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalAssessment"]>

  export type ProfessionalAssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    technicalProficiency?: boolean
    toolsAndTechnologies?: boolean
    industryKnowledge?: boolean
    problemSolvingAbility?: boolean
    innovationCapability?: boolean
    projectManagement?: boolean
    teamLeadership?: boolean
    clientManagement?: boolean
    strategicThinking?: boolean
    analyticalSkills?: boolean
    domainExpertise?: boolean
    regulatoryKnowledge?: boolean
    marketUnderstanding?: boolean
    competitorAwareness?: boolean
    overallScore?: boolean
    skillGaps?: boolean
    developmentPlan?: boolean
    assessmentNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalAssessment"]>

  export type ProfessionalAssessmentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    assessmentType?: boolean
    assessmentDate?: boolean
    technicalProficiency?: boolean
    toolsAndTechnologies?: boolean
    industryKnowledge?: boolean
    problemSolvingAbility?: boolean
    innovationCapability?: boolean
    projectManagement?: boolean
    teamLeadership?: boolean
    clientManagement?: boolean
    strategicThinking?: boolean
    analyticalSkills?: boolean
    domainExpertise?: boolean
    regulatoryKnowledge?: boolean
    marketUnderstanding?: boolean
    competitorAwareness?: boolean
    overallScore?: boolean
    skillGaps?: boolean
    developmentPlan?: boolean
    assessmentNotes?: boolean
  }

  export type ProfessionalAssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "assessmentType" | "assessmentDate" | "technicalProficiency" | "toolsAndTechnologies" | "industryKnowledge" | "problemSolvingAbility" | "innovationCapability" | "projectManagement" | "teamLeadership" | "clientManagement" | "strategicThinking" | "analyticalSkills" | "domainExpertise" | "regulatoryKnowledge" | "marketUnderstanding" | "competitorAwareness" | "overallScore" | "skillGaps" | "developmentPlan" | "assessmentNotes", ExtArgs["result"]["professionalAssessment"]>
  export type ProfessionalAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type ProfessionalAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type ProfessionalAssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $ProfessionalAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionalAssessment"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      assessmentType: string
      assessmentDate: Date
      technicalProficiency: number | null
      toolsAndTechnologies: string | null
      industryKnowledge: number | null
      problemSolvingAbility: number | null
      innovationCapability: number | null
      projectManagement: number | null
      teamLeadership: number | null
      clientManagement: number | null
      strategicThinking: number | null
      analyticalSkills: number | null
      domainExpertise: number | null
      regulatoryKnowledge: number | null
      marketUnderstanding: number | null
      competitorAwareness: number | null
      overallScore: number
      skillGaps: string | null
      developmentPlan: string | null
      assessmentNotes: string | null
    }, ExtArgs["result"]["professionalAssessment"]>
    composites: {}
  }

  type ProfessionalAssessmentGetPayload<S extends boolean | null | undefined | ProfessionalAssessmentDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalAssessmentPayload, S>

  type ProfessionalAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionalAssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionalAssessmentCountAggregateInputType | true
    }

  export interface ProfessionalAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionalAssessment'], meta: { name: 'ProfessionalAssessment' } }
    /**
     * Find zero or one ProfessionalAssessment that matches the filter.
     * @param {ProfessionalAssessmentFindUniqueArgs} args - Arguments to find a ProfessionalAssessment
     * @example
     * // Get one ProfessionalAssessment
     * const professionalAssessment = await prisma.professionalAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionalAssessmentFindUniqueArgs>(args: SelectSubset<T, ProfessionalAssessmentFindUniqueArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessionalAssessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionalAssessmentFindUniqueOrThrowArgs} args - Arguments to find a ProfessionalAssessment
     * @example
     * // Get one ProfessionalAssessment
     * const professionalAssessment = await prisma.professionalAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionalAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionalAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAssessmentFindFirstArgs} args - Arguments to find a ProfessionalAssessment
     * @example
     * // Get one ProfessionalAssessment
     * const professionalAssessment = await prisma.professionalAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionalAssessmentFindFirstArgs>(args?: SelectSubset<T, ProfessionalAssessmentFindFirstArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAssessmentFindFirstOrThrowArgs} args - Arguments to find a ProfessionalAssessment
     * @example
     * // Get one ProfessionalAssessment
     * const professionalAssessment = await prisma.professionalAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionalAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionalAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessionalAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionalAssessments
     * const professionalAssessments = await prisma.professionalAssessment.findMany()
     * 
     * // Get first 10 ProfessionalAssessments
     * const professionalAssessments = await prisma.professionalAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalAssessmentWithIdOnly = await prisma.professionalAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionalAssessmentFindManyArgs>(args?: SelectSubset<T, ProfessionalAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessionalAssessment.
     * @param {ProfessionalAssessmentCreateArgs} args - Arguments to create a ProfessionalAssessment.
     * @example
     * // Create one ProfessionalAssessment
     * const ProfessionalAssessment = await prisma.professionalAssessment.create({
     *   data: {
     *     // ... data to create a ProfessionalAssessment
     *   }
     * })
     * 
     */
    create<T extends ProfessionalAssessmentCreateArgs>(args: SelectSubset<T, ProfessionalAssessmentCreateArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessionalAssessments.
     * @param {ProfessionalAssessmentCreateManyArgs} args - Arguments to create many ProfessionalAssessments.
     * @example
     * // Create many ProfessionalAssessments
     * const professionalAssessment = await prisma.professionalAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionalAssessmentCreateManyArgs>(args?: SelectSubset<T, ProfessionalAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionalAssessments and returns the data saved in the database.
     * @param {ProfessionalAssessmentCreateManyAndReturnArgs} args - Arguments to create many ProfessionalAssessments.
     * @example
     * // Create many ProfessionalAssessments
     * const professionalAssessment = await prisma.professionalAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionalAssessments and only return the `id`
     * const professionalAssessmentWithIdOnly = await prisma.professionalAssessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionalAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionalAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessionalAssessment.
     * @param {ProfessionalAssessmentDeleteArgs} args - Arguments to delete one ProfessionalAssessment.
     * @example
     * // Delete one ProfessionalAssessment
     * const ProfessionalAssessment = await prisma.professionalAssessment.delete({
     *   where: {
     *     // ... filter to delete one ProfessionalAssessment
     *   }
     * })
     * 
     */
    delete<T extends ProfessionalAssessmentDeleteArgs>(args: SelectSubset<T, ProfessionalAssessmentDeleteArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessionalAssessment.
     * @param {ProfessionalAssessmentUpdateArgs} args - Arguments to update one ProfessionalAssessment.
     * @example
     * // Update one ProfessionalAssessment
     * const professionalAssessment = await prisma.professionalAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionalAssessmentUpdateArgs>(args: SelectSubset<T, ProfessionalAssessmentUpdateArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessionalAssessments.
     * @param {ProfessionalAssessmentDeleteManyArgs} args - Arguments to filter ProfessionalAssessments to delete.
     * @example
     * // Delete a few ProfessionalAssessments
     * const { count } = await prisma.professionalAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionalAssessmentDeleteManyArgs>(args?: SelectSubset<T, ProfessionalAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionalAssessments
     * const professionalAssessment = await prisma.professionalAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionalAssessmentUpdateManyArgs>(args: SelectSubset<T, ProfessionalAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalAssessments and returns the data updated in the database.
     * @param {ProfessionalAssessmentUpdateManyAndReturnArgs} args - Arguments to update many ProfessionalAssessments.
     * @example
     * // Update many ProfessionalAssessments
     * const professionalAssessment = await prisma.professionalAssessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessionalAssessments and only return the `id`
     * const professionalAssessmentWithIdOnly = await prisma.professionalAssessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionalAssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionalAssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessionalAssessment.
     * @param {ProfessionalAssessmentUpsertArgs} args - Arguments to update or create a ProfessionalAssessment.
     * @example
     * // Update or create a ProfessionalAssessment
     * const professionalAssessment = await prisma.professionalAssessment.upsert({
     *   create: {
     *     // ... data to create a ProfessionalAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionalAssessment we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionalAssessmentUpsertArgs>(args: SelectSubset<T, ProfessionalAssessmentUpsertArgs<ExtArgs>>): Prisma__ProfessionalAssessmentClient<$Result.GetResult<Prisma.$ProfessionalAssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessionalAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAssessmentCountArgs} args - Arguments to filter ProfessionalAssessments to count.
     * @example
     * // Count the number of ProfessionalAssessments
     * const count = await prisma.professionalAssessment.count({
     *   where: {
     *     // ... the filter for the ProfessionalAssessments we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalAssessmentCountArgs>(
      args?: Subset<T, ProfessionalAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalAssessmentAggregateArgs>(args: Subset<T, ProfessionalAssessmentAggregateArgs>): Prisma.PrismaPromise<GetProfessionalAssessmentAggregateType<T>>

    /**
     * Group by ProfessionalAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionalAssessment model
   */
  readonly fields: ProfessionalAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionalAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessionalAssessment model
   */
  interface ProfessionalAssessmentFieldRefs {
    readonly id: FieldRef<"ProfessionalAssessment", 'String'>
    readonly createdAt: FieldRef<"ProfessionalAssessment", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfessionalAssessment", 'DateTime'>
    readonly candidateId: FieldRef<"ProfessionalAssessment", 'String'>
    readonly assessmentType: FieldRef<"ProfessionalAssessment", 'String'>
    readonly assessmentDate: FieldRef<"ProfessionalAssessment", 'DateTime'>
    readonly technicalProficiency: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly toolsAndTechnologies: FieldRef<"ProfessionalAssessment", 'String'>
    readonly industryKnowledge: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly problemSolvingAbility: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly innovationCapability: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly projectManagement: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly teamLeadership: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly clientManagement: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly strategicThinking: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly analyticalSkills: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly domainExpertise: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly regulatoryKnowledge: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly marketUnderstanding: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly competitorAwareness: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly overallScore: FieldRef<"ProfessionalAssessment", 'Float'>
    readonly skillGaps: FieldRef<"ProfessionalAssessment", 'String'>
    readonly developmentPlan: FieldRef<"ProfessionalAssessment", 'String'>
    readonly assessmentNotes: FieldRef<"ProfessionalAssessment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProfessionalAssessment findUnique
   */
  export type ProfessionalAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalAssessment to fetch.
     */
    where: ProfessionalAssessmentWhereUniqueInput
  }

  /**
   * ProfessionalAssessment findUniqueOrThrow
   */
  export type ProfessionalAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalAssessment to fetch.
     */
    where: ProfessionalAssessmentWhereUniqueInput
  }

  /**
   * ProfessionalAssessment findFirst
   */
  export type ProfessionalAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalAssessment to fetch.
     */
    where?: ProfessionalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalAssessments to fetch.
     */
    orderBy?: ProfessionalAssessmentOrderByWithRelationInput | ProfessionalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalAssessments.
     */
    cursor?: ProfessionalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalAssessments.
     */
    distinct?: ProfessionalAssessmentScalarFieldEnum | ProfessionalAssessmentScalarFieldEnum[]
  }

  /**
   * ProfessionalAssessment findFirstOrThrow
   */
  export type ProfessionalAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalAssessment to fetch.
     */
    where?: ProfessionalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalAssessments to fetch.
     */
    orderBy?: ProfessionalAssessmentOrderByWithRelationInput | ProfessionalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalAssessments.
     */
    cursor?: ProfessionalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalAssessments.
     */
    distinct?: ProfessionalAssessmentScalarFieldEnum | ProfessionalAssessmentScalarFieldEnum[]
  }

  /**
   * ProfessionalAssessment findMany
   */
  export type ProfessionalAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalAssessments to fetch.
     */
    where?: ProfessionalAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalAssessments to fetch.
     */
    orderBy?: ProfessionalAssessmentOrderByWithRelationInput | ProfessionalAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionalAssessments.
     */
    cursor?: ProfessionalAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalAssessments.
     */
    skip?: number
    distinct?: ProfessionalAssessmentScalarFieldEnum | ProfessionalAssessmentScalarFieldEnum[]
  }

  /**
   * ProfessionalAssessment create
   */
  export type ProfessionalAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionalAssessment.
     */
    data: XOR<ProfessionalAssessmentCreateInput, ProfessionalAssessmentUncheckedCreateInput>
  }

  /**
   * ProfessionalAssessment createMany
   */
  export type ProfessionalAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionalAssessments.
     */
    data: ProfessionalAssessmentCreateManyInput | ProfessionalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionalAssessment createManyAndReturn
   */
  export type ProfessionalAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many ProfessionalAssessments.
     */
    data: ProfessionalAssessmentCreateManyInput | ProfessionalAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionalAssessment update
   */
  export type ProfessionalAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionalAssessment.
     */
    data: XOR<ProfessionalAssessmentUpdateInput, ProfessionalAssessmentUncheckedUpdateInput>
    /**
     * Choose, which ProfessionalAssessment to update.
     */
    where: ProfessionalAssessmentWhereUniqueInput
  }

  /**
   * ProfessionalAssessment updateMany
   */
  export type ProfessionalAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionalAssessments.
     */
    data: XOR<ProfessionalAssessmentUpdateManyMutationInput, ProfessionalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalAssessments to update
     */
    where?: ProfessionalAssessmentWhereInput
    /**
     * Limit how many ProfessionalAssessments to update.
     */
    limit?: number
  }

  /**
   * ProfessionalAssessment updateManyAndReturn
   */
  export type ProfessionalAssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * The data used to update ProfessionalAssessments.
     */
    data: XOR<ProfessionalAssessmentUpdateManyMutationInput, ProfessionalAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalAssessments to update
     */
    where?: ProfessionalAssessmentWhereInput
    /**
     * Limit how many ProfessionalAssessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionalAssessment upsert
   */
  export type ProfessionalAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionalAssessment to update in case it exists.
     */
    where: ProfessionalAssessmentWhereUniqueInput
    /**
     * In case the ProfessionalAssessment found by the `where` argument doesn't exist, create a new ProfessionalAssessment with this data.
     */
    create: XOR<ProfessionalAssessmentCreateInput, ProfessionalAssessmentUncheckedCreateInput>
    /**
     * In case the ProfessionalAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalAssessmentUpdateInput, ProfessionalAssessmentUncheckedUpdateInput>
  }

  /**
   * ProfessionalAssessment delete
   */
  export type ProfessionalAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
    /**
     * Filter which ProfessionalAssessment to delete.
     */
    where: ProfessionalAssessmentWhereUniqueInput
  }

  /**
   * ProfessionalAssessment deleteMany
   */
  export type ProfessionalAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalAssessments to delete
     */
    where?: ProfessionalAssessmentWhereInput
    /**
     * Limit how many ProfessionalAssessments to delete.
     */
    limit?: number
  }

  /**
   * ProfessionalAssessment without action
   */
  export type ProfessionalAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalAssessment
     */
    select?: ProfessionalAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalAssessment
     */
    omit?: ProfessionalAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model InterviewSession
   */

  export type AggregateInterviewSession = {
    _count: InterviewSessionCountAggregateOutputType | null
    _avg: InterviewSessionAvgAggregateOutputType | null
    _sum: InterviewSessionSumAggregateOutputType | null
    _min: InterviewSessionMinAggregateOutputType | null
    _max: InterviewSessionMaxAggregateOutputType | null
  }

  export type InterviewSessionAvgAggregateOutputType = {
    interviewRound: number | null
    duration: number | null
    technicalScore: number | null
    culturalFitScore: number | null
    communicationScore: number | null
    motivationScore: number | null
    overallScore: number | null
  }

  export type InterviewSessionSumAggregateOutputType = {
    interviewRound: number | null
    duration: number | null
    technicalScore: number | null
    culturalFitScore: number | null
    communicationScore: number | null
    motivationScore: number | null
    overallScore: number | null
  }

  export type InterviewSessionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    applicationId: string | null
    interviewType: string | null
    interviewRound: number | null
    interviewDate: Date | null
    duration: number | null
    technicalScore: number | null
    culturalFitScore: number | null
    communicationScore: number | null
    motivationScore: number | null
    overallScore: number | null
    strengths: string | null
    weaknesses: string | null
    recommendations: string | null
    interviewNotes: string | null
    recommendation: string | null
    interviewerName: string | null
    interviewerRole: string | null
  }

  export type InterviewSessionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    applicationId: string | null
    interviewType: string | null
    interviewRound: number | null
    interviewDate: Date | null
    duration: number | null
    technicalScore: number | null
    culturalFitScore: number | null
    communicationScore: number | null
    motivationScore: number | null
    overallScore: number | null
    strengths: string | null
    weaknesses: string | null
    recommendations: string | null
    interviewNotes: string | null
    recommendation: string | null
    interviewerName: string | null
    interviewerRole: string | null
  }

  export type InterviewSessionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    applicationId: number
    interviewType: number
    interviewRound: number
    interviewDate: number
    duration: number
    technicalScore: number
    culturalFitScore: number
    communicationScore: number
    motivationScore: number
    overallScore: number
    strengths: number
    weaknesses: number
    recommendations: number
    interviewNotes: number
    recommendation: number
    interviewerName: number
    interviewerRole: number
    _all: number
  }


  export type InterviewSessionAvgAggregateInputType = {
    interviewRound?: true
    duration?: true
    technicalScore?: true
    culturalFitScore?: true
    communicationScore?: true
    motivationScore?: true
    overallScore?: true
  }

  export type InterviewSessionSumAggregateInputType = {
    interviewRound?: true
    duration?: true
    technicalScore?: true
    culturalFitScore?: true
    communicationScore?: true
    motivationScore?: true
    overallScore?: true
  }

  export type InterviewSessionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    applicationId?: true
    interviewType?: true
    interviewRound?: true
    interviewDate?: true
    duration?: true
    technicalScore?: true
    culturalFitScore?: true
    communicationScore?: true
    motivationScore?: true
    overallScore?: true
    strengths?: true
    weaknesses?: true
    recommendations?: true
    interviewNotes?: true
    recommendation?: true
    interviewerName?: true
    interviewerRole?: true
  }

  export type InterviewSessionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    applicationId?: true
    interviewType?: true
    interviewRound?: true
    interviewDate?: true
    duration?: true
    technicalScore?: true
    culturalFitScore?: true
    communicationScore?: true
    motivationScore?: true
    overallScore?: true
    strengths?: true
    weaknesses?: true
    recommendations?: true
    interviewNotes?: true
    recommendation?: true
    interviewerName?: true
    interviewerRole?: true
  }

  export type InterviewSessionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    applicationId?: true
    interviewType?: true
    interviewRound?: true
    interviewDate?: true
    duration?: true
    technicalScore?: true
    culturalFitScore?: true
    communicationScore?: true
    motivationScore?: true
    overallScore?: true
    strengths?: true
    weaknesses?: true
    recommendations?: true
    interviewNotes?: true
    recommendation?: true
    interviewerName?: true
    interviewerRole?: true
    _all?: true
  }

  export type InterviewSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InterviewSession to aggregate.
     */
    where?: InterviewSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewSessions to fetch.
     */
    orderBy?: InterviewSessionOrderByWithRelationInput | InterviewSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterviewSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InterviewSessions
    **/
    _count?: true | InterviewSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterviewSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterviewSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterviewSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterviewSessionMaxAggregateInputType
  }

  export type GetInterviewSessionAggregateType<T extends InterviewSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateInterviewSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterviewSession[P]>
      : GetScalarType<T[P], AggregateInterviewSession[P]>
  }




  export type InterviewSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewSessionWhereInput
    orderBy?: InterviewSessionOrderByWithAggregationInput | InterviewSessionOrderByWithAggregationInput[]
    by: InterviewSessionScalarFieldEnum[] | InterviewSessionScalarFieldEnum
    having?: InterviewSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterviewSessionCountAggregateInputType | true
    _avg?: InterviewSessionAvgAggregateInputType
    _sum?: InterviewSessionSumAggregateInputType
    _min?: InterviewSessionMinAggregateInputType
    _max?: InterviewSessionMaxAggregateInputType
  }

  export type InterviewSessionGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    applicationId: string | null
    interviewType: string
    interviewRound: number
    interviewDate: Date
    duration: number | null
    technicalScore: number | null
    culturalFitScore: number | null
    communicationScore: number | null
    motivationScore: number | null
    overallScore: number
    strengths: string | null
    weaknesses: string | null
    recommendations: string | null
    interviewNotes: string | null
    recommendation: string
    interviewerName: string | null
    interviewerRole: string | null
    _count: InterviewSessionCountAggregateOutputType | null
    _avg: InterviewSessionAvgAggregateOutputType | null
    _sum: InterviewSessionSumAggregateOutputType | null
    _min: InterviewSessionMinAggregateOutputType | null
    _max: InterviewSessionMaxAggregateOutputType | null
  }

  type GetInterviewSessionGroupByPayload<T extends InterviewSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterviewSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterviewSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterviewSessionGroupByOutputType[P]>
            : GetScalarType<T[P], InterviewSessionGroupByOutputType[P]>
        }
      >
    >


  export type InterviewSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    applicationId?: boolean
    interviewType?: boolean
    interviewRound?: boolean
    interviewDate?: boolean
    duration?: boolean
    technicalScore?: boolean
    culturalFitScore?: boolean
    communicationScore?: boolean
    motivationScore?: boolean
    overallScore?: boolean
    strengths?: boolean
    weaknesses?: boolean
    recommendations?: boolean
    interviewNotes?: boolean
    recommendation?: boolean
    interviewerName?: boolean
    interviewerRole?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    application?: boolean | InterviewSession$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["interviewSession"]>

  export type InterviewSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    applicationId?: boolean
    interviewType?: boolean
    interviewRound?: boolean
    interviewDate?: boolean
    duration?: boolean
    technicalScore?: boolean
    culturalFitScore?: boolean
    communicationScore?: boolean
    motivationScore?: boolean
    overallScore?: boolean
    strengths?: boolean
    weaknesses?: boolean
    recommendations?: boolean
    interviewNotes?: boolean
    recommendation?: boolean
    interviewerName?: boolean
    interviewerRole?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    application?: boolean | InterviewSession$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["interviewSession"]>

  export type InterviewSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    applicationId?: boolean
    interviewType?: boolean
    interviewRound?: boolean
    interviewDate?: boolean
    duration?: boolean
    technicalScore?: boolean
    culturalFitScore?: boolean
    communicationScore?: boolean
    motivationScore?: boolean
    overallScore?: boolean
    strengths?: boolean
    weaknesses?: boolean
    recommendations?: boolean
    interviewNotes?: boolean
    recommendation?: boolean
    interviewerName?: boolean
    interviewerRole?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    application?: boolean | InterviewSession$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["interviewSession"]>

  export type InterviewSessionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    applicationId?: boolean
    interviewType?: boolean
    interviewRound?: boolean
    interviewDate?: boolean
    duration?: boolean
    technicalScore?: boolean
    culturalFitScore?: boolean
    communicationScore?: boolean
    motivationScore?: boolean
    overallScore?: boolean
    strengths?: boolean
    weaknesses?: boolean
    recommendations?: boolean
    interviewNotes?: boolean
    recommendation?: boolean
    interviewerName?: boolean
    interviewerRole?: boolean
  }

  export type InterviewSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "applicationId" | "interviewType" | "interviewRound" | "interviewDate" | "duration" | "technicalScore" | "culturalFitScore" | "communicationScore" | "motivationScore" | "overallScore" | "strengths" | "weaknesses" | "recommendations" | "interviewNotes" | "recommendation" | "interviewerName" | "interviewerRole", ExtArgs["result"]["interviewSession"]>
  export type InterviewSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    application?: boolean | InterviewSession$applicationArgs<ExtArgs>
  }
  export type InterviewSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    application?: boolean | InterviewSession$applicationArgs<ExtArgs>
  }
  export type InterviewSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    application?: boolean | InterviewSession$applicationArgs<ExtArgs>
  }

  export type $InterviewSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InterviewSession"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
      application: Prisma.$ApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      applicationId: string | null
      interviewType: string
      interviewRound: number
      interviewDate: Date
      duration: number | null
      technicalScore: number | null
      culturalFitScore: number | null
      communicationScore: number | null
      motivationScore: number | null
      overallScore: number
      strengths: string | null
      weaknesses: string | null
      recommendations: string | null
      interviewNotes: string | null
      recommendation: string
      interviewerName: string | null
      interviewerRole: string | null
    }, ExtArgs["result"]["interviewSession"]>
    composites: {}
  }

  type InterviewSessionGetPayload<S extends boolean | null | undefined | InterviewSessionDefaultArgs> = $Result.GetResult<Prisma.$InterviewSessionPayload, S>

  type InterviewSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InterviewSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InterviewSessionCountAggregateInputType | true
    }

  export interface InterviewSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InterviewSession'], meta: { name: 'InterviewSession' } }
    /**
     * Find zero or one InterviewSession that matches the filter.
     * @param {InterviewSessionFindUniqueArgs} args - Arguments to find a InterviewSession
     * @example
     * // Get one InterviewSession
     * const interviewSession = await prisma.interviewSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterviewSessionFindUniqueArgs>(args: SelectSubset<T, InterviewSessionFindUniqueArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InterviewSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InterviewSessionFindUniqueOrThrowArgs} args - Arguments to find a InterviewSession
     * @example
     * // Get one InterviewSession
     * const interviewSession = await prisma.interviewSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterviewSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, InterviewSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InterviewSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewSessionFindFirstArgs} args - Arguments to find a InterviewSession
     * @example
     * // Get one InterviewSession
     * const interviewSession = await prisma.interviewSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterviewSessionFindFirstArgs>(args?: SelectSubset<T, InterviewSessionFindFirstArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InterviewSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewSessionFindFirstOrThrowArgs} args - Arguments to find a InterviewSession
     * @example
     * // Get one InterviewSession
     * const interviewSession = await prisma.interviewSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterviewSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, InterviewSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InterviewSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InterviewSessions
     * const interviewSessions = await prisma.interviewSession.findMany()
     * 
     * // Get first 10 InterviewSessions
     * const interviewSessions = await prisma.interviewSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interviewSessionWithIdOnly = await prisma.interviewSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterviewSessionFindManyArgs>(args?: SelectSubset<T, InterviewSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InterviewSession.
     * @param {InterviewSessionCreateArgs} args - Arguments to create a InterviewSession.
     * @example
     * // Create one InterviewSession
     * const InterviewSession = await prisma.interviewSession.create({
     *   data: {
     *     // ... data to create a InterviewSession
     *   }
     * })
     * 
     */
    create<T extends InterviewSessionCreateArgs>(args: SelectSubset<T, InterviewSessionCreateArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InterviewSessions.
     * @param {InterviewSessionCreateManyArgs} args - Arguments to create many InterviewSessions.
     * @example
     * // Create many InterviewSessions
     * const interviewSession = await prisma.interviewSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterviewSessionCreateManyArgs>(args?: SelectSubset<T, InterviewSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InterviewSessions and returns the data saved in the database.
     * @param {InterviewSessionCreateManyAndReturnArgs} args - Arguments to create many InterviewSessions.
     * @example
     * // Create many InterviewSessions
     * const interviewSession = await prisma.interviewSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InterviewSessions and only return the `id`
     * const interviewSessionWithIdOnly = await prisma.interviewSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InterviewSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, InterviewSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InterviewSession.
     * @param {InterviewSessionDeleteArgs} args - Arguments to delete one InterviewSession.
     * @example
     * // Delete one InterviewSession
     * const InterviewSession = await prisma.interviewSession.delete({
     *   where: {
     *     // ... filter to delete one InterviewSession
     *   }
     * })
     * 
     */
    delete<T extends InterviewSessionDeleteArgs>(args: SelectSubset<T, InterviewSessionDeleteArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InterviewSession.
     * @param {InterviewSessionUpdateArgs} args - Arguments to update one InterviewSession.
     * @example
     * // Update one InterviewSession
     * const interviewSession = await prisma.interviewSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterviewSessionUpdateArgs>(args: SelectSubset<T, InterviewSessionUpdateArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InterviewSessions.
     * @param {InterviewSessionDeleteManyArgs} args - Arguments to filter InterviewSessions to delete.
     * @example
     * // Delete a few InterviewSessions
     * const { count } = await prisma.interviewSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterviewSessionDeleteManyArgs>(args?: SelectSubset<T, InterviewSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InterviewSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InterviewSessions
     * const interviewSession = await prisma.interviewSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterviewSessionUpdateManyArgs>(args: SelectSubset<T, InterviewSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InterviewSessions and returns the data updated in the database.
     * @param {InterviewSessionUpdateManyAndReturnArgs} args - Arguments to update many InterviewSessions.
     * @example
     * // Update many InterviewSessions
     * const interviewSession = await prisma.interviewSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InterviewSessions and only return the `id`
     * const interviewSessionWithIdOnly = await prisma.interviewSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InterviewSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, InterviewSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InterviewSession.
     * @param {InterviewSessionUpsertArgs} args - Arguments to update or create a InterviewSession.
     * @example
     * // Update or create a InterviewSession
     * const interviewSession = await prisma.interviewSession.upsert({
     *   create: {
     *     // ... data to create a InterviewSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InterviewSession we want to update
     *   }
     * })
     */
    upsert<T extends InterviewSessionUpsertArgs>(args: SelectSubset<T, InterviewSessionUpsertArgs<ExtArgs>>): Prisma__InterviewSessionClient<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InterviewSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewSessionCountArgs} args - Arguments to filter InterviewSessions to count.
     * @example
     * // Count the number of InterviewSessions
     * const count = await prisma.interviewSession.count({
     *   where: {
     *     // ... the filter for the InterviewSessions we want to count
     *   }
     * })
    **/
    count<T extends InterviewSessionCountArgs>(
      args?: Subset<T, InterviewSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterviewSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InterviewSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterviewSessionAggregateArgs>(args: Subset<T, InterviewSessionAggregateArgs>): Prisma.PrismaPromise<GetInterviewSessionAggregateType<T>>

    /**
     * Group by InterviewSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterviewSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterviewSessionGroupByArgs['orderBy'] }
        : { orderBy?: InterviewSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterviewSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterviewSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InterviewSession model
   */
  readonly fields: InterviewSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InterviewSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterviewSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    application<T extends InterviewSession$applicationArgs<ExtArgs> = {}>(args?: Subset<T, InterviewSession$applicationArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InterviewSession model
   */
  interface InterviewSessionFieldRefs {
    readonly id: FieldRef<"InterviewSession", 'String'>
    readonly createdAt: FieldRef<"InterviewSession", 'DateTime'>
    readonly updatedAt: FieldRef<"InterviewSession", 'DateTime'>
    readonly candidateId: FieldRef<"InterviewSession", 'String'>
    readonly applicationId: FieldRef<"InterviewSession", 'String'>
    readonly interviewType: FieldRef<"InterviewSession", 'String'>
    readonly interviewRound: FieldRef<"InterviewSession", 'Int'>
    readonly interviewDate: FieldRef<"InterviewSession", 'DateTime'>
    readonly duration: FieldRef<"InterviewSession", 'Int'>
    readonly technicalScore: FieldRef<"InterviewSession", 'Float'>
    readonly culturalFitScore: FieldRef<"InterviewSession", 'Float'>
    readonly communicationScore: FieldRef<"InterviewSession", 'Float'>
    readonly motivationScore: FieldRef<"InterviewSession", 'Float'>
    readonly overallScore: FieldRef<"InterviewSession", 'Float'>
    readonly strengths: FieldRef<"InterviewSession", 'String'>
    readonly weaknesses: FieldRef<"InterviewSession", 'String'>
    readonly recommendations: FieldRef<"InterviewSession", 'String'>
    readonly interviewNotes: FieldRef<"InterviewSession", 'String'>
    readonly recommendation: FieldRef<"InterviewSession", 'String'>
    readonly interviewerName: FieldRef<"InterviewSession", 'String'>
    readonly interviewerRole: FieldRef<"InterviewSession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InterviewSession findUnique
   */
  export type InterviewSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * Filter, which InterviewSession to fetch.
     */
    where: InterviewSessionWhereUniqueInput
  }

  /**
   * InterviewSession findUniqueOrThrow
   */
  export type InterviewSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * Filter, which InterviewSession to fetch.
     */
    where: InterviewSessionWhereUniqueInput
  }

  /**
   * InterviewSession findFirst
   */
  export type InterviewSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * Filter, which InterviewSession to fetch.
     */
    where?: InterviewSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewSessions to fetch.
     */
    orderBy?: InterviewSessionOrderByWithRelationInput | InterviewSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InterviewSessions.
     */
    cursor?: InterviewSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InterviewSessions.
     */
    distinct?: InterviewSessionScalarFieldEnum | InterviewSessionScalarFieldEnum[]
  }

  /**
   * InterviewSession findFirstOrThrow
   */
  export type InterviewSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * Filter, which InterviewSession to fetch.
     */
    where?: InterviewSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewSessions to fetch.
     */
    orderBy?: InterviewSessionOrderByWithRelationInput | InterviewSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InterviewSessions.
     */
    cursor?: InterviewSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InterviewSessions.
     */
    distinct?: InterviewSessionScalarFieldEnum | InterviewSessionScalarFieldEnum[]
  }

  /**
   * InterviewSession findMany
   */
  export type InterviewSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * Filter, which InterviewSessions to fetch.
     */
    where?: InterviewSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewSessions to fetch.
     */
    orderBy?: InterviewSessionOrderByWithRelationInput | InterviewSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InterviewSessions.
     */
    cursor?: InterviewSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewSessions.
     */
    skip?: number
    distinct?: InterviewSessionScalarFieldEnum | InterviewSessionScalarFieldEnum[]
  }

  /**
   * InterviewSession create
   */
  export type InterviewSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a InterviewSession.
     */
    data: XOR<InterviewSessionCreateInput, InterviewSessionUncheckedCreateInput>
  }

  /**
   * InterviewSession createMany
   */
  export type InterviewSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InterviewSessions.
     */
    data: InterviewSessionCreateManyInput | InterviewSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InterviewSession createManyAndReturn
   */
  export type InterviewSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * The data used to create many InterviewSessions.
     */
    data: InterviewSessionCreateManyInput | InterviewSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InterviewSession update
   */
  export type InterviewSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a InterviewSession.
     */
    data: XOR<InterviewSessionUpdateInput, InterviewSessionUncheckedUpdateInput>
    /**
     * Choose, which InterviewSession to update.
     */
    where: InterviewSessionWhereUniqueInput
  }

  /**
   * InterviewSession updateMany
   */
  export type InterviewSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InterviewSessions.
     */
    data: XOR<InterviewSessionUpdateManyMutationInput, InterviewSessionUncheckedUpdateManyInput>
    /**
     * Filter which InterviewSessions to update
     */
    where?: InterviewSessionWhereInput
    /**
     * Limit how many InterviewSessions to update.
     */
    limit?: number
  }

  /**
   * InterviewSession updateManyAndReturn
   */
  export type InterviewSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * The data used to update InterviewSessions.
     */
    data: XOR<InterviewSessionUpdateManyMutationInput, InterviewSessionUncheckedUpdateManyInput>
    /**
     * Filter which InterviewSessions to update
     */
    where?: InterviewSessionWhereInput
    /**
     * Limit how many InterviewSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InterviewSession upsert
   */
  export type InterviewSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the InterviewSession to update in case it exists.
     */
    where: InterviewSessionWhereUniqueInput
    /**
     * In case the InterviewSession found by the `where` argument doesn't exist, create a new InterviewSession with this data.
     */
    create: XOR<InterviewSessionCreateInput, InterviewSessionUncheckedCreateInput>
    /**
     * In case the InterviewSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterviewSessionUpdateInput, InterviewSessionUncheckedUpdateInput>
  }

  /**
   * InterviewSession delete
   */
  export type InterviewSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    /**
     * Filter which InterviewSession to delete.
     */
    where: InterviewSessionWhereUniqueInput
  }

  /**
   * InterviewSession deleteMany
   */
  export type InterviewSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InterviewSessions to delete
     */
    where?: InterviewSessionWhereInput
    /**
     * Limit how many InterviewSessions to delete.
     */
    limit?: number
  }

  /**
   * InterviewSession.application
   */
  export type InterviewSession$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
  }

  /**
   * InterviewSession without action
   */
  export type InterviewSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
  }


  /**
   * Model OnboardingRecord
   */

  export type AggregateOnboardingRecord = {
    _count: OnboardingRecordCountAggregateOutputType | null
    _avg: OnboardingRecordAvgAggregateOutputType | null
    _sum: OnboardingRecordSumAggregateOutputType | null
    _min: OnboardingRecordMinAggregateOutputType | null
    _max: OnboardingRecordMaxAggregateOutputType | null
  }

  export type OnboardingRecordAvgAggregateOutputType = {
    culturalAdaptationScore: number | null
  }

  export type OnboardingRecordSumAggregateOutputType = {
    culturalAdaptationScore: number | null
  }

  export type OnboardingRecordMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    companyId: string | null
    startDate: Date | null
    onboardingStatus: string | null
    documentationComplete: boolean | null
    systemAccessGranted: boolean | null
    trainingCompleted: boolean | null
    culturalOrientationDone: boolean | null
    mentorAssigned: boolean | null
    culturalAdaptationScore: number | null
    integrationChallenges: string | null
    supportProvided: string | null
    expectedCompletionDate: Date | null
    actualCompletionDate: Date | null
    onboardingNotes: string | null
  }

  export type OnboardingRecordMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    companyId: string | null
    startDate: Date | null
    onboardingStatus: string | null
    documentationComplete: boolean | null
    systemAccessGranted: boolean | null
    trainingCompleted: boolean | null
    culturalOrientationDone: boolean | null
    mentorAssigned: boolean | null
    culturalAdaptationScore: number | null
    integrationChallenges: string | null
    supportProvided: string | null
    expectedCompletionDate: Date | null
    actualCompletionDate: Date | null
    onboardingNotes: string | null
  }

  export type OnboardingRecordCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    companyId: number
    startDate: number
    onboardingStatus: number
    documentationComplete: number
    systemAccessGranted: number
    trainingCompleted: number
    culturalOrientationDone: number
    mentorAssigned: number
    culturalAdaptationScore: number
    integrationChallenges: number
    supportProvided: number
    expectedCompletionDate: number
    actualCompletionDate: number
    onboardingNotes: number
    _all: number
  }


  export type OnboardingRecordAvgAggregateInputType = {
    culturalAdaptationScore?: true
  }

  export type OnboardingRecordSumAggregateInputType = {
    culturalAdaptationScore?: true
  }

  export type OnboardingRecordMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    startDate?: true
    onboardingStatus?: true
    documentationComplete?: true
    systemAccessGranted?: true
    trainingCompleted?: true
    culturalOrientationDone?: true
    mentorAssigned?: true
    culturalAdaptationScore?: true
    integrationChallenges?: true
    supportProvided?: true
    expectedCompletionDate?: true
    actualCompletionDate?: true
    onboardingNotes?: true
  }

  export type OnboardingRecordMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    startDate?: true
    onboardingStatus?: true
    documentationComplete?: true
    systemAccessGranted?: true
    trainingCompleted?: true
    culturalOrientationDone?: true
    mentorAssigned?: true
    culturalAdaptationScore?: true
    integrationChallenges?: true
    supportProvided?: true
    expectedCompletionDate?: true
    actualCompletionDate?: true
    onboardingNotes?: true
  }

  export type OnboardingRecordCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    startDate?: true
    onboardingStatus?: true
    documentationComplete?: true
    systemAccessGranted?: true
    trainingCompleted?: true
    culturalOrientationDone?: true
    mentorAssigned?: true
    culturalAdaptationScore?: true
    integrationChallenges?: true
    supportProvided?: true
    expectedCompletionDate?: true
    actualCompletionDate?: true
    onboardingNotes?: true
    _all?: true
  }

  export type OnboardingRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OnboardingRecord to aggregate.
     */
    where?: OnboardingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnboardingRecords to fetch.
     */
    orderBy?: OnboardingRecordOrderByWithRelationInput | OnboardingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OnboardingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnboardingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnboardingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OnboardingRecords
    **/
    _count?: true | OnboardingRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OnboardingRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OnboardingRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OnboardingRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OnboardingRecordMaxAggregateInputType
  }

  export type GetOnboardingRecordAggregateType<T extends OnboardingRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateOnboardingRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOnboardingRecord[P]>
      : GetScalarType<T[P], AggregateOnboardingRecord[P]>
  }




  export type OnboardingRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OnboardingRecordWhereInput
    orderBy?: OnboardingRecordOrderByWithAggregationInput | OnboardingRecordOrderByWithAggregationInput[]
    by: OnboardingRecordScalarFieldEnum[] | OnboardingRecordScalarFieldEnum
    having?: OnboardingRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OnboardingRecordCountAggregateInputType | true
    _avg?: OnboardingRecordAvgAggregateInputType
    _sum?: OnboardingRecordSumAggregateInputType
    _min?: OnboardingRecordMinAggregateInputType
    _max?: OnboardingRecordMaxAggregateInputType
  }

  export type OnboardingRecordGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    companyId: string
    startDate: Date
    onboardingStatus: string
    documentationComplete: boolean
    systemAccessGranted: boolean
    trainingCompleted: boolean
    culturalOrientationDone: boolean
    mentorAssigned: boolean
    culturalAdaptationScore: number | null
    integrationChallenges: string | null
    supportProvided: string | null
    expectedCompletionDate: Date | null
    actualCompletionDate: Date | null
    onboardingNotes: string | null
    _count: OnboardingRecordCountAggregateOutputType | null
    _avg: OnboardingRecordAvgAggregateOutputType | null
    _sum: OnboardingRecordSumAggregateOutputType | null
    _min: OnboardingRecordMinAggregateOutputType | null
    _max: OnboardingRecordMaxAggregateOutputType | null
  }

  type GetOnboardingRecordGroupByPayload<T extends OnboardingRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OnboardingRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OnboardingRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OnboardingRecordGroupByOutputType[P]>
            : GetScalarType<T[P], OnboardingRecordGroupByOutputType[P]>
        }
      >
    >


  export type OnboardingRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    startDate?: boolean
    onboardingStatus?: boolean
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: boolean
    integrationChallenges?: boolean
    supportProvided?: boolean
    expectedCompletionDate?: boolean
    actualCompletionDate?: boolean
    onboardingNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["onboardingRecord"]>

  export type OnboardingRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    startDate?: boolean
    onboardingStatus?: boolean
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: boolean
    integrationChallenges?: boolean
    supportProvided?: boolean
    expectedCompletionDate?: boolean
    actualCompletionDate?: boolean
    onboardingNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["onboardingRecord"]>

  export type OnboardingRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    startDate?: boolean
    onboardingStatus?: boolean
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: boolean
    integrationChallenges?: boolean
    supportProvided?: boolean
    expectedCompletionDate?: boolean
    actualCompletionDate?: boolean
    onboardingNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["onboardingRecord"]>

  export type OnboardingRecordSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    startDate?: boolean
    onboardingStatus?: boolean
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: boolean
    integrationChallenges?: boolean
    supportProvided?: boolean
    expectedCompletionDate?: boolean
    actualCompletionDate?: boolean
    onboardingNotes?: boolean
  }

  export type OnboardingRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "companyId" | "startDate" | "onboardingStatus" | "documentationComplete" | "systemAccessGranted" | "trainingCompleted" | "culturalOrientationDone" | "mentorAssigned" | "culturalAdaptationScore" | "integrationChallenges" | "supportProvided" | "expectedCompletionDate" | "actualCompletionDate" | "onboardingNotes", ExtArgs["result"]["onboardingRecord"]>
  export type OnboardingRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type OnboardingRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type OnboardingRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $OnboardingRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OnboardingRecord"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      companyId: string
      startDate: Date
      onboardingStatus: string
      documentationComplete: boolean
      systemAccessGranted: boolean
      trainingCompleted: boolean
      culturalOrientationDone: boolean
      mentorAssigned: boolean
      culturalAdaptationScore: number | null
      integrationChallenges: string | null
      supportProvided: string | null
      expectedCompletionDate: Date | null
      actualCompletionDate: Date | null
      onboardingNotes: string | null
    }, ExtArgs["result"]["onboardingRecord"]>
    composites: {}
  }

  type OnboardingRecordGetPayload<S extends boolean | null | undefined | OnboardingRecordDefaultArgs> = $Result.GetResult<Prisma.$OnboardingRecordPayload, S>

  type OnboardingRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OnboardingRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OnboardingRecordCountAggregateInputType | true
    }

  export interface OnboardingRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OnboardingRecord'], meta: { name: 'OnboardingRecord' } }
    /**
     * Find zero or one OnboardingRecord that matches the filter.
     * @param {OnboardingRecordFindUniqueArgs} args - Arguments to find a OnboardingRecord
     * @example
     * // Get one OnboardingRecord
     * const onboardingRecord = await prisma.onboardingRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OnboardingRecordFindUniqueArgs>(args: SelectSubset<T, OnboardingRecordFindUniqueArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OnboardingRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OnboardingRecordFindUniqueOrThrowArgs} args - Arguments to find a OnboardingRecord
     * @example
     * // Get one OnboardingRecord
     * const onboardingRecord = await prisma.onboardingRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OnboardingRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, OnboardingRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OnboardingRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnboardingRecordFindFirstArgs} args - Arguments to find a OnboardingRecord
     * @example
     * // Get one OnboardingRecord
     * const onboardingRecord = await prisma.onboardingRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OnboardingRecordFindFirstArgs>(args?: SelectSubset<T, OnboardingRecordFindFirstArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OnboardingRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnboardingRecordFindFirstOrThrowArgs} args - Arguments to find a OnboardingRecord
     * @example
     * // Get one OnboardingRecord
     * const onboardingRecord = await prisma.onboardingRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OnboardingRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, OnboardingRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OnboardingRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnboardingRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OnboardingRecords
     * const onboardingRecords = await prisma.onboardingRecord.findMany()
     * 
     * // Get first 10 OnboardingRecords
     * const onboardingRecords = await prisma.onboardingRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const onboardingRecordWithIdOnly = await prisma.onboardingRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OnboardingRecordFindManyArgs>(args?: SelectSubset<T, OnboardingRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OnboardingRecord.
     * @param {OnboardingRecordCreateArgs} args - Arguments to create a OnboardingRecord.
     * @example
     * // Create one OnboardingRecord
     * const OnboardingRecord = await prisma.onboardingRecord.create({
     *   data: {
     *     // ... data to create a OnboardingRecord
     *   }
     * })
     * 
     */
    create<T extends OnboardingRecordCreateArgs>(args: SelectSubset<T, OnboardingRecordCreateArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OnboardingRecords.
     * @param {OnboardingRecordCreateManyArgs} args - Arguments to create many OnboardingRecords.
     * @example
     * // Create many OnboardingRecords
     * const onboardingRecord = await prisma.onboardingRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OnboardingRecordCreateManyArgs>(args?: SelectSubset<T, OnboardingRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OnboardingRecords and returns the data saved in the database.
     * @param {OnboardingRecordCreateManyAndReturnArgs} args - Arguments to create many OnboardingRecords.
     * @example
     * // Create many OnboardingRecords
     * const onboardingRecord = await prisma.onboardingRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OnboardingRecords and only return the `id`
     * const onboardingRecordWithIdOnly = await prisma.onboardingRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OnboardingRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, OnboardingRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OnboardingRecord.
     * @param {OnboardingRecordDeleteArgs} args - Arguments to delete one OnboardingRecord.
     * @example
     * // Delete one OnboardingRecord
     * const OnboardingRecord = await prisma.onboardingRecord.delete({
     *   where: {
     *     // ... filter to delete one OnboardingRecord
     *   }
     * })
     * 
     */
    delete<T extends OnboardingRecordDeleteArgs>(args: SelectSubset<T, OnboardingRecordDeleteArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OnboardingRecord.
     * @param {OnboardingRecordUpdateArgs} args - Arguments to update one OnboardingRecord.
     * @example
     * // Update one OnboardingRecord
     * const onboardingRecord = await prisma.onboardingRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OnboardingRecordUpdateArgs>(args: SelectSubset<T, OnboardingRecordUpdateArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OnboardingRecords.
     * @param {OnboardingRecordDeleteManyArgs} args - Arguments to filter OnboardingRecords to delete.
     * @example
     * // Delete a few OnboardingRecords
     * const { count } = await prisma.onboardingRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OnboardingRecordDeleteManyArgs>(args?: SelectSubset<T, OnboardingRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OnboardingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnboardingRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OnboardingRecords
     * const onboardingRecord = await prisma.onboardingRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OnboardingRecordUpdateManyArgs>(args: SelectSubset<T, OnboardingRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OnboardingRecords and returns the data updated in the database.
     * @param {OnboardingRecordUpdateManyAndReturnArgs} args - Arguments to update many OnboardingRecords.
     * @example
     * // Update many OnboardingRecords
     * const onboardingRecord = await prisma.onboardingRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OnboardingRecords and only return the `id`
     * const onboardingRecordWithIdOnly = await prisma.onboardingRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OnboardingRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, OnboardingRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OnboardingRecord.
     * @param {OnboardingRecordUpsertArgs} args - Arguments to update or create a OnboardingRecord.
     * @example
     * // Update or create a OnboardingRecord
     * const onboardingRecord = await prisma.onboardingRecord.upsert({
     *   create: {
     *     // ... data to create a OnboardingRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OnboardingRecord we want to update
     *   }
     * })
     */
    upsert<T extends OnboardingRecordUpsertArgs>(args: SelectSubset<T, OnboardingRecordUpsertArgs<ExtArgs>>): Prisma__OnboardingRecordClient<$Result.GetResult<Prisma.$OnboardingRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OnboardingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnboardingRecordCountArgs} args - Arguments to filter OnboardingRecords to count.
     * @example
     * // Count the number of OnboardingRecords
     * const count = await prisma.onboardingRecord.count({
     *   where: {
     *     // ... the filter for the OnboardingRecords we want to count
     *   }
     * })
    **/
    count<T extends OnboardingRecordCountArgs>(
      args?: Subset<T, OnboardingRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OnboardingRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OnboardingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnboardingRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OnboardingRecordAggregateArgs>(args: Subset<T, OnboardingRecordAggregateArgs>): Prisma.PrismaPromise<GetOnboardingRecordAggregateType<T>>

    /**
     * Group by OnboardingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnboardingRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OnboardingRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OnboardingRecordGroupByArgs['orderBy'] }
        : { orderBy?: OnboardingRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OnboardingRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOnboardingRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OnboardingRecord model
   */
  readonly fields: OnboardingRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OnboardingRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OnboardingRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OnboardingRecord model
   */
  interface OnboardingRecordFieldRefs {
    readonly id: FieldRef<"OnboardingRecord", 'String'>
    readonly createdAt: FieldRef<"OnboardingRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"OnboardingRecord", 'DateTime'>
    readonly candidateId: FieldRef<"OnboardingRecord", 'String'>
    readonly companyId: FieldRef<"OnboardingRecord", 'String'>
    readonly startDate: FieldRef<"OnboardingRecord", 'DateTime'>
    readonly onboardingStatus: FieldRef<"OnboardingRecord", 'String'>
    readonly documentationComplete: FieldRef<"OnboardingRecord", 'Boolean'>
    readonly systemAccessGranted: FieldRef<"OnboardingRecord", 'Boolean'>
    readonly trainingCompleted: FieldRef<"OnboardingRecord", 'Boolean'>
    readonly culturalOrientationDone: FieldRef<"OnboardingRecord", 'Boolean'>
    readonly mentorAssigned: FieldRef<"OnboardingRecord", 'Boolean'>
    readonly culturalAdaptationScore: FieldRef<"OnboardingRecord", 'Float'>
    readonly integrationChallenges: FieldRef<"OnboardingRecord", 'String'>
    readonly supportProvided: FieldRef<"OnboardingRecord", 'String'>
    readonly expectedCompletionDate: FieldRef<"OnboardingRecord", 'DateTime'>
    readonly actualCompletionDate: FieldRef<"OnboardingRecord", 'DateTime'>
    readonly onboardingNotes: FieldRef<"OnboardingRecord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OnboardingRecord findUnique
   */
  export type OnboardingRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * Filter, which OnboardingRecord to fetch.
     */
    where: OnboardingRecordWhereUniqueInput
  }

  /**
   * OnboardingRecord findUniqueOrThrow
   */
  export type OnboardingRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * Filter, which OnboardingRecord to fetch.
     */
    where: OnboardingRecordWhereUniqueInput
  }

  /**
   * OnboardingRecord findFirst
   */
  export type OnboardingRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * Filter, which OnboardingRecord to fetch.
     */
    where?: OnboardingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnboardingRecords to fetch.
     */
    orderBy?: OnboardingRecordOrderByWithRelationInput | OnboardingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OnboardingRecords.
     */
    cursor?: OnboardingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnboardingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnboardingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OnboardingRecords.
     */
    distinct?: OnboardingRecordScalarFieldEnum | OnboardingRecordScalarFieldEnum[]
  }

  /**
   * OnboardingRecord findFirstOrThrow
   */
  export type OnboardingRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * Filter, which OnboardingRecord to fetch.
     */
    where?: OnboardingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnboardingRecords to fetch.
     */
    orderBy?: OnboardingRecordOrderByWithRelationInput | OnboardingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OnboardingRecords.
     */
    cursor?: OnboardingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnboardingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnboardingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OnboardingRecords.
     */
    distinct?: OnboardingRecordScalarFieldEnum | OnboardingRecordScalarFieldEnum[]
  }

  /**
   * OnboardingRecord findMany
   */
  export type OnboardingRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * Filter, which OnboardingRecords to fetch.
     */
    where?: OnboardingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnboardingRecords to fetch.
     */
    orderBy?: OnboardingRecordOrderByWithRelationInput | OnboardingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OnboardingRecords.
     */
    cursor?: OnboardingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnboardingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnboardingRecords.
     */
    skip?: number
    distinct?: OnboardingRecordScalarFieldEnum | OnboardingRecordScalarFieldEnum[]
  }

  /**
   * OnboardingRecord create
   */
  export type OnboardingRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a OnboardingRecord.
     */
    data: XOR<OnboardingRecordCreateInput, OnboardingRecordUncheckedCreateInput>
  }

  /**
   * OnboardingRecord createMany
   */
  export type OnboardingRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OnboardingRecords.
     */
    data: OnboardingRecordCreateManyInput | OnboardingRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OnboardingRecord createManyAndReturn
   */
  export type OnboardingRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * The data used to create many OnboardingRecords.
     */
    data: OnboardingRecordCreateManyInput | OnboardingRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OnboardingRecord update
   */
  export type OnboardingRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a OnboardingRecord.
     */
    data: XOR<OnboardingRecordUpdateInput, OnboardingRecordUncheckedUpdateInput>
    /**
     * Choose, which OnboardingRecord to update.
     */
    where: OnboardingRecordWhereUniqueInput
  }

  /**
   * OnboardingRecord updateMany
   */
  export type OnboardingRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OnboardingRecords.
     */
    data: XOR<OnboardingRecordUpdateManyMutationInput, OnboardingRecordUncheckedUpdateManyInput>
    /**
     * Filter which OnboardingRecords to update
     */
    where?: OnboardingRecordWhereInput
    /**
     * Limit how many OnboardingRecords to update.
     */
    limit?: number
  }

  /**
   * OnboardingRecord updateManyAndReturn
   */
  export type OnboardingRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * The data used to update OnboardingRecords.
     */
    data: XOR<OnboardingRecordUpdateManyMutationInput, OnboardingRecordUncheckedUpdateManyInput>
    /**
     * Filter which OnboardingRecords to update
     */
    where?: OnboardingRecordWhereInput
    /**
     * Limit how many OnboardingRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OnboardingRecord upsert
   */
  export type OnboardingRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the OnboardingRecord to update in case it exists.
     */
    where: OnboardingRecordWhereUniqueInput
    /**
     * In case the OnboardingRecord found by the `where` argument doesn't exist, create a new OnboardingRecord with this data.
     */
    create: XOR<OnboardingRecordCreateInput, OnboardingRecordUncheckedCreateInput>
    /**
     * In case the OnboardingRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OnboardingRecordUpdateInput, OnboardingRecordUncheckedUpdateInput>
  }

  /**
   * OnboardingRecord delete
   */
  export type OnboardingRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
    /**
     * Filter which OnboardingRecord to delete.
     */
    where: OnboardingRecordWhereUniqueInput
  }

  /**
   * OnboardingRecord deleteMany
   */
  export type OnboardingRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OnboardingRecords to delete
     */
    where?: OnboardingRecordWhereInput
    /**
     * Limit how many OnboardingRecords to delete.
     */
    limit?: number
  }

  /**
   * OnboardingRecord without action
   */
  export type OnboardingRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnboardingRecord
     */
    select?: OnboardingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnboardingRecord
     */
    omit?: OnboardingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OnboardingRecordInclude<ExtArgs> | null
  }


  /**
   * Model PerformanceReview
   */

  export type AggregatePerformanceReview = {
    _count: PerformanceReviewCountAggregateOutputType | null
    _avg: PerformanceReviewAvgAggregateOutputType | null
    _sum: PerformanceReviewSumAggregateOutputType | null
    _min: PerformanceReviewMinAggregateOutputType | null
    _max: PerformanceReviewMaxAggregateOutputType | null
  }

  export type PerformanceReviewAvgAggregateOutputType = {
    technicalPerformance: number | null
    culturalIntegration: number | null
    teamCollaboration: number | null
    communicationSkills: number | null
    goalAchievement: number | null
    overallPerformance: number | null
    culturalFitImprovement: number | null
    japaneseBusinessEtiquette: number | null
    teamHarmonyContribution: number | null
  }

  export type PerformanceReviewSumAggregateOutputType = {
    technicalPerformance: number | null
    culturalIntegration: number | null
    teamCollaboration: number | null
    communicationSkills: number | null
    goalAchievement: number | null
    overallPerformance: number | null
    culturalFitImprovement: number | null
    japaneseBusinessEtiquette: number | null
    teamHarmonyContribution: number | null
  }

  export type PerformanceReviewMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    companyId: string | null
    reviewPeriod: string | null
    reviewDate: Date | null
    reviewType: string | null
    technicalPerformance: number | null
    culturalIntegration: number | null
    teamCollaboration: number | null
    communicationSkills: number | null
    goalAchievement: number | null
    overallPerformance: number | null
    culturalFitImprovement: number | null
    japaneseBusinessEtiquette: number | null
    teamHarmonyContribution: number | null
    achievements: string | null
    areasForImprovement: string | null
    developmentGoals: string | null
    reviewerName: string | null
    reviewerRole: string | null
    reviewNotes: string | null
  }

  export type PerformanceReviewMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    companyId: string | null
    reviewPeriod: string | null
    reviewDate: Date | null
    reviewType: string | null
    technicalPerformance: number | null
    culturalIntegration: number | null
    teamCollaboration: number | null
    communicationSkills: number | null
    goalAchievement: number | null
    overallPerformance: number | null
    culturalFitImprovement: number | null
    japaneseBusinessEtiquette: number | null
    teamHarmonyContribution: number | null
    achievements: string | null
    areasForImprovement: string | null
    developmentGoals: string | null
    reviewerName: string | null
    reviewerRole: string | null
    reviewNotes: string | null
  }

  export type PerformanceReviewCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    companyId: number
    reviewPeriod: number
    reviewDate: number
    reviewType: number
    technicalPerformance: number
    culturalIntegration: number
    teamCollaboration: number
    communicationSkills: number
    goalAchievement: number
    overallPerformance: number
    culturalFitImprovement: number
    japaneseBusinessEtiquette: number
    teamHarmonyContribution: number
    achievements: number
    areasForImprovement: number
    developmentGoals: number
    reviewerName: number
    reviewerRole: number
    reviewNotes: number
    _all: number
  }


  export type PerformanceReviewAvgAggregateInputType = {
    technicalPerformance?: true
    culturalIntegration?: true
    teamCollaboration?: true
    communicationSkills?: true
    goalAchievement?: true
    overallPerformance?: true
    culturalFitImprovement?: true
    japaneseBusinessEtiquette?: true
    teamHarmonyContribution?: true
  }

  export type PerformanceReviewSumAggregateInputType = {
    technicalPerformance?: true
    culturalIntegration?: true
    teamCollaboration?: true
    communicationSkills?: true
    goalAchievement?: true
    overallPerformance?: true
    culturalFitImprovement?: true
    japaneseBusinessEtiquette?: true
    teamHarmonyContribution?: true
  }

  export type PerformanceReviewMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    reviewPeriod?: true
    reviewDate?: true
    reviewType?: true
    technicalPerformance?: true
    culturalIntegration?: true
    teamCollaboration?: true
    communicationSkills?: true
    goalAchievement?: true
    overallPerformance?: true
    culturalFitImprovement?: true
    japaneseBusinessEtiquette?: true
    teamHarmonyContribution?: true
    achievements?: true
    areasForImprovement?: true
    developmentGoals?: true
    reviewerName?: true
    reviewerRole?: true
    reviewNotes?: true
  }

  export type PerformanceReviewMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    reviewPeriod?: true
    reviewDate?: true
    reviewType?: true
    technicalPerformance?: true
    culturalIntegration?: true
    teamCollaboration?: true
    communicationSkills?: true
    goalAchievement?: true
    overallPerformance?: true
    culturalFitImprovement?: true
    japaneseBusinessEtiquette?: true
    teamHarmonyContribution?: true
    achievements?: true
    areasForImprovement?: true
    developmentGoals?: true
    reviewerName?: true
    reviewerRole?: true
    reviewNotes?: true
  }

  export type PerformanceReviewCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    reviewPeriod?: true
    reviewDate?: true
    reviewType?: true
    technicalPerformance?: true
    culturalIntegration?: true
    teamCollaboration?: true
    communicationSkills?: true
    goalAchievement?: true
    overallPerformance?: true
    culturalFitImprovement?: true
    japaneseBusinessEtiquette?: true
    teamHarmonyContribution?: true
    achievements?: true
    areasForImprovement?: true
    developmentGoals?: true
    reviewerName?: true
    reviewerRole?: true
    reviewNotes?: true
    _all?: true
  }

  export type PerformanceReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceReview to aggregate.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformanceReviews
    **/
    _count?: true | PerformanceReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerformanceReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerformanceReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformanceReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformanceReviewMaxAggregateInputType
  }

  export type GetPerformanceReviewAggregateType<T extends PerformanceReviewAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformanceReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformanceReview[P]>
      : GetScalarType<T[P], AggregatePerformanceReview[P]>
  }




  export type PerformanceReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewWhereInput
    orderBy?: PerformanceReviewOrderByWithAggregationInput | PerformanceReviewOrderByWithAggregationInput[]
    by: PerformanceReviewScalarFieldEnum[] | PerformanceReviewScalarFieldEnum
    having?: PerformanceReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformanceReviewCountAggregateInputType | true
    _avg?: PerformanceReviewAvgAggregateInputType
    _sum?: PerformanceReviewSumAggregateInputType
    _min?: PerformanceReviewMinAggregateInputType
    _max?: PerformanceReviewMaxAggregateInputType
  }

  export type PerformanceReviewGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    companyId: string
    reviewPeriod: string
    reviewDate: Date
    reviewType: string
    technicalPerformance: number | null
    culturalIntegration: number | null
    teamCollaboration: number | null
    communicationSkills: number | null
    goalAchievement: number | null
    overallPerformance: number
    culturalFitImprovement: number | null
    japaneseBusinessEtiquette: number | null
    teamHarmonyContribution: number | null
    achievements: string | null
    areasForImprovement: string | null
    developmentGoals: string | null
    reviewerName: string | null
    reviewerRole: string | null
    reviewNotes: string | null
    _count: PerformanceReviewCountAggregateOutputType | null
    _avg: PerformanceReviewAvgAggregateOutputType | null
    _sum: PerformanceReviewSumAggregateOutputType | null
    _min: PerformanceReviewMinAggregateOutputType | null
    _max: PerformanceReviewMaxAggregateOutputType | null
  }

  type GetPerformanceReviewGroupByPayload<T extends PerformanceReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformanceReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformanceReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformanceReviewGroupByOutputType[P]>
            : GetScalarType<T[P], PerformanceReviewGroupByOutputType[P]>
        }
      >
    >


  export type PerformanceReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    reviewPeriod?: boolean
    reviewDate?: boolean
    reviewType?: boolean
    technicalPerformance?: boolean
    culturalIntegration?: boolean
    teamCollaboration?: boolean
    communicationSkills?: boolean
    goalAchievement?: boolean
    overallPerformance?: boolean
    culturalFitImprovement?: boolean
    japaneseBusinessEtiquette?: boolean
    teamHarmonyContribution?: boolean
    achievements?: boolean
    areasForImprovement?: boolean
    developmentGoals?: boolean
    reviewerName?: boolean
    reviewerRole?: boolean
    reviewNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReview"]>

  export type PerformanceReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    reviewPeriod?: boolean
    reviewDate?: boolean
    reviewType?: boolean
    technicalPerformance?: boolean
    culturalIntegration?: boolean
    teamCollaboration?: boolean
    communicationSkills?: boolean
    goalAchievement?: boolean
    overallPerformance?: boolean
    culturalFitImprovement?: boolean
    japaneseBusinessEtiquette?: boolean
    teamHarmonyContribution?: boolean
    achievements?: boolean
    areasForImprovement?: boolean
    developmentGoals?: boolean
    reviewerName?: boolean
    reviewerRole?: boolean
    reviewNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReview"]>

  export type PerformanceReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    reviewPeriod?: boolean
    reviewDate?: boolean
    reviewType?: boolean
    technicalPerformance?: boolean
    culturalIntegration?: boolean
    teamCollaboration?: boolean
    communicationSkills?: boolean
    goalAchievement?: boolean
    overallPerformance?: boolean
    culturalFitImprovement?: boolean
    japaneseBusinessEtiquette?: boolean
    teamHarmonyContribution?: boolean
    achievements?: boolean
    areasForImprovement?: boolean
    developmentGoals?: boolean
    reviewerName?: boolean
    reviewerRole?: boolean
    reviewNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReview"]>

  export type PerformanceReviewSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    reviewPeriod?: boolean
    reviewDate?: boolean
    reviewType?: boolean
    technicalPerformance?: boolean
    culturalIntegration?: boolean
    teamCollaboration?: boolean
    communicationSkills?: boolean
    goalAchievement?: boolean
    overallPerformance?: boolean
    culturalFitImprovement?: boolean
    japaneseBusinessEtiquette?: boolean
    teamHarmonyContribution?: boolean
    achievements?: boolean
    areasForImprovement?: boolean
    developmentGoals?: boolean
    reviewerName?: boolean
    reviewerRole?: boolean
    reviewNotes?: boolean
  }

  export type PerformanceReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "companyId" | "reviewPeriod" | "reviewDate" | "reviewType" | "technicalPerformance" | "culturalIntegration" | "teamCollaboration" | "communicationSkills" | "goalAchievement" | "overallPerformance" | "culturalFitImprovement" | "japaneseBusinessEtiquette" | "teamHarmonyContribution" | "achievements" | "areasForImprovement" | "developmentGoals" | "reviewerName" | "reviewerRole" | "reviewNotes", ExtArgs["result"]["performanceReview"]>
  export type PerformanceReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type PerformanceReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type PerformanceReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $PerformanceReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformanceReview"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      companyId: string
      reviewPeriod: string
      reviewDate: Date
      reviewType: string
      technicalPerformance: number | null
      culturalIntegration: number | null
      teamCollaboration: number | null
      communicationSkills: number | null
      goalAchievement: number | null
      overallPerformance: number
      culturalFitImprovement: number | null
      japaneseBusinessEtiquette: number | null
      teamHarmonyContribution: number | null
      achievements: string | null
      areasForImprovement: string | null
      developmentGoals: string | null
      reviewerName: string | null
      reviewerRole: string | null
      reviewNotes: string | null
    }, ExtArgs["result"]["performanceReview"]>
    composites: {}
  }

  type PerformanceReviewGetPayload<S extends boolean | null | undefined | PerformanceReviewDefaultArgs> = $Result.GetResult<Prisma.$PerformanceReviewPayload, S>

  type PerformanceReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerformanceReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerformanceReviewCountAggregateInputType | true
    }

  export interface PerformanceReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformanceReview'], meta: { name: 'PerformanceReview' } }
    /**
     * Find zero or one PerformanceReview that matches the filter.
     * @param {PerformanceReviewFindUniqueArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformanceReviewFindUniqueArgs>(args: SelectSubset<T, PerformanceReviewFindUniqueArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerformanceReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerformanceReviewFindUniqueOrThrowArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformanceReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformanceReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewFindFirstArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformanceReviewFindFirstArgs>(args?: SelectSubset<T, PerformanceReviewFindFirstArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewFindFirstOrThrowArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformanceReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformanceReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerformanceReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformanceReviews
     * const performanceReviews = await prisma.performanceReview.findMany()
     * 
     * // Get first 10 PerformanceReviews
     * const performanceReviews = await prisma.performanceReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performanceReviewWithIdOnly = await prisma.performanceReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformanceReviewFindManyArgs>(args?: SelectSubset<T, PerformanceReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerformanceReview.
     * @param {PerformanceReviewCreateArgs} args - Arguments to create a PerformanceReview.
     * @example
     * // Create one PerformanceReview
     * const PerformanceReview = await prisma.performanceReview.create({
     *   data: {
     *     // ... data to create a PerformanceReview
     *   }
     * })
     * 
     */
    create<T extends PerformanceReviewCreateArgs>(args: SelectSubset<T, PerformanceReviewCreateArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerformanceReviews.
     * @param {PerformanceReviewCreateManyArgs} args - Arguments to create many PerformanceReviews.
     * @example
     * // Create many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformanceReviewCreateManyArgs>(args?: SelectSubset<T, PerformanceReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformanceReviews and returns the data saved in the database.
     * @param {PerformanceReviewCreateManyAndReturnArgs} args - Arguments to create many PerformanceReviews.
     * @example
     * // Create many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformanceReviews and only return the `id`
     * const performanceReviewWithIdOnly = await prisma.performanceReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformanceReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformanceReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PerformanceReview.
     * @param {PerformanceReviewDeleteArgs} args - Arguments to delete one PerformanceReview.
     * @example
     * // Delete one PerformanceReview
     * const PerformanceReview = await prisma.performanceReview.delete({
     *   where: {
     *     // ... filter to delete one PerformanceReview
     *   }
     * })
     * 
     */
    delete<T extends PerformanceReviewDeleteArgs>(args: SelectSubset<T, PerformanceReviewDeleteArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerformanceReview.
     * @param {PerformanceReviewUpdateArgs} args - Arguments to update one PerformanceReview.
     * @example
     * // Update one PerformanceReview
     * const performanceReview = await prisma.performanceReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformanceReviewUpdateArgs>(args: SelectSubset<T, PerformanceReviewUpdateArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerformanceReviews.
     * @param {PerformanceReviewDeleteManyArgs} args - Arguments to filter PerformanceReviews to delete.
     * @example
     * // Delete a few PerformanceReviews
     * const { count } = await prisma.performanceReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformanceReviewDeleteManyArgs>(args?: SelectSubset<T, PerformanceReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformanceReviewUpdateManyArgs>(args: SelectSubset<T, PerformanceReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceReviews and returns the data updated in the database.
     * @param {PerformanceReviewUpdateManyAndReturnArgs} args - Arguments to update many PerformanceReviews.
     * @example
     * // Update many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PerformanceReviews and only return the `id`
     * const performanceReviewWithIdOnly = await prisma.performanceReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PerformanceReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, PerformanceReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PerformanceReview.
     * @param {PerformanceReviewUpsertArgs} args - Arguments to update or create a PerformanceReview.
     * @example
     * // Update or create a PerformanceReview
     * const performanceReview = await prisma.performanceReview.upsert({
     *   create: {
     *     // ... data to create a PerformanceReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformanceReview we want to update
     *   }
     * })
     */
    upsert<T extends PerformanceReviewUpsertArgs>(args: SelectSubset<T, PerformanceReviewUpsertArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerformanceReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCountArgs} args - Arguments to filter PerformanceReviews to count.
     * @example
     * // Count the number of PerformanceReviews
     * const count = await prisma.performanceReview.count({
     *   where: {
     *     // ... the filter for the PerformanceReviews we want to count
     *   }
     * })
    **/
    count<T extends PerformanceReviewCountArgs>(
      args?: Subset<T, PerformanceReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformanceReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformanceReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformanceReviewAggregateArgs>(args: Subset<T, PerformanceReviewAggregateArgs>): Prisma.PrismaPromise<GetPerformanceReviewAggregateType<T>>

    /**
     * Group by PerformanceReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformanceReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformanceReviewGroupByArgs['orderBy'] }
        : { orderBy?: PerformanceReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformanceReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformanceReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformanceReview model
   */
  readonly fields: PerformanceReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformanceReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformanceReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformanceReview model
   */
  interface PerformanceReviewFieldRefs {
    readonly id: FieldRef<"PerformanceReview", 'String'>
    readonly createdAt: FieldRef<"PerformanceReview", 'DateTime'>
    readonly updatedAt: FieldRef<"PerformanceReview", 'DateTime'>
    readonly candidateId: FieldRef<"PerformanceReview", 'String'>
    readonly companyId: FieldRef<"PerformanceReview", 'String'>
    readonly reviewPeriod: FieldRef<"PerformanceReview", 'String'>
    readonly reviewDate: FieldRef<"PerformanceReview", 'DateTime'>
    readonly reviewType: FieldRef<"PerformanceReview", 'String'>
    readonly technicalPerformance: FieldRef<"PerformanceReview", 'Float'>
    readonly culturalIntegration: FieldRef<"PerformanceReview", 'Float'>
    readonly teamCollaboration: FieldRef<"PerformanceReview", 'Float'>
    readonly communicationSkills: FieldRef<"PerformanceReview", 'Float'>
    readonly goalAchievement: FieldRef<"PerformanceReview", 'Float'>
    readonly overallPerformance: FieldRef<"PerformanceReview", 'Float'>
    readonly culturalFitImprovement: FieldRef<"PerformanceReview", 'Float'>
    readonly japaneseBusinessEtiquette: FieldRef<"PerformanceReview", 'Float'>
    readonly teamHarmonyContribution: FieldRef<"PerformanceReview", 'Float'>
    readonly achievements: FieldRef<"PerformanceReview", 'String'>
    readonly areasForImprovement: FieldRef<"PerformanceReview", 'String'>
    readonly developmentGoals: FieldRef<"PerformanceReview", 'String'>
    readonly reviewerName: FieldRef<"PerformanceReview", 'String'>
    readonly reviewerRole: FieldRef<"PerformanceReview", 'String'>
    readonly reviewNotes: FieldRef<"PerformanceReview", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PerformanceReview findUnique
   */
  export type PerformanceReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview findUniqueOrThrow
   */
  export type PerformanceReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview findFirst
   */
  export type PerformanceReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceReviews.
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceReviews.
     */
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * PerformanceReview findFirstOrThrow
   */
  export type PerformanceReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceReviews.
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceReviews.
     */
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * PerformanceReview findMany
   */
  export type PerformanceReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReviews to fetch.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformanceReviews.
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * PerformanceReview create
   */
  export type PerformanceReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformanceReview.
     */
    data: XOR<PerformanceReviewCreateInput, PerformanceReviewUncheckedCreateInput>
  }

  /**
   * PerformanceReview createMany
   */
  export type PerformanceReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformanceReviews.
     */
    data: PerformanceReviewCreateManyInput | PerformanceReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformanceReview createManyAndReturn
   */
  export type PerformanceReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * The data used to create many PerformanceReviews.
     */
    data: PerformanceReviewCreateManyInput | PerformanceReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceReview update
   */
  export type PerformanceReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformanceReview.
     */
    data: XOR<PerformanceReviewUpdateInput, PerformanceReviewUncheckedUpdateInput>
    /**
     * Choose, which PerformanceReview to update.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview updateMany
   */
  export type PerformanceReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformanceReviews.
     */
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceReviews to update
     */
    where?: PerformanceReviewWhereInput
    /**
     * Limit how many PerformanceReviews to update.
     */
    limit?: number
  }

  /**
   * PerformanceReview updateManyAndReturn
   */
  export type PerformanceReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * The data used to update PerformanceReviews.
     */
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceReviews to update
     */
    where?: PerformanceReviewWhereInput
    /**
     * Limit how many PerformanceReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceReview upsert
   */
  export type PerformanceReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformanceReview to update in case it exists.
     */
    where: PerformanceReviewWhereUniqueInput
    /**
     * In case the PerformanceReview found by the `where` argument doesn't exist, create a new PerformanceReview with this data.
     */
    create: XOR<PerformanceReviewCreateInput, PerformanceReviewUncheckedCreateInput>
    /**
     * In case the PerformanceReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformanceReviewUpdateInput, PerformanceReviewUncheckedUpdateInput>
  }

  /**
   * PerformanceReview delete
   */
  export type PerformanceReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter which PerformanceReview to delete.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview deleteMany
   */
  export type PerformanceReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceReviews to delete
     */
    where?: PerformanceReviewWhereInput
    /**
     * Limit how many PerformanceReviews to delete.
     */
    limit?: number
  }

  /**
   * PerformanceReview without action
   */
  export type PerformanceReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
  }


  /**
   * Model CandidateStatusHistory
   */

  export type AggregateCandidateStatusHistory = {
    _count: CandidateStatusHistoryCountAggregateOutputType | null
    _min: CandidateStatusHistoryMinAggregateOutputType | null
    _max: CandidateStatusHistoryMaxAggregateOutputType | null
  }

  export type CandidateStatusHistoryMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    candidateId: string | null
    previousStatus: $Enums.CandidateStatus | null
    newStatus: $Enums.CandidateStatus | null
    changeReason: string | null
    changedBy: string | null
    notes: string | null
  }

  export type CandidateStatusHistoryMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    candidateId: string | null
    previousStatus: $Enums.CandidateStatus | null
    newStatus: $Enums.CandidateStatus | null
    changeReason: string | null
    changedBy: string | null
    notes: string | null
  }

  export type CandidateStatusHistoryCountAggregateOutputType = {
    id: number
    createdAt: number
    candidateId: number
    previousStatus: number
    newStatus: number
    changeReason: number
    changedBy: number
    notes: number
    _all: number
  }


  export type CandidateStatusHistoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    candidateId?: true
    previousStatus?: true
    newStatus?: true
    changeReason?: true
    changedBy?: true
    notes?: true
  }

  export type CandidateStatusHistoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    candidateId?: true
    previousStatus?: true
    newStatus?: true
    changeReason?: true
    changedBy?: true
    notes?: true
  }

  export type CandidateStatusHistoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    candidateId?: true
    previousStatus?: true
    newStatus?: true
    changeReason?: true
    changedBy?: true
    notes?: true
    _all?: true
  }

  export type CandidateStatusHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateStatusHistory to aggregate.
     */
    where?: CandidateStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateStatusHistories to fetch.
     */
    orderBy?: CandidateStatusHistoryOrderByWithRelationInput | CandidateStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateStatusHistories
    **/
    _count?: true | CandidateStatusHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateStatusHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateStatusHistoryMaxAggregateInputType
  }

  export type GetCandidateStatusHistoryAggregateType<T extends CandidateStatusHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateStatusHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateStatusHistory[P]>
      : GetScalarType<T[P], AggregateCandidateStatusHistory[P]>
  }




  export type CandidateStatusHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateStatusHistoryWhereInput
    orderBy?: CandidateStatusHistoryOrderByWithAggregationInput | CandidateStatusHistoryOrderByWithAggregationInput[]
    by: CandidateStatusHistoryScalarFieldEnum[] | CandidateStatusHistoryScalarFieldEnum
    having?: CandidateStatusHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateStatusHistoryCountAggregateInputType | true
    _min?: CandidateStatusHistoryMinAggregateInputType
    _max?: CandidateStatusHistoryMaxAggregateInputType
  }

  export type CandidateStatusHistoryGroupByOutputType = {
    id: string
    createdAt: Date
    candidateId: string
    previousStatus: $Enums.CandidateStatus
    newStatus: $Enums.CandidateStatus
    changeReason: string | null
    changedBy: string | null
    notes: string | null
    _count: CandidateStatusHistoryCountAggregateOutputType | null
    _min: CandidateStatusHistoryMinAggregateOutputType | null
    _max: CandidateStatusHistoryMaxAggregateOutputType | null
  }

  type GetCandidateStatusHistoryGroupByPayload<T extends CandidateStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateStatusHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateStatusHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateStatusHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateStatusHistoryGroupByOutputType[P]>
        }
      >
    >


  export type CandidateStatusHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    candidateId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changeReason?: boolean
    changedBy?: boolean
    notes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateStatusHistory"]>

  export type CandidateStatusHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    candidateId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changeReason?: boolean
    changedBy?: boolean
    notes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateStatusHistory"]>

  export type CandidateStatusHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    candidateId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changeReason?: boolean
    changedBy?: boolean
    notes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateStatusHistory"]>

  export type CandidateStatusHistorySelectScalar = {
    id?: boolean
    createdAt?: boolean
    candidateId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changeReason?: boolean
    changedBy?: boolean
    notes?: boolean
  }

  export type CandidateStatusHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "candidateId" | "previousStatus" | "newStatus" | "changeReason" | "changedBy" | "notes", ExtArgs["result"]["candidateStatusHistory"]>
  export type CandidateStatusHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CandidateStatusHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CandidateStatusHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $CandidateStatusHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidateStatusHistory"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      candidateId: string
      previousStatus: $Enums.CandidateStatus
      newStatus: $Enums.CandidateStatus
      changeReason: string | null
      changedBy: string | null
      notes: string | null
    }, ExtArgs["result"]["candidateStatusHistory"]>
    composites: {}
  }

  type CandidateStatusHistoryGetPayload<S extends boolean | null | undefined | CandidateStatusHistoryDefaultArgs> = $Result.GetResult<Prisma.$CandidateStatusHistoryPayload, S>

  type CandidateStatusHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateStatusHistoryCountAggregateInputType | true
    }

  export interface CandidateStatusHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidateStatusHistory'], meta: { name: 'CandidateStatusHistory' } }
    /**
     * Find zero or one CandidateStatusHistory that matches the filter.
     * @param {CandidateStatusHistoryFindUniqueArgs} args - Arguments to find a CandidateStatusHistory
     * @example
     * // Get one CandidateStatusHistory
     * const candidateStatusHistory = await prisma.candidateStatusHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateStatusHistoryFindUniqueArgs>(args: SelectSubset<T, CandidateStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CandidateStatusHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a CandidateStatusHistory
     * @example
     * // Get one CandidateStatusHistory
     * const candidateStatusHistory = await prisma.candidateStatusHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateStatusHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateStatusHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateStatusHistoryFindFirstArgs} args - Arguments to find a CandidateStatusHistory
     * @example
     * // Get one CandidateStatusHistory
     * const candidateStatusHistory = await prisma.candidateStatusHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateStatusHistoryFindFirstArgs>(args?: SelectSubset<T, CandidateStatusHistoryFindFirstArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateStatusHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a CandidateStatusHistory
     * @example
     * // Get one CandidateStatusHistory
     * const candidateStatusHistory = await prisma.candidateStatusHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateStatusHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CandidateStatusHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateStatusHistories
     * const candidateStatusHistories = await prisma.candidateStatusHistory.findMany()
     * 
     * // Get first 10 CandidateStatusHistories
     * const candidateStatusHistories = await prisma.candidateStatusHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateStatusHistoryWithIdOnly = await prisma.candidateStatusHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateStatusHistoryFindManyArgs>(args?: SelectSubset<T, CandidateStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CandidateStatusHistory.
     * @param {CandidateStatusHistoryCreateArgs} args - Arguments to create a CandidateStatusHistory.
     * @example
     * // Create one CandidateStatusHistory
     * const CandidateStatusHistory = await prisma.candidateStatusHistory.create({
     *   data: {
     *     // ... data to create a CandidateStatusHistory
     *   }
     * })
     * 
     */
    create<T extends CandidateStatusHistoryCreateArgs>(args: SelectSubset<T, CandidateStatusHistoryCreateArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CandidateStatusHistories.
     * @param {CandidateStatusHistoryCreateManyArgs} args - Arguments to create many CandidateStatusHistories.
     * @example
     * // Create many CandidateStatusHistories
     * const candidateStatusHistory = await prisma.candidateStatusHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateStatusHistoryCreateManyArgs>(args?: SelectSubset<T, CandidateStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidateStatusHistories and returns the data saved in the database.
     * @param {CandidateStatusHistoryCreateManyAndReturnArgs} args - Arguments to create many CandidateStatusHistories.
     * @example
     * // Create many CandidateStatusHistories
     * const candidateStatusHistory = await prisma.candidateStatusHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidateStatusHistories and only return the `id`
     * const candidateStatusHistoryWithIdOnly = await prisma.candidateStatusHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateStatusHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateStatusHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CandidateStatusHistory.
     * @param {CandidateStatusHistoryDeleteArgs} args - Arguments to delete one CandidateStatusHistory.
     * @example
     * // Delete one CandidateStatusHistory
     * const CandidateStatusHistory = await prisma.candidateStatusHistory.delete({
     *   where: {
     *     // ... filter to delete one CandidateStatusHistory
     *   }
     * })
     * 
     */
    delete<T extends CandidateStatusHistoryDeleteArgs>(args: SelectSubset<T, CandidateStatusHistoryDeleteArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CandidateStatusHistory.
     * @param {CandidateStatusHistoryUpdateArgs} args - Arguments to update one CandidateStatusHistory.
     * @example
     * // Update one CandidateStatusHistory
     * const candidateStatusHistory = await prisma.candidateStatusHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateStatusHistoryUpdateArgs>(args: SelectSubset<T, CandidateStatusHistoryUpdateArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CandidateStatusHistories.
     * @param {CandidateStatusHistoryDeleteManyArgs} args - Arguments to filter CandidateStatusHistories to delete.
     * @example
     * // Delete a few CandidateStatusHistories
     * const { count } = await prisma.candidateStatusHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateStatusHistoryDeleteManyArgs>(args?: SelectSubset<T, CandidateStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateStatusHistories
     * const candidateStatusHistory = await prisma.candidateStatusHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateStatusHistoryUpdateManyArgs>(args: SelectSubset<T, CandidateStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateStatusHistories and returns the data updated in the database.
     * @param {CandidateStatusHistoryUpdateManyAndReturnArgs} args - Arguments to update many CandidateStatusHistories.
     * @example
     * // Update many CandidateStatusHistories
     * const candidateStatusHistory = await prisma.candidateStatusHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CandidateStatusHistories and only return the `id`
     * const candidateStatusHistoryWithIdOnly = await prisma.candidateStatusHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateStatusHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateStatusHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CandidateStatusHistory.
     * @param {CandidateStatusHistoryUpsertArgs} args - Arguments to update or create a CandidateStatusHistory.
     * @example
     * // Update or create a CandidateStatusHistory
     * const candidateStatusHistory = await prisma.candidateStatusHistory.upsert({
     *   create: {
     *     // ... data to create a CandidateStatusHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateStatusHistory we want to update
     *   }
     * })
     */
    upsert<T extends CandidateStatusHistoryUpsertArgs>(args: SelectSubset<T, CandidateStatusHistoryUpsertArgs<ExtArgs>>): Prisma__CandidateStatusHistoryClient<$Result.GetResult<Prisma.$CandidateStatusHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CandidateStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateStatusHistoryCountArgs} args - Arguments to filter CandidateStatusHistories to count.
     * @example
     * // Count the number of CandidateStatusHistories
     * const count = await prisma.candidateStatusHistory.count({
     *   where: {
     *     // ... the filter for the CandidateStatusHistories we want to count
     *   }
     * })
    **/
    count<T extends CandidateStatusHistoryCountArgs>(
      args?: Subset<T, CandidateStatusHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateStatusHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateStatusHistoryAggregateArgs>(args: Subset<T, CandidateStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetCandidateStatusHistoryAggregateType<T>>

    /**
     * Group by CandidateStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateStatusHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateStatusHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateStatusHistoryGroupByArgs['orderBy'] }
        : { orderBy?: CandidateStatusHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidateStatusHistory model
   */
  readonly fields: CandidateStatusHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateStatusHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateStatusHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidateStatusHistory model
   */
  interface CandidateStatusHistoryFieldRefs {
    readonly id: FieldRef<"CandidateStatusHistory", 'String'>
    readonly createdAt: FieldRef<"CandidateStatusHistory", 'DateTime'>
    readonly candidateId: FieldRef<"CandidateStatusHistory", 'String'>
    readonly previousStatus: FieldRef<"CandidateStatusHistory", 'CandidateStatus'>
    readonly newStatus: FieldRef<"CandidateStatusHistory", 'CandidateStatus'>
    readonly changeReason: FieldRef<"CandidateStatusHistory", 'String'>
    readonly changedBy: FieldRef<"CandidateStatusHistory", 'String'>
    readonly notes: FieldRef<"CandidateStatusHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CandidateStatusHistory findUnique
   */
  export type CandidateStatusHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CandidateStatusHistory to fetch.
     */
    where: CandidateStatusHistoryWhereUniqueInput
  }

  /**
   * CandidateStatusHistory findUniqueOrThrow
   */
  export type CandidateStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CandidateStatusHistory to fetch.
     */
    where: CandidateStatusHistoryWhereUniqueInput
  }

  /**
   * CandidateStatusHistory findFirst
   */
  export type CandidateStatusHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CandidateStatusHistory to fetch.
     */
    where?: CandidateStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateStatusHistories to fetch.
     */
    orderBy?: CandidateStatusHistoryOrderByWithRelationInput | CandidateStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateStatusHistories.
     */
    cursor?: CandidateStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateStatusHistories.
     */
    distinct?: CandidateStatusHistoryScalarFieldEnum | CandidateStatusHistoryScalarFieldEnum[]
  }

  /**
   * CandidateStatusHistory findFirstOrThrow
   */
  export type CandidateStatusHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CandidateStatusHistory to fetch.
     */
    where?: CandidateStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateStatusHistories to fetch.
     */
    orderBy?: CandidateStatusHistoryOrderByWithRelationInput | CandidateStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateStatusHistories.
     */
    cursor?: CandidateStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateStatusHistories.
     */
    distinct?: CandidateStatusHistoryScalarFieldEnum | CandidateStatusHistoryScalarFieldEnum[]
  }

  /**
   * CandidateStatusHistory findMany
   */
  export type CandidateStatusHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CandidateStatusHistories to fetch.
     */
    where?: CandidateStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateStatusHistories to fetch.
     */
    orderBy?: CandidateStatusHistoryOrderByWithRelationInput | CandidateStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateStatusHistories.
     */
    cursor?: CandidateStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateStatusHistories.
     */
    skip?: number
    distinct?: CandidateStatusHistoryScalarFieldEnum | CandidateStatusHistoryScalarFieldEnum[]
  }

  /**
   * CandidateStatusHistory create
   */
  export type CandidateStatusHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidateStatusHistory.
     */
    data: XOR<CandidateStatusHistoryCreateInput, CandidateStatusHistoryUncheckedCreateInput>
  }

  /**
   * CandidateStatusHistory createMany
   */
  export type CandidateStatusHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidateStatusHistories.
     */
    data: CandidateStatusHistoryCreateManyInput | CandidateStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidateStatusHistory createManyAndReturn
   */
  export type CandidateStatusHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many CandidateStatusHistories.
     */
    data: CandidateStatusHistoryCreateManyInput | CandidateStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateStatusHistory update
   */
  export type CandidateStatusHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidateStatusHistory.
     */
    data: XOR<CandidateStatusHistoryUpdateInput, CandidateStatusHistoryUncheckedUpdateInput>
    /**
     * Choose, which CandidateStatusHistory to update.
     */
    where: CandidateStatusHistoryWhereUniqueInput
  }

  /**
   * CandidateStatusHistory updateMany
   */
  export type CandidateStatusHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidateStatusHistories.
     */
    data: XOR<CandidateStatusHistoryUpdateManyMutationInput, CandidateStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which CandidateStatusHistories to update
     */
    where?: CandidateStatusHistoryWhereInput
    /**
     * Limit how many CandidateStatusHistories to update.
     */
    limit?: number
  }

  /**
   * CandidateStatusHistory updateManyAndReturn
   */
  export type CandidateStatusHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * The data used to update CandidateStatusHistories.
     */
    data: XOR<CandidateStatusHistoryUpdateManyMutationInput, CandidateStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which CandidateStatusHistories to update
     */
    where?: CandidateStatusHistoryWhereInput
    /**
     * Limit how many CandidateStatusHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateStatusHistory upsert
   */
  export type CandidateStatusHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidateStatusHistory to update in case it exists.
     */
    where: CandidateStatusHistoryWhereUniqueInput
    /**
     * In case the CandidateStatusHistory found by the `where` argument doesn't exist, create a new CandidateStatusHistory with this data.
     */
    create: XOR<CandidateStatusHistoryCreateInput, CandidateStatusHistoryUncheckedCreateInput>
    /**
     * In case the CandidateStatusHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateStatusHistoryUpdateInput, CandidateStatusHistoryUncheckedUpdateInput>
  }

  /**
   * CandidateStatusHistory delete
   */
  export type CandidateStatusHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter which CandidateStatusHistory to delete.
     */
    where: CandidateStatusHistoryWhereUniqueInput
  }

  /**
   * CandidateStatusHistory deleteMany
   */
  export type CandidateStatusHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateStatusHistories to delete
     */
    where?: CandidateStatusHistoryWhereInput
    /**
     * Limit how many CandidateStatusHistories to delete.
     */
    limit?: number
  }

  /**
   * CandidateStatusHistory without action
   */
  export type CandidateStatusHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateStatusHistory
     */
    select?: CandidateStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateStatusHistory
     */
    omit?: CandidateStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateStatusHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    overallMatchScore: number | null
    technicalMatchScore: number | null
    culturalFitScore: number | null
    languageMatchScore: number | null
    experienceMatchScore: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    overallMatchScore: number | null
    technicalMatchScore: number | null
    culturalFitScore: number | null
    languageMatchScore: number | null
    experienceMatchScore: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    companyId: string | null
    jobPostingId: string | null
    applicationStatus: $Enums.ApplicationStatus | null
    applicationDate: Date | null
    overallMatchScore: number | null
    technicalMatchScore: number | null
    culturalFitScore: number | null
    languageMatchScore: number | null
    experienceMatchScore: number | null
    resumeUrl: string | null
    coverLetterUrl: string | null
    portfolioUrl: string | null
    finalDecision: string | null
    decisionDate: Date | null
    decisionReason: string | null
    applicationNotes: string | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    candidateId: string | null
    companyId: string | null
    jobPostingId: string | null
    applicationStatus: $Enums.ApplicationStatus | null
    applicationDate: Date | null
    overallMatchScore: number | null
    technicalMatchScore: number | null
    culturalFitScore: number | null
    languageMatchScore: number | null
    experienceMatchScore: number | null
    resumeUrl: string | null
    coverLetterUrl: string | null
    portfolioUrl: string | null
    finalDecision: string | null
    decisionDate: Date | null
    decisionReason: string | null
    applicationNotes: string | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    candidateId: number
    companyId: number
    jobPostingId: number
    applicationStatus: number
    applicationDate: number
    overallMatchScore: number
    technicalMatchScore: number
    culturalFitScore: number
    languageMatchScore: number
    experienceMatchScore: number
    resumeUrl: number
    coverLetterUrl: number
    portfolioUrl: number
    finalDecision: number
    decisionDate: number
    decisionReason: number
    applicationNotes: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    overallMatchScore?: true
    technicalMatchScore?: true
    culturalFitScore?: true
    languageMatchScore?: true
    experienceMatchScore?: true
  }

  export type ApplicationSumAggregateInputType = {
    overallMatchScore?: true
    technicalMatchScore?: true
    culturalFitScore?: true
    languageMatchScore?: true
    experienceMatchScore?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    jobPostingId?: true
    applicationStatus?: true
    applicationDate?: true
    overallMatchScore?: true
    technicalMatchScore?: true
    culturalFitScore?: true
    languageMatchScore?: true
    experienceMatchScore?: true
    resumeUrl?: true
    coverLetterUrl?: true
    portfolioUrl?: true
    finalDecision?: true
    decisionDate?: true
    decisionReason?: true
    applicationNotes?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    jobPostingId?: true
    applicationStatus?: true
    applicationDate?: true
    overallMatchScore?: true
    technicalMatchScore?: true
    culturalFitScore?: true
    languageMatchScore?: true
    experienceMatchScore?: true
    resumeUrl?: true
    coverLetterUrl?: true
    portfolioUrl?: true
    finalDecision?: true
    decisionDate?: true
    decisionReason?: true
    applicationNotes?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    candidateId?: true
    companyId?: true
    jobPostingId?: true
    applicationStatus?: true
    applicationDate?: true
    overallMatchScore?: true
    technicalMatchScore?: true
    culturalFitScore?: true
    languageMatchScore?: true
    experienceMatchScore?: true
    resumeUrl?: true
    coverLetterUrl?: true
    portfolioUrl?: true
    finalDecision?: true
    decisionDate?: true
    decisionReason?: true
    applicationNotes?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    candidateId: string
    companyId: string
    jobPostingId: string
    applicationStatus: $Enums.ApplicationStatus
    applicationDate: Date
    overallMatchScore: number | null
    technicalMatchScore: number | null
    culturalFitScore: number | null
    languageMatchScore: number | null
    experienceMatchScore: number | null
    resumeUrl: string | null
    coverLetterUrl: string | null
    portfolioUrl: string | null
    finalDecision: string | null
    decisionDate: Date | null
    decisionReason: string | null
    applicationNotes: string | null
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    jobPostingId?: boolean
    applicationStatus?: boolean
    applicationDate?: boolean
    overallMatchScore?: boolean
    technicalMatchScore?: boolean
    culturalFitScore?: boolean
    languageMatchScore?: boolean
    experienceMatchScore?: boolean
    resumeUrl?: boolean
    coverLetterUrl?: boolean
    portfolioUrl?: boolean
    finalDecision?: boolean
    decisionDate?: boolean
    decisionReason?: boolean
    applicationNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    interviewSessions?: boolean | Application$interviewSessionsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    jobPostingId?: boolean
    applicationStatus?: boolean
    applicationDate?: boolean
    overallMatchScore?: boolean
    technicalMatchScore?: boolean
    culturalFitScore?: boolean
    languageMatchScore?: boolean
    experienceMatchScore?: boolean
    resumeUrl?: boolean
    coverLetterUrl?: boolean
    portfolioUrl?: boolean
    finalDecision?: boolean
    decisionDate?: boolean
    decisionReason?: boolean
    applicationNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    jobPostingId?: boolean
    applicationStatus?: boolean
    applicationDate?: boolean
    overallMatchScore?: boolean
    technicalMatchScore?: boolean
    culturalFitScore?: boolean
    languageMatchScore?: boolean
    experienceMatchScore?: boolean
    resumeUrl?: boolean
    coverLetterUrl?: boolean
    portfolioUrl?: boolean
    finalDecision?: boolean
    decisionDate?: boolean
    decisionReason?: boolean
    applicationNotes?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidateId?: boolean
    companyId?: boolean
    jobPostingId?: boolean
    applicationStatus?: boolean
    applicationDate?: boolean
    overallMatchScore?: boolean
    technicalMatchScore?: boolean
    culturalFitScore?: boolean
    languageMatchScore?: boolean
    experienceMatchScore?: boolean
    resumeUrl?: boolean
    coverLetterUrl?: boolean
    portfolioUrl?: boolean
    finalDecision?: boolean
    decisionDate?: boolean
    decisionReason?: boolean
    applicationNotes?: boolean
  }

  export type ApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "candidateId" | "companyId" | "jobPostingId" | "applicationStatus" | "applicationDate" | "overallMatchScore" | "technicalMatchScore" | "culturalFitScore" | "languageMatchScore" | "experienceMatchScore" | "resumeUrl" | "coverLetterUrl" | "portfolioUrl" | "finalDecision" | "decisionDate" | "decisionReason" | "applicationNotes", ExtArgs["result"]["application"]>
  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
    interviewSessions?: boolean | Application$interviewSessionsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobPosting?: boolean | JobPostingDefaultArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
      jobPosting: Prisma.$JobPostingPayload<ExtArgs>
      interviewSessions: Prisma.$InterviewSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      candidateId: string
      companyId: string
      jobPostingId: string
      applicationStatus: $Enums.ApplicationStatus
      applicationDate: Date
      overallMatchScore: number | null
      technicalMatchScore: number | null
      culturalFitScore: number | null
      languageMatchScore: number | null
      experienceMatchScore: number | null
      resumeUrl: string | null
      coverLetterUrl: string | null
      portfolioUrl: string | null
      finalDecision: string | null
      decisionDate: Date | null
      decisionReason: string | null
      applicationNotes: string | null
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications and returns the data updated in the database.
     * @param {ApplicationUpdateManyAndReturnArgs} args - Arguments to update many Applications.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jobPosting<T extends JobPostingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobPostingDefaultArgs<ExtArgs>>): Prisma__JobPostingClient<$Result.GetResult<Prisma.$JobPostingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    interviewSessions<T extends Application$interviewSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Application$interviewSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'String'>
    readonly createdAt: FieldRef<"Application", 'DateTime'>
    readonly updatedAt: FieldRef<"Application", 'DateTime'>
    readonly candidateId: FieldRef<"Application", 'String'>
    readonly companyId: FieldRef<"Application", 'String'>
    readonly jobPostingId: FieldRef<"Application", 'String'>
    readonly applicationStatus: FieldRef<"Application", 'ApplicationStatus'>
    readonly applicationDate: FieldRef<"Application", 'DateTime'>
    readonly overallMatchScore: FieldRef<"Application", 'Float'>
    readonly technicalMatchScore: FieldRef<"Application", 'Float'>
    readonly culturalFitScore: FieldRef<"Application", 'Float'>
    readonly languageMatchScore: FieldRef<"Application", 'Float'>
    readonly experienceMatchScore: FieldRef<"Application", 'Float'>
    readonly resumeUrl: FieldRef<"Application", 'String'>
    readonly coverLetterUrl: FieldRef<"Application", 'String'>
    readonly portfolioUrl: FieldRef<"Application", 'String'>
    readonly finalDecision: FieldRef<"Application", 'String'>
    readonly decisionDate: FieldRef<"Application", 'DateTime'>
    readonly decisionReason: FieldRef<"Application", 'String'>
    readonly applicationNotes: FieldRef<"Application", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application createManyAndReturn
   */
  export type ApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
  }

  /**
   * Application updateManyAndReturn
   */
  export type ApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to delete.
     */
    limit?: number
  }

  /**
   * Application.interviewSessions
   */
  export type Application$interviewSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewSession
     */
    select?: InterviewSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewSession
     */
    omit?: InterviewSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewSessionInclude<ExtArgs> | null
    where?: InterviewSessionWhereInput
    orderBy?: InterviewSessionOrderByWithRelationInput | InterviewSessionOrderByWithRelationInput[]
    cursor?: InterviewSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewSessionScalarFieldEnum | InterviewSessionScalarFieldEnum[]
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Model MarketIntelligence
   */

  export type AggregateMarketIntelligence = {
    _count: MarketIntelligenceCountAggregateOutputType | null
    _avg: MarketIntelligenceAvgAggregateOutputType | null
    _sum: MarketIntelligenceSumAggregateOutputType | null
    _min: MarketIntelligenceMinAggregateOutputType | null
    _max: MarketIntelligenceMaxAggregateOutputType | null
  }

  export type MarketIntelligenceAvgAggregateOutputType = {
    averageSalary: number | null
    reliability: number | null
  }

  export type MarketIntelligenceSumAggregateOutputType = {
    averageSalary: number | null
    reliability: number | null
  }

  export type MarketIntelligenceMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dataType: string | null
    industry: string | null
    location: string | null
    timeframe: string | null
    averageSalary: number | null
    salaryRange: string | null
    demandLevel: string | null
    supplyLevel: string | null
    inDemandSkills: string | null
    emergingSkills: string | null
    decliningSkills: string | null
    culturalTrends: string | null
    adaptationChallenges: string | null
    successFactors: string | null
    dataSource: string | null
    reliability: number | null
    marketNotes: string | null
  }

  export type MarketIntelligenceMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dataType: string | null
    industry: string | null
    location: string | null
    timeframe: string | null
    averageSalary: number | null
    salaryRange: string | null
    demandLevel: string | null
    supplyLevel: string | null
    inDemandSkills: string | null
    emergingSkills: string | null
    decliningSkills: string | null
    culturalTrends: string | null
    adaptationChallenges: string | null
    successFactors: string | null
    dataSource: string | null
    reliability: number | null
    marketNotes: string | null
  }

  export type MarketIntelligenceCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    dataType: number
    industry: number
    location: number
    timeframe: number
    averageSalary: number
    salaryRange: number
    demandLevel: number
    supplyLevel: number
    inDemandSkills: number
    emergingSkills: number
    decliningSkills: number
    culturalTrends: number
    adaptationChallenges: number
    successFactors: number
    dataSource: number
    reliability: number
    marketNotes: number
    _all: number
  }


  export type MarketIntelligenceAvgAggregateInputType = {
    averageSalary?: true
    reliability?: true
  }

  export type MarketIntelligenceSumAggregateInputType = {
    averageSalary?: true
    reliability?: true
  }

  export type MarketIntelligenceMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    dataType?: true
    industry?: true
    location?: true
    timeframe?: true
    averageSalary?: true
    salaryRange?: true
    demandLevel?: true
    supplyLevel?: true
    inDemandSkills?: true
    emergingSkills?: true
    decliningSkills?: true
    culturalTrends?: true
    adaptationChallenges?: true
    successFactors?: true
    dataSource?: true
    reliability?: true
    marketNotes?: true
  }

  export type MarketIntelligenceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    dataType?: true
    industry?: true
    location?: true
    timeframe?: true
    averageSalary?: true
    salaryRange?: true
    demandLevel?: true
    supplyLevel?: true
    inDemandSkills?: true
    emergingSkills?: true
    decliningSkills?: true
    culturalTrends?: true
    adaptationChallenges?: true
    successFactors?: true
    dataSource?: true
    reliability?: true
    marketNotes?: true
  }

  export type MarketIntelligenceCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    dataType?: true
    industry?: true
    location?: true
    timeframe?: true
    averageSalary?: true
    salaryRange?: true
    demandLevel?: true
    supplyLevel?: true
    inDemandSkills?: true
    emergingSkills?: true
    decliningSkills?: true
    culturalTrends?: true
    adaptationChallenges?: true
    successFactors?: true
    dataSource?: true
    reliability?: true
    marketNotes?: true
    _all?: true
  }

  export type MarketIntelligenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketIntelligence to aggregate.
     */
    where?: MarketIntelligenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketIntelligences to fetch.
     */
    orderBy?: MarketIntelligenceOrderByWithRelationInput | MarketIntelligenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketIntelligenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketIntelligences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketIntelligences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketIntelligences
    **/
    _count?: true | MarketIntelligenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketIntelligenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketIntelligenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketIntelligenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketIntelligenceMaxAggregateInputType
  }

  export type GetMarketIntelligenceAggregateType<T extends MarketIntelligenceAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketIntelligence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketIntelligence[P]>
      : GetScalarType<T[P], AggregateMarketIntelligence[P]>
  }




  export type MarketIntelligenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketIntelligenceWhereInput
    orderBy?: MarketIntelligenceOrderByWithAggregationInput | MarketIntelligenceOrderByWithAggregationInput[]
    by: MarketIntelligenceScalarFieldEnum[] | MarketIntelligenceScalarFieldEnum
    having?: MarketIntelligenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketIntelligenceCountAggregateInputType | true
    _avg?: MarketIntelligenceAvgAggregateInputType
    _sum?: MarketIntelligenceSumAggregateInputType
    _min?: MarketIntelligenceMinAggregateInputType
    _max?: MarketIntelligenceMaxAggregateInputType
  }

  export type MarketIntelligenceGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    dataType: string
    industry: string
    location: string
    timeframe: string
    averageSalary: number | null
    salaryRange: string | null
    demandLevel: string
    supplyLevel: string
    inDemandSkills: string | null
    emergingSkills: string | null
    decliningSkills: string | null
    culturalTrends: string | null
    adaptationChallenges: string | null
    successFactors: string | null
    dataSource: string | null
    reliability: number | null
    marketNotes: string | null
    _count: MarketIntelligenceCountAggregateOutputType | null
    _avg: MarketIntelligenceAvgAggregateOutputType | null
    _sum: MarketIntelligenceSumAggregateOutputType | null
    _min: MarketIntelligenceMinAggregateOutputType | null
    _max: MarketIntelligenceMaxAggregateOutputType | null
  }

  type GetMarketIntelligenceGroupByPayload<T extends MarketIntelligenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketIntelligenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketIntelligenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketIntelligenceGroupByOutputType[P]>
            : GetScalarType<T[P], MarketIntelligenceGroupByOutputType[P]>
        }
      >
    >


  export type MarketIntelligenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataType?: boolean
    industry?: boolean
    location?: boolean
    timeframe?: boolean
    averageSalary?: boolean
    salaryRange?: boolean
    demandLevel?: boolean
    supplyLevel?: boolean
    inDemandSkills?: boolean
    emergingSkills?: boolean
    decliningSkills?: boolean
    culturalTrends?: boolean
    adaptationChallenges?: boolean
    successFactors?: boolean
    dataSource?: boolean
    reliability?: boolean
    marketNotes?: boolean
  }, ExtArgs["result"]["marketIntelligence"]>

  export type MarketIntelligenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataType?: boolean
    industry?: boolean
    location?: boolean
    timeframe?: boolean
    averageSalary?: boolean
    salaryRange?: boolean
    demandLevel?: boolean
    supplyLevel?: boolean
    inDemandSkills?: boolean
    emergingSkills?: boolean
    decliningSkills?: boolean
    culturalTrends?: boolean
    adaptationChallenges?: boolean
    successFactors?: boolean
    dataSource?: boolean
    reliability?: boolean
    marketNotes?: boolean
  }, ExtArgs["result"]["marketIntelligence"]>

  export type MarketIntelligenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataType?: boolean
    industry?: boolean
    location?: boolean
    timeframe?: boolean
    averageSalary?: boolean
    salaryRange?: boolean
    demandLevel?: boolean
    supplyLevel?: boolean
    inDemandSkills?: boolean
    emergingSkills?: boolean
    decliningSkills?: boolean
    culturalTrends?: boolean
    adaptationChallenges?: boolean
    successFactors?: boolean
    dataSource?: boolean
    reliability?: boolean
    marketNotes?: boolean
  }, ExtArgs["result"]["marketIntelligence"]>

  export type MarketIntelligenceSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataType?: boolean
    industry?: boolean
    location?: boolean
    timeframe?: boolean
    averageSalary?: boolean
    salaryRange?: boolean
    demandLevel?: boolean
    supplyLevel?: boolean
    inDemandSkills?: boolean
    emergingSkills?: boolean
    decliningSkills?: boolean
    culturalTrends?: boolean
    adaptationChallenges?: boolean
    successFactors?: boolean
    dataSource?: boolean
    reliability?: boolean
    marketNotes?: boolean
  }

  export type MarketIntelligenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "dataType" | "industry" | "location" | "timeframe" | "averageSalary" | "salaryRange" | "demandLevel" | "supplyLevel" | "inDemandSkills" | "emergingSkills" | "decliningSkills" | "culturalTrends" | "adaptationChallenges" | "successFactors" | "dataSource" | "reliability" | "marketNotes", ExtArgs["result"]["marketIntelligence"]>

  export type $MarketIntelligencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketIntelligence"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      dataType: string
      industry: string
      location: string
      timeframe: string
      averageSalary: number | null
      salaryRange: string | null
      demandLevel: string
      supplyLevel: string
      inDemandSkills: string | null
      emergingSkills: string | null
      decliningSkills: string | null
      culturalTrends: string | null
      adaptationChallenges: string | null
      successFactors: string | null
      dataSource: string | null
      reliability: number | null
      marketNotes: string | null
    }, ExtArgs["result"]["marketIntelligence"]>
    composites: {}
  }

  type MarketIntelligenceGetPayload<S extends boolean | null | undefined | MarketIntelligenceDefaultArgs> = $Result.GetResult<Prisma.$MarketIntelligencePayload, S>

  type MarketIntelligenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketIntelligenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketIntelligenceCountAggregateInputType | true
    }

  export interface MarketIntelligenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketIntelligence'], meta: { name: 'MarketIntelligence' } }
    /**
     * Find zero or one MarketIntelligence that matches the filter.
     * @param {MarketIntelligenceFindUniqueArgs} args - Arguments to find a MarketIntelligence
     * @example
     * // Get one MarketIntelligence
     * const marketIntelligence = await prisma.marketIntelligence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketIntelligenceFindUniqueArgs>(args: SelectSubset<T, MarketIntelligenceFindUniqueArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketIntelligence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketIntelligenceFindUniqueOrThrowArgs} args - Arguments to find a MarketIntelligence
     * @example
     * // Get one MarketIntelligence
     * const marketIntelligence = await prisma.marketIntelligence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketIntelligenceFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketIntelligenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketIntelligence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketIntelligenceFindFirstArgs} args - Arguments to find a MarketIntelligence
     * @example
     * // Get one MarketIntelligence
     * const marketIntelligence = await prisma.marketIntelligence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketIntelligenceFindFirstArgs>(args?: SelectSubset<T, MarketIntelligenceFindFirstArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketIntelligence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketIntelligenceFindFirstOrThrowArgs} args - Arguments to find a MarketIntelligence
     * @example
     * // Get one MarketIntelligence
     * const marketIntelligence = await prisma.marketIntelligence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketIntelligenceFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketIntelligenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketIntelligences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketIntelligenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketIntelligences
     * const marketIntelligences = await prisma.marketIntelligence.findMany()
     * 
     * // Get first 10 MarketIntelligences
     * const marketIntelligences = await prisma.marketIntelligence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketIntelligenceWithIdOnly = await prisma.marketIntelligence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketIntelligenceFindManyArgs>(args?: SelectSubset<T, MarketIntelligenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketIntelligence.
     * @param {MarketIntelligenceCreateArgs} args - Arguments to create a MarketIntelligence.
     * @example
     * // Create one MarketIntelligence
     * const MarketIntelligence = await prisma.marketIntelligence.create({
     *   data: {
     *     // ... data to create a MarketIntelligence
     *   }
     * })
     * 
     */
    create<T extends MarketIntelligenceCreateArgs>(args: SelectSubset<T, MarketIntelligenceCreateArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketIntelligences.
     * @param {MarketIntelligenceCreateManyArgs} args - Arguments to create many MarketIntelligences.
     * @example
     * // Create many MarketIntelligences
     * const marketIntelligence = await prisma.marketIntelligence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketIntelligenceCreateManyArgs>(args?: SelectSubset<T, MarketIntelligenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketIntelligences and returns the data saved in the database.
     * @param {MarketIntelligenceCreateManyAndReturnArgs} args - Arguments to create many MarketIntelligences.
     * @example
     * // Create many MarketIntelligences
     * const marketIntelligence = await prisma.marketIntelligence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketIntelligences and only return the `id`
     * const marketIntelligenceWithIdOnly = await prisma.marketIntelligence.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketIntelligenceCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketIntelligenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketIntelligence.
     * @param {MarketIntelligenceDeleteArgs} args - Arguments to delete one MarketIntelligence.
     * @example
     * // Delete one MarketIntelligence
     * const MarketIntelligence = await prisma.marketIntelligence.delete({
     *   where: {
     *     // ... filter to delete one MarketIntelligence
     *   }
     * })
     * 
     */
    delete<T extends MarketIntelligenceDeleteArgs>(args: SelectSubset<T, MarketIntelligenceDeleteArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketIntelligence.
     * @param {MarketIntelligenceUpdateArgs} args - Arguments to update one MarketIntelligence.
     * @example
     * // Update one MarketIntelligence
     * const marketIntelligence = await prisma.marketIntelligence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketIntelligenceUpdateArgs>(args: SelectSubset<T, MarketIntelligenceUpdateArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketIntelligences.
     * @param {MarketIntelligenceDeleteManyArgs} args - Arguments to filter MarketIntelligences to delete.
     * @example
     * // Delete a few MarketIntelligences
     * const { count } = await prisma.marketIntelligence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketIntelligenceDeleteManyArgs>(args?: SelectSubset<T, MarketIntelligenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketIntelligences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketIntelligenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketIntelligences
     * const marketIntelligence = await prisma.marketIntelligence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketIntelligenceUpdateManyArgs>(args: SelectSubset<T, MarketIntelligenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketIntelligences and returns the data updated in the database.
     * @param {MarketIntelligenceUpdateManyAndReturnArgs} args - Arguments to update many MarketIntelligences.
     * @example
     * // Update many MarketIntelligences
     * const marketIntelligence = await prisma.marketIntelligence.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketIntelligences and only return the `id`
     * const marketIntelligenceWithIdOnly = await prisma.marketIntelligence.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketIntelligenceUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketIntelligenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketIntelligence.
     * @param {MarketIntelligenceUpsertArgs} args - Arguments to update or create a MarketIntelligence.
     * @example
     * // Update or create a MarketIntelligence
     * const marketIntelligence = await prisma.marketIntelligence.upsert({
     *   create: {
     *     // ... data to create a MarketIntelligence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketIntelligence we want to update
     *   }
     * })
     */
    upsert<T extends MarketIntelligenceUpsertArgs>(args: SelectSubset<T, MarketIntelligenceUpsertArgs<ExtArgs>>): Prisma__MarketIntelligenceClient<$Result.GetResult<Prisma.$MarketIntelligencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketIntelligences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketIntelligenceCountArgs} args - Arguments to filter MarketIntelligences to count.
     * @example
     * // Count the number of MarketIntelligences
     * const count = await prisma.marketIntelligence.count({
     *   where: {
     *     // ... the filter for the MarketIntelligences we want to count
     *   }
     * })
    **/
    count<T extends MarketIntelligenceCountArgs>(
      args?: Subset<T, MarketIntelligenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketIntelligenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketIntelligence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketIntelligenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketIntelligenceAggregateArgs>(args: Subset<T, MarketIntelligenceAggregateArgs>): Prisma.PrismaPromise<GetMarketIntelligenceAggregateType<T>>

    /**
     * Group by MarketIntelligence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketIntelligenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketIntelligenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketIntelligenceGroupByArgs['orderBy'] }
        : { orderBy?: MarketIntelligenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketIntelligenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketIntelligenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketIntelligence model
   */
  readonly fields: MarketIntelligenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketIntelligence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketIntelligenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketIntelligence model
   */
  interface MarketIntelligenceFieldRefs {
    readonly id: FieldRef<"MarketIntelligence", 'String'>
    readonly createdAt: FieldRef<"MarketIntelligence", 'DateTime'>
    readonly updatedAt: FieldRef<"MarketIntelligence", 'DateTime'>
    readonly dataType: FieldRef<"MarketIntelligence", 'String'>
    readonly industry: FieldRef<"MarketIntelligence", 'String'>
    readonly location: FieldRef<"MarketIntelligence", 'String'>
    readonly timeframe: FieldRef<"MarketIntelligence", 'String'>
    readonly averageSalary: FieldRef<"MarketIntelligence", 'Float'>
    readonly salaryRange: FieldRef<"MarketIntelligence", 'String'>
    readonly demandLevel: FieldRef<"MarketIntelligence", 'String'>
    readonly supplyLevel: FieldRef<"MarketIntelligence", 'String'>
    readonly inDemandSkills: FieldRef<"MarketIntelligence", 'String'>
    readonly emergingSkills: FieldRef<"MarketIntelligence", 'String'>
    readonly decliningSkills: FieldRef<"MarketIntelligence", 'String'>
    readonly culturalTrends: FieldRef<"MarketIntelligence", 'String'>
    readonly adaptationChallenges: FieldRef<"MarketIntelligence", 'String'>
    readonly successFactors: FieldRef<"MarketIntelligence", 'String'>
    readonly dataSource: FieldRef<"MarketIntelligence", 'String'>
    readonly reliability: FieldRef<"MarketIntelligence", 'Float'>
    readonly marketNotes: FieldRef<"MarketIntelligence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MarketIntelligence findUnique
   */
  export type MarketIntelligenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * Filter, which MarketIntelligence to fetch.
     */
    where: MarketIntelligenceWhereUniqueInput
  }

  /**
   * MarketIntelligence findUniqueOrThrow
   */
  export type MarketIntelligenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * Filter, which MarketIntelligence to fetch.
     */
    where: MarketIntelligenceWhereUniqueInput
  }

  /**
   * MarketIntelligence findFirst
   */
  export type MarketIntelligenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * Filter, which MarketIntelligence to fetch.
     */
    where?: MarketIntelligenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketIntelligences to fetch.
     */
    orderBy?: MarketIntelligenceOrderByWithRelationInput | MarketIntelligenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketIntelligences.
     */
    cursor?: MarketIntelligenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketIntelligences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketIntelligences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketIntelligences.
     */
    distinct?: MarketIntelligenceScalarFieldEnum | MarketIntelligenceScalarFieldEnum[]
  }

  /**
   * MarketIntelligence findFirstOrThrow
   */
  export type MarketIntelligenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * Filter, which MarketIntelligence to fetch.
     */
    where?: MarketIntelligenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketIntelligences to fetch.
     */
    orderBy?: MarketIntelligenceOrderByWithRelationInput | MarketIntelligenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketIntelligences.
     */
    cursor?: MarketIntelligenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketIntelligences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketIntelligences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketIntelligences.
     */
    distinct?: MarketIntelligenceScalarFieldEnum | MarketIntelligenceScalarFieldEnum[]
  }

  /**
   * MarketIntelligence findMany
   */
  export type MarketIntelligenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * Filter, which MarketIntelligences to fetch.
     */
    where?: MarketIntelligenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketIntelligences to fetch.
     */
    orderBy?: MarketIntelligenceOrderByWithRelationInput | MarketIntelligenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketIntelligences.
     */
    cursor?: MarketIntelligenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketIntelligences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketIntelligences.
     */
    skip?: number
    distinct?: MarketIntelligenceScalarFieldEnum | MarketIntelligenceScalarFieldEnum[]
  }

  /**
   * MarketIntelligence create
   */
  export type MarketIntelligenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * The data needed to create a MarketIntelligence.
     */
    data: XOR<MarketIntelligenceCreateInput, MarketIntelligenceUncheckedCreateInput>
  }

  /**
   * MarketIntelligence createMany
   */
  export type MarketIntelligenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketIntelligences.
     */
    data: MarketIntelligenceCreateManyInput | MarketIntelligenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketIntelligence createManyAndReturn
   */
  export type MarketIntelligenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * The data used to create many MarketIntelligences.
     */
    data: MarketIntelligenceCreateManyInput | MarketIntelligenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketIntelligence update
   */
  export type MarketIntelligenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * The data needed to update a MarketIntelligence.
     */
    data: XOR<MarketIntelligenceUpdateInput, MarketIntelligenceUncheckedUpdateInput>
    /**
     * Choose, which MarketIntelligence to update.
     */
    where: MarketIntelligenceWhereUniqueInput
  }

  /**
   * MarketIntelligence updateMany
   */
  export type MarketIntelligenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketIntelligences.
     */
    data: XOR<MarketIntelligenceUpdateManyMutationInput, MarketIntelligenceUncheckedUpdateManyInput>
    /**
     * Filter which MarketIntelligences to update
     */
    where?: MarketIntelligenceWhereInput
    /**
     * Limit how many MarketIntelligences to update.
     */
    limit?: number
  }

  /**
   * MarketIntelligence updateManyAndReturn
   */
  export type MarketIntelligenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * The data used to update MarketIntelligences.
     */
    data: XOR<MarketIntelligenceUpdateManyMutationInput, MarketIntelligenceUncheckedUpdateManyInput>
    /**
     * Filter which MarketIntelligences to update
     */
    where?: MarketIntelligenceWhereInput
    /**
     * Limit how many MarketIntelligences to update.
     */
    limit?: number
  }

  /**
   * MarketIntelligence upsert
   */
  export type MarketIntelligenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * The filter to search for the MarketIntelligence to update in case it exists.
     */
    where: MarketIntelligenceWhereUniqueInput
    /**
     * In case the MarketIntelligence found by the `where` argument doesn't exist, create a new MarketIntelligence with this data.
     */
    create: XOR<MarketIntelligenceCreateInput, MarketIntelligenceUncheckedCreateInput>
    /**
     * In case the MarketIntelligence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketIntelligenceUpdateInput, MarketIntelligenceUncheckedUpdateInput>
  }

  /**
   * MarketIntelligence delete
   */
  export type MarketIntelligenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
    /**
     * Filter which MarketIntelligence to delete.
     */
    where: MarketIntelligenceWhereUniqueInput
  }

  /**
   * MarketIntelligence deleteMany
   */
  export type MarketIntelligenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketIntelligences to delete
     */
    where?: MarketIntelligenceWhereInput
    /**
     * Limit how many MarketIntelligences to delete.
     */
    limit?: number
  }

  /**
   * MarketIntelligence without action
   */
  export type MarketIntelligenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketIntelligence
     */
    select?: MarketIntelligenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketIntelligence
     */
    omit?: MarketIntelligenceOmit<ExtArgs> | null
  }


  /**
   * Model SystemMetrics
   */

  export type AggregateSystemMetrics = {
    _count: SystemMetricsCountAggregateOutputType | null
    _avg: SystemMetricsAvgAggregateOutputType | null
    _sum: SystemMetricsSumAggregateOutputType | null
    _min: SystemMetricsMinAggregateOutputType | null
    _max: SystemMetricsMaxAggregateOutputType | null
  }

  export type SystemMetricsAvgAggregateOutputType = {
    metricValue: number | null
    dataPoints: number | null
    confidence: number | null
  }

  export type SystemMetricsSumAggregateOutputType = {
    metricValue: number | null
    dataPoints: number | null
    confidence: number | null
  }

  export type SystemMetricsMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    metricType: string | null
    metricName: string | null
    metricValue: number | null
    metricUnit: string | null
    timeframe: string | null
    category: string | null
    subcategory: string | null
    calculationMethod: string | null
    dataPoints: number | null
    confidence: number | null
    metricNotes: string | null
  }

  export type SystemMetricsMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    metricType: string | null
    metricName: string | null
    metricValue: number | null
    metricUnit: string | null
    timeframe: string | null
    category: string | null
    subcategory: string | null
    calculationMethod: string | null
    dataPoints: number | null
    confidence: number | null
    metricNotes: string | null
  }

  export type SystemMetricsCountAggregateOutputType = {
    id: number
    createdAt: number
    metricType: number
    metricName: number
    metricValue: number
    metricUnit: number
    timeframe: number
    category: number
    subcategory: number
    calculationMethod: number
    dataPoints: number
    confidence: number
    metricNotes: number
    _all: number
  }


  export type SystemMetricsAvgAggregateInputType = {
    metricValue?: true
    dataPoints?: true
    confidence?: true
  }

  export type SystemMetricsSumAggregateInputType = {
    metricValue?: true
    dataPoints?: true
    confidence?: true
  }

  export type SystemMetricsMinAggregateInputType = {
    id?: true
    createdAt?: true
    metricType?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    timeframe?: true
    category?: true
    subcategory?: true
    calculationMethod?: true
    dataPoints?: true
    confidence?: true
    metricNotes?: true
  }

  export type SystemMetricsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    metricType?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    timeframe?: true
    category?: true
    subcategory?: true
    calculationMethod?: true
    dataPoints?: true
    confidence?: true
    metricNotes?: true
  }

  export type SystemMetricsCountAggregateInputType = {
    id?: true
    createdAt?: true
    metricType?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    timeframe?: true
    category?: true
    subcategory?: true
    calculationMethod?: true
    dataPoints?: true
    confidence?: true
    metricNotes?: true
    _all?: true
  }

  export type SystemMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemMetrics to aggregate.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemMetrics
    **/
    _count?: true | SystemMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemMetricsMaxAggregateInputType
  }

  export type GetSystemMetricsAggregateType<T extends SystemMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemMetrics[P]>
      : GetScalarType<T[P], AggregateSystemMetrics[P]>
  }




  export type SystemMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemMetricsWhereInput
    orderBy?: SystemMetricsOrderByWithAggregationInput | SystemMetricsOrderByWithAggregationInput[]
    by: SystemMetricsScalarFieldEnum[] | SystemMetricsScalarFieldEnum
    having?: SystemMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemMetricsCountAggregateInputType | true
    _avg?: SystemMetricsAvgAggregateInputType
    _sum?: SystemMetricsSumAggregateInputType
    _min?: SystemMetricsMinAggregateInputType
    _max?: SystemMetricsMaxAggregateInputType
  }

  export type SystemMetricsGroupByOutputType = {
    id: string
    createdAt: Date
    metricType: string
    metricName: string
    metricValue: number
    metricUnit: string | null
    timeframe: string | null
    category: string | null
    subcategory: string | null
    calculationMethod: string | null
    dataPoints: number | null
    confidence: number | null
    metricNotes: string | null
    _count: SystemMetricsCountAggregateOutputType | null
    _avg: SystemMetricsAvgAggregateOutputType | null
    _sum: SystemMetricsSumAggregateOutputType | null
    _min: SystemMetricsMinAggregateOutputType | null
    _max: SystemMetricsMaxAggregateOutputType | null
  }

  type GetSystemMetricsGroupByPayload<T extends SystemMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemMetricsGroupByOutputType[P]>
        }
      >
    >


  export type SystemMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    metricType?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    timeframe?: boolean
    category?: boolean
    subcategory?: boolean
    calculationMethod?: boolean
    dataPoints?: boolean
    confidence?: boolean
    metricNotes?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    metricType?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    timeframe?: boolean
    category?: boolean
    subcategory?: boolean
    calculationMethod?: boolean
    dataPoints?: boolean
    confidence?: boolean
    metricNotes?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    metricType?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    timeframe?: boolean
    category?: boolean
    subcategory?: boolean
    calculationMethod?: boolean
    dataPoints?: boolean
    confidence?: boolean
    metricNotes?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    metricType?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    timeframe?: boolean
    category?: boolean
    subcategory?: boolean
    calculationMethod?: boolean
    dataPoints?: boolean
    confidence?: boolean
    metricNotes?: boolean
  }

  export type SystemMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "metricType" | "metricName" | "metricValue" | "metricUnit" | "timeframe" | "category" | "subcategory" | "calculationMethod" | "dataPoints" | "confidence" | "metricNotes", ExtArgs["result"]["systemMetrics"]>

  export type $SystemMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemMetrics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      metricType: string
      metricName: string
      metricValue: number
      metricUnit: string | null
      timeframe: string | null
      category: string | null
      subcategory: string | null
      calculationMethod: string | null
      dataPoints: number | null
      confidence: number | null
      metricNotes: string | null
    }, ExtArgs["result"]["systemMetrics"]>
    composites: {}
  }

  type SystemMetricsGetPayload<S extends boolean | null | undefined | SystemMetricsDefaultArgs> = $Result.GetResult<Prisma.$SystemMetricsPayload, S>

  type SystemMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemMetricsCountAggregateInputType | true
    }

  export interface SystemMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemMetrics'], meta: { name: 'SystemMetrics' } }
    /**
     * Find zero or one SystemMetrics that matches the filter.
     * @param {SystemMetricsFindUniqueArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemMetricsFindUniqueArgs>(args: SelectSubset<T, SystemMetricsFindUniqueArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemMetricsFindUniqueOrThrowArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindFirstArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemMetricsFindFirstArgs>(args?: SelectSubset<T, SystemMetricsFindFirstArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindFirstOrThrowArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findMany()
     * 
     * // Get first 10 SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemMetricsFindManyArgs>(args?: SelectSubset<T, SystemMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemMetrics.
     * @param {SystemMetricsCreateArgs} args - Arguments to create a SystemMetrics.
     * @example
     * // Create one SystemMetrics
     * const SystemMetrics = await prisma.systemMetrics.create({
     *   data: {
     *     // ... data to create a SystemMetrics
     *   }
     * })
     * 
     */
    create<T extends SystemMetricsCreateArgs>(args: SelectSubset<T, SystemMetricsCreateArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemMetrics.
     * @param {SystemMetricsCreateManyArgs} args - Arguments to create many SystemMetrics.
     * @example
     * // Create many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemMetricsCreateManyArgs>(args?: SelectSubset<T, SystemMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemMetrics and returns the data saved in the database.
     * @param {SystemMetricsCreateManyAndReturnArgs} args - Arguments to create many SystemMetrics.
     * @example
     * // Create many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemMetrics and only return the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemMetrics.
     * @param {SystemMetricsDeleteArgs} args - Arguments to delete one SystemMetrics.
     * @example
     * // Delete one SystemMetrics
     * const SystemMetrics = await prisma.systemMetrics.delete({
     *   where: {
     *     // ... filter to delete one SystemMetrics
     *   }
     * })
     * 
     */
    delete<T extends SystemMetricsDeleteArgs>(args: SelectSubset<T, SystemMetricsDeleteArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemMetrics.
     * @param {SystemMetricsUpdateArgs} args - Arguments to update one SystemMetrics.
     * @example
     * // Update one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemMetricsUpdateArgs>(args: SelectSubset<T, SystemMetricsUpdateArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemMetrics.
     * @param {SystemMetricsDeleteManyArgs} args - Arguments to filter SystemMetrics to delete.
     * @example
     * // Delete a few SystemMetrics
     * const { count } = await prisma.systemMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemMetricsDeleteManyArgs>(args?: SelectSubset<T, SystemMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemMetricsUpdateManyArgs>(args: SelectSubset<T, SystemMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemMetrics and returns the data updated in the database.
     * @param {SystemMetricsUpdateManyAndReturnArgs} args - Arguments to update many SystemMetrics.
     * @example
     * // Update many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemMetrics and only return the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemMetrics.
     * @param {SystemMetricsUpsertArgs} args - Arguments to update or create a SystemMetrics.
     * @example
     * // Update or create a SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.upsert({
     *   create: {
     *     // ... data to create a SystemMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemMetrics we want to update
     *   }
     * })
     */
    upsert<T extends SystemMetricsUpsertArgs>(args: SelectSubset<T, SystemMetricsUpsertArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsCountArgs} args - Arguments to filter SystemMetrics to count.
     * @example
     * // Count the number of SystemMetrics
     * const count = await prisma.systemMetrics.count({
     *   where: {
     *     // ... the filter for the SystemMetrics we want to count
     *   }
     * })
    **/
    count<T extends SystemMetricsCountArgs>(
      args?: Subset<T, SystemMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemMetricsAggregateArgs>(args: Subset<T, SystemMetricsAggregateArgs>): Prisma.PrismaPromise<GetSystemMetricsAggregateType<T>>

    /**
     * Group by SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemMetricsGroupByArgs['orderBy'] }
        : { orderBy?: SystemMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemMetrics model
   */
  readonly fields: SystemMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemMetrics model
   */
  interface SystemMetricsFieldRefs {
    readonly id: FieldRef<"SystemMetrics", 'String'>
    readonly createdAt: FieldRef<"SystemMetrics", 'DateTime'>
    readonly metricType: FieldRef<"SystemMetrics", 'String'>
    readonly metricName: FieldRef<"SystemMetrics", 'String'>
    readonly metricValue: FieldRef<"SystemMetrics", 'Float'>
    readonly metricUnit: FieldRef<"SystemMetrics", 'String'>
    readonly timeframe: FieldRef<"SystemMetrics", 'String'>
    readonly category: FieldRef<"SystemMetrics", 'String'>
    readonly subcategory: FieldRef<"SystemMetrics", 'String'>
    readonly calculationMethod: FieldRef<"SystemMetrics", 'String'>
    readonly dataPoints: FieldRef<"SystemMetrics", 'Int'>
    readonly confidence: FieldRef<"SystemMetrics", 'Float'>
    readonly metricNotes: FieldRef<"SystemMetrics", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SystemMetrics findUnique
   */
  export type SystemMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics findUniqueOrThrow
   */
  export type SystemMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics findFirst
   */
  export type SystemMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemMetrics.
     */
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics findFirstOrThrow
   */
  export type SystemMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemMetrics.
     */
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics findMany
   */
  export type SystemMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics create
   */
  export type SystemMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemMetrics.
     */
    data: XOR<SystemMetricsCreateInput, SystemMetricsUncheckedCreateInput>
  }

  /**
   * SystemMetrics createMany
   */
  export type SystemMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemMetrics.
     */
    data: SystemMetricsCreateManyInput | SystemMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemMetrics createManyAndReturn
   */
  export type SystemMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemMetrics.
     */
    data: SystemMetricsCreateManyInput | SystemMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemMetrics update
   */
  export type SystemMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateInput, SystemMetricsUncheckedUpdateInput>
    /**
     * Choose, which SystemMetrics to update.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics updateMany
   */
  export type SystemMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateManyMutationInput, SystemMetricsUncheckedUpdateManyInput>
    /**
     * Filter which SystemMetrics to update
     */
    where?: SystemMetricsWhereInput
    /**
     * Limit how many SystemMetrics to update.
     */
    limit?: number
  }

  /**
   * SystemMetrics updateManyAndReturn
   */
  export type SystemMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data used to update SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateManyMutationInput, SystemMetricsUncheckedUpdateManyInput>
    /**
     * Filter which SystemMetrics to update
     */
    where?: SystemMetricsWhereInput
    /**
     * Limit how many SystemMetrics to update.
     */
    limit?: number
  }

  /**
   * SystemMetrics upsert
   */
  export type SystemMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemMetrics to update in case it exists.
     */
    where: SystemMetricsWhereUniqueInput
    /**
     * In case the SystemMetrics found by the `where` argument doesn't exist, create a new SystemMetrics with this data.
     */
    create: XOR<SystemMetricsCreateInput, SystemMetricsUncheckedCreateInput>
    /**
     * In case the SystemMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemMetricsUpdateInput, SystemMetricsUncheckedUpdateInput>
  }

  /**
   * SystemMetrics delete
   */
  export type SystemMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter which SystemMetrics to delete.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics deleteMany
   */
  export type SystemMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemMetrics to delete
     */
    where?: SystemMetricsWhereInput
    /**
     * Limit how many SystemMetrics to delete.
     */
    limit?: number
  }

  /**
   * SystemMetrics without action
   */
  export type SystemMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
  }


  /**
   * Model ReportGeneration
   */

  export type AggregateReportGeneration = {
    _count: ReportGenerationCountAggregateOutputType | null
    _avg: ReportGenerationAvgAggregateOutputType | null
    _sum: ReportGenerationSumAggregateOutputType | null
    _min: ReportGenerationMinAggregateOutputType | null
    _max: ReportGenerationMaxAggregateOutputType | null
  }

  export type ReportGenerationAvgAggregateOutputType = {
    reportSize: number | null
    dataPoints: number | null
  }

  export type ReportGenerationSumAggregateOutputType = {
    reportSize: number | null
    dataPoints: number | null
  }

  export type ReportGenerationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reportType: string | null
    reportTitle: string | null
    reportFormat: string | null
    candidateId: string | null
    companyId: string | null
    dateRange: string | null
    filters: string | null
    generationStatus: string | null
    generatedAt: Date | null
    reportUrl: string | null
    reportSize: number | null
    keyFindings: string | null
    recommendations: string | null
    dataPoints: number | null
    requestedBy: string | null
    reportNotes: string | null
  }

  export type ReportGenerationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reportType: string | null
    reportTitle: string | null
    reportFormat: string | null
    candidateId: string | null
    companyId: string | null
    dateRange: string | null
    filters: string | null
    generationStatus: string | null
    generatedAt: Date | null
    reportUrl: string | null
    reportSize: number | null
    keyFindings: string | null
    recommendations: string | null
    dataPoints: number | null
    requestedBy: string | null
    reportNotes: string | null
  }

  export type ReportGenerationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    reportType: number
    reportTitle: number
    reportFormat: number
    candidateId: number
    companyId: number
    dateRange: number
    filters: number
    generationStatus: number
    generatedAt: number
    reportUrl: number
    reportSize: number
    keyFindings: number
    recommendations: number
    dataPoints: number
    requestedBy: number
    reportNotes: number
    _all: number
  }


  export type ReportGenerationAvgAggregateInputType = {
    reportSize?: true
    dataPoints?: true
  }

  export type ReportGenerationSumAggregateInputType = {
    reportSize?: true
    dataPoints?: true
  }

  export type ReportGenerationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    reportType?: true
    reportTitle?: true
    reportFormat?: true
    candidateId?: true
    companyId?: true
    dateRange?: true
    filters?: true
    generationStatus?: true
    generatedAt?: true
    reportUrl?: true
    reportSize?: true
    keyFindings?: true
    recommendations?: true
    dataPoints?: true
    requestedBy?: true
    reportNotes?: true
  }

  export type ReportGenerationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    reportType?: true
    reportTitle?: true
    reportFormat?: true
    candidateId?: true
    companyId?: true
    dateRange?: true
    filters?: true
    generationStatus?: true
    generatedAt?: true
    reportUrl?: true
    reportSize?: true
    keyFindings?: true
    recommendations?: true
    dataPoints?: true
    requestedBy?: true
    reportNotes?: true
  }

  export type ReportGenerationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    reportType?: true
    reportTitle?: true
    reportFormat?: true
    candidateId?: true
    companyId?: true
    dateRange?: true
    filters?: true
    generationStatus?: true
    generatedAt?: true
    reportUrl?: true
    reportSize?: true
    keyFindings?: true
    recommendations?: true
    dataPoints?: true
    requestedBy?: true
    reportNotes?: true
    _all?: true
  }

  export type ReportGenerationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportGeneration to aggregate.
     */
    where?: ReportGenerationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportGenerations to fetch.
     */
    orderBy?: ReportGenerationOrderByWithRelationInput | ReportGenerationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportGenerationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportGenerations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportGenerations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportGenerations
    **/
    _count?: true | ReportGenerationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportGenerationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportGenerationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportGenerationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportGenerationMaxAggregateInputType
  }

  export type GetReportGenerationAggregateType<T extends ReportGenerationAggregateArgs> = {
        [P in keyof T & keyof AggregateReportGeneration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportGeneration[P]>
      : GetScalarType<T[P], AggregateReportGeneration[P]>
  }




  export type ReportGenerationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportGenerationWhereInput
    orderBy?: ReportGenerationOrderByWithAggregationInput | ReportGenerationOrderByWithAggregationInput[]
    by: ReportGenerationScalarFieldEnum[] | ReportGenerationScalarFieldEnum
    having?: ReportGenerationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportGenerationCountAggregateInputType | true
    _avg?: ReportGenerationAvgAggregateInputType
    _sum?: ReportGenerationSumAggregateInputType
    _min?: ReportGenerationMinAggregateInputType
    _max?: ReportGenerationMaxAggregateInputType
  }

  export type ReportGenerationGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    reportType: string
    reportTitle: string
    reportFormat: string
    candidateId: string | null
    companyId: string | null
    dateRange: string | null
    filters: string | null
    generationStatus: string
    generatedAt: Date | null
    reportUrl: string | null
    reportSize: number | null
    keyFindings: string | null
    recommendations: string | null
    dataPoints: number | null
    requestedBy: string | null
    reportNotes: string | null
    _count: ReportGenerationCountAggregateOutputType | null
    _avg: ReportGenerationAvgAggregateOutputType | null
    _sum: ReportGenerationSumAggregateOutputType | null
    _min: ReportGenerationMinAggregateOutputType | null
    _max: ReportGenerationMaxAggregateOutputType | null
  }

  type GetReportGenerationGroupByPayload<T extends ReportGenerationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGenerationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGenerationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGenerationGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGenerationGroupByOutputType[P]>
        }
      >
    >


  export type ReportGenerationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportType?: boolean
    reportTitle?: boolean
    reportFormat?: boolean
    candidateId?: boolean
    companyId?: boolean
    dateRange?: boolean
    filters?: boolean
    generationStatus?: boolean
    generatedAt?: boolean
    reportUrl?: boolean
    reportSize?: boolean
    keyFindings?: boolean
    recommendations?: boolean
    dataPoints?: boolean
    requestedBy?: boolean
    reportNotes?: boolean
  }, ExtArgs["result"]["reportGeneration"]>

  export type ReportGenerationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportType?: boolean
    reportTitle?: boolean
    reportFormat?: boolean
    candidateId?: boolean
    companyId?: boolean
    dateRange?: boolean
    filters?: boolean
    generationStatus?: boolean
    generatedAt?: boolean
    reportUrl?: boolean
    reportSize?: boolean
    keyFindings?: boolean
    recommendations?: boolean
    dataPoints?: boolean
    requestedBy?: boolean
    reportNotes?: boolean
  }, ExtArgs["result"]["reportGeneration"]>

  export type ReportGenerationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportType?: boolean
    reportTitle?: boolean
    reportFormat?: boolean
    candidateId?: boolean
    companyId?: boolean
    dateRange?: boolean
    filters?: boolean
    generationStatus?: boolean
    generatedAt?: boolean
    reportUrl?: boolean
    reportSize?: boolean
    keyFindings?: boolean
    recommendations?: boolean
    dataPoints?: boolean
    requestedBy?: boolean
    reportNotes?: boolean
  }, ExtArgs["result"]["reportGeneration"]>

  export type ReportGenerationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportType?: boolean
    reportTitle?: boolean
    reportFormat?: boolean
    candidateId?: boolean
    companyId?: boolean
    dateRange?: boolean
    filters?: boolean
    generationStatus?: boolean
    generatedAt?: boolean
    reportUrl?: boolean
    reportSize?: boolean
    keyFindings?: boolean
    recommendations?: boolean
    dataPoints?: boolean
    requestedBy?: boolean
    reportNotes?: boolean
  }

  export type ReportGenerationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "reportType" | "reportTitle" | "reportFormat" | "candidateId" | "companyId" | "dateRange" | "filters" | "generationStatus" | "generatedAt" | "reportUrl" | "reportSize" | "keyFindings" | "recommendations" | "dataPoints" | "requestedBy" | "reportNotes", ExtArgs["result"]["reportGeneration"]>

  export type $ReportGenerationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportGeneration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      reportType: string
      reportTitle: string
      reportFormat: string
      candidateId: string | null
      companyId: string | null
      dateRange: string | null
      filters: string | null
      generationStatus: string
      generatedAt: Date | null
      reportUrl: string | null
      reportSize: number | null
      keyFindings: string | null
      recommendations: string | null
      dataPoints: number | null
      requestedBy: string | null
      reportNotes: string | null
    }, ExtArgs["result"]["reportGeneration"]>
    composites: {}
  }

  type ReportGenerationGetPayload<S extends boolean | null | undefined | ReportGenerationDefaultArgs> = $Result.GetResult<Prisma.$ReportGenerationPayload, S>

  type ReportGenerationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportGenerationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportGenerationCountAggregateInputType | true
    }

  export interface ReportGenerationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportGeneration'], meta: { name: 'ReportGeneration' } }
    /**
     * Find zero or one ReportGeneration that matches the filter.
     * @param {ReportGenerationFindUniqueArgs} args - Arguments to find a ReportGeneration
     * @example
     * // Get one ReportGeneration
     * const reportGeneration = await prisma.reportGeneration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportGenerationFindUniqueArgs>(args: SelectSubset<T, ReportGenerationFindUniqueArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportGeneration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportGenerationFindUniqueOrThrowArgs} args - Arguments to find a ReportGeneration
     * @example
     * // Get one ReportGeneration
     * const reportGeneration = await prisma.reportGeneration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportGenerationFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportGenerationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportGeneration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGenerationFindFirstArgs} args - Arguments to find a ReportGeneration
     * @example
     * // Get one ReportGeneration
     * const reportGeneration = await prisma.reportGeneration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportGenerationFindFirstArgs>(args?: SelectSubset<T, ReportGenerationFindFirstArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportGeneration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGenerationFindFirstOrThrowArgs} args - Arguments to find a ReportGeneration
     * @example
     * // Get one ReportGeneration
     * const reportGeneration = await prisma.reportGeneration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportGenerationFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportGenerationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportGenerations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGenerationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportGenerations
     * const reportGenerations = await prisma.reportGeneration.findMany()
     * 
     * // Get first 10 ReportGenerations
     * const reportGenerations = await prisma.reportGeneration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportGenerationWithIdOnly = await prisma.reportGeneration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportGenerationFindManyArgs>(args?: SelectSubset<T, ReportGenerationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportGeneration.
     * @param {ReportGenerationCreateArgs} args - Arguments to create a ReportGeneration.
     * @example
     * // Create one ReportGeneration
     * const ReportGeneration = await prisma.reportGeneration.create({
     *   data: {
     *     // ... data to create a ReportGeneration
     *   }
     * })
     * 
     */
    create<T extends ReportGenerationCreateArgs>(args: SelectSubset<T, ReportGenerationCreateArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportGenerations.
     * @param {ReportGenerationCreateManyArgs} args - Arguments to create many ReportGenerations.
     * @example
     * // Create many ReportGenerations
     * const reportGeneration = await prisma.reportGeneration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportGenerationCreateManyArgs>(args?: SelectSubset<T, ReportGenerationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportGenerations and returns the data saved in the database.
     * @param {ReportGenerationCreateManyAndReturnArgs} args - Arguments to create many ReportGenerations.
     * @example
     * // Create many ReportGenerations
     * const reportGeneration = await prisma.reportGeneration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportGenerations and only return the `id`
     * const reportGenerationWithIdOnly = await prisma.reportGeneration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportGenerationCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportGenerationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportGeneration.
     * @param {ReportGenerationDeleteArgs} args - Arguments to delete one ReportGeneration.
     * @example
     * // Delete one ReportGeneration
     * const ReportGeneration = await prisma.reportGeneration.delete({
     *   where: {
     *     // ... filter to delete one ReportGeneration
     *   }
     * })
     * 
     */
    delete<T extends ReportGenerationDeleteArgs>(args: SelectSubset<T, ReportGenerationDeleteArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportGeneration.
     * @param {ReportGenerationUpdateArgs} args - Arguments to update one ReportGeneration.
     * @example
     * // Update one ReportGeneration
     * const reportGeneration = await prisma.reportGeneration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportGenerationUpdateArgs>(args: SelectSubset<T, ReportGenerationUpdateArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportGenerations.
     * @param {ReportGenerationDeleteManyArgs} args - Arguments to filter ReportGenerations to delete.
     * @example
     * // Delete a few ReportGenerations
     * const { count } = await prisma.reportGeneration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportGenerationDeleteManyArgs>(args?: SelectSubset<T, ReportGenerationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportGenerations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGenerationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportGenerations
     * const reportGeneration = await prisma.reportGeneration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportGenerationUpdateManyArgs>(args: SelectSubset<T, ReportGenerationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportGenerations and returns the data updated in the database.
     * @param {ReportGenerationUpdateManyAndReturnArgs} args - Arguments to update many ReportGenerations.
     * @example
     * // Update many ReportGenerations
     * const reportGeneration = await prisma.reportGeneration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportGenerations and only return the `id`
     * const reportGenerationWithIdOnly = await prisma.reportGeneration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportGenerationUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportGenerationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportGeneration.
     * @param {ReportGenerationUpsertArgs} args - Arguments to update or create a ReportGeneration.
     * @example
     * // Update or create a ReportGeneration
     * const reportGeneration = await prisma.reportGeneration.upsert({
     *   create: {
     *     // ... data to create a ReportGeneration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportGeneration we want to update
     *   }
     * })
     */
    upsert<T extends ReportGenerationUpsertArgs>(args: SelectSubset<T, ReportGenerationUpsertArgs<ExtArgs>>): Prisma__ReportGenerationClient<$Result.GetResult<Prisma.$ReportGenerationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportGenerations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGenerationCountArgs} args - Arguments to filter ReportGenerations to count.
     * @example
     * // Count the number of ReportGenerations
     * const count = await prisma.reportGeneration.count({
     *   where: {
     *     // ... the filter for the ReportGenerations we want to count
     *   }
     * })
    **/
    count<T extends ReportGenerationCountArgs>(
      args?: Subset<T, ReportGenerationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportGenerationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportGeneration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGenerationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportGenerationAggregateArgs>(args: Subset<T, ReportGenerationAggregateArgs>): Prisma.PrismaPromise<GetReportGenerationAggregateType<T>>

    /**
     * Group by ReportGeneration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGenerationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGenerationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGenerationGroupByArgs['orderBy'] }
        : { orderBy?: ReportGenerationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGenerationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGenerationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportGeneration model
   */
  readonly fields: ReportGenerationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportGeneration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportGenerationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportGeneration model
   */
  interface ReportGenerationFieldRefs {
    readonly id: FieldRef<"ReportGeneration", 'String'>
    readonly createdAt: FieldRef<"ReportGeneration", 'DateTime'>
    readonly updatedAt: FieldRef<"ReportGeneration", 'DateTime'>
    readonly reportType: FieldRef<"ReportGeneration", 'String'>
    readonly reportTitle: FieldRef<"ReportGeneration", 'String'>
    readonly reportFormat: FieldRef<"ReportGeneration", 'String'>
    readonly candidateId: FieldRef<"ReportGeneration", 'String'>
    readonly companyId: FieldRef<"ReportGeneration", 'String'>
    readonly dateRange: FieldRef<"ReportGeneration", 'String'>
    readonly filters: FieldRef<"ReportGeneration", 'String'>
    readonly generationStatus: FieldRef<"ReportGeneration", 'String'>
    readonly generatedAt: FieldRef<"ReportGeneration", 'DateTime'>
    readonly reportUrl: FieldRef<"ReportGeneration", 'String'>
    readonly reportSize: FieldRef<"ReportGeneration", 'Int'>
    readonly keyFindings: FieldRef<"ReportGeneration", 'String'>
    readonly recommendations: FieldRef<"ReportGeneration", 'String'>
    readonly dataPoints: FieldRef<"ReportGeneration", 'Int'>
    readonly requestedBy: FieldRef<"ReportGeneration", 'String'>
    readonly reportNotes: FieldRef<"ReportGeneration", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportGeneration findUnique
   */
  export type ReportGenerationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * Filter, which ReportGeneration to fetch.
     */
    where: ReportGenerationWhereUniqueInput
  }

  /**
   * ReportGeneration findUniqueOrThrow
   */
  export type ReportGenerationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * Filter, which ReportGeneration to fetch.
     */
    where: ReportGenerationWhereUniqueInput
  }

  /**
   * ReportGeneration findFirst
   */
  export type ReportGenerationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * Filter, which ReportGeneration to fetch.
     */
    where?: ReportGenerationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportGenerations to fetch.
     */
    orderBy?: ReportGenerationOrderByWithRelationInput | ReportGenerationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportGenerations.
     */
    cursor?: ReportGenerationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportGenerations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportGenerations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportGenerations.
     */
    distinct?: ReportGenerationScalarFieldEnum | ReportGenerationScalarFieldEnum[]
  }

  /**
   * ReportGeneration findFirstOrThrow
   */
  export type ReportGenerationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * Filter, which ReportGeneration to fetch.
     */
    where?: ReportGenerationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportGenerations to fetch.
     */
    orderBy?: ReportGenerationOrderByWithRelationInput | ReportGenerationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportGenerations.
     */
    cursor?: ReportGenerationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportGenerations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportGenerations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportGenerations.
     */
    distinct?: ReportGenerationScalarFieldEnum | ReportGenerationScalarFieldEnum[]
  }

  /**
   * ReportGeneration findMany
   */
  export type ReportGenerationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * Filter, which ReportGenerations to fetch.
     */
    where?: ReportGenerationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportGenerations to fetch.
     */
    orderBy?: ReportGenerationOrderByWithRelationInput | ReportGenerationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportGenerations.
     */
    cursor?: ReportGenerationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportGenerations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportGenerations.
     */
    skip?: number
    distinct?: ReportGenerationScalarFieldEnum | ReportGenerationScalarFieldEnum[]
  }

  /**
   * ReportGeneration create
   */
  export type ReportGenerationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * The data needed to create a ReportGeneration.
     */
    data: XOR<ReportGenerationCreateInput, ReportGenerationUncheckedCreateInput>
  }

  /**
   * ReportGeneration createMany
   */
  export type ReportGenerationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportGenerations.
     */
    data: ReportGenerationCreateManyInput | ReportGenerationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportGeneration createManyAndReturn
   */
  export type ReportGenerationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * The data used to create many ReportGenerations.
     */
    data: ReportGenerationCreateManyInput | ReportGenerationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportGeneration update
   */
  export type ReportGenerationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * The data needed to update a ReportGeneration.
     */
    data: XOR<ReportGenerationUpdateInput, ReportGenerationUncheckedUpdateInput>
    /**
     * Choose, which ReportGeneration to update.
     */
    where: ReportGenerationWhereUniqueInput
  }

  /**
   * ReportGeneration updateMany
   */
  export type ReportGenerationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportGenerations.
     */
    data: XOR<ReportGenerationUpdateManyMutationInput, ReportGenerationUncheckedUpdateManyInput>
    /**
     * Filter which ReportGenerations to update
     */
    where?: ReportGenerationWhereInput
    /**
     * Limit how many ReportGenerations to update.
     */
    limit?: number
  }

  /**
   * ReportGeneration updateManyAndReturn
   */
  export type ReportGenerationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * The data used to update ReportGenerations.
     */
    data: XOR<ReportGenerationUpdateManyMutationInput, ReportGenerationUncheckedUpdateManyInput>
    /**
     * Filter which ReportGenerations to update
     */
    where?: ReportGenerationWhereInput
    /**
     * Limit how many ReportGenerations to update.
     */
    limit?: number
  }

  /**
   * ReportGeneration upsert
   */
  export type ReportGenerationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * The filter to search for the ReportGeneration to update in case it exists.
     */
    where: ReportGenerationWhereUniqueInput
    /**
     * In case the ReportGeneration found by the `where` argument doesn't exist, create a new ReportGeneration with this data.
     */
    create: XOR<ReportGenerationCreateInput, ReportGenerationUncheckedCreateInput>
    /**
     * In case the ReportGeneration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportGenerationUpdateInput, ReportGenerationUncheckedUpdateInput>
  }

  /**
   * ReportGeneration delete
   */
  export type ReportGenerationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
    /**
     * Filter which ReportGeneration to delete.
     */
    where: ReportGenerationWhereUniqueInput
  }

  /**
   * ReportGeneration deleteMany
   */
  export type ReportGenerationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportGenerations to delete
     */
    where?: ReportGenerationWhereInput
    /**
     * Limit how many ReportGenerations to delete.
     */
    limit?: number
  }

  /**
   * ReportGeneration without action
   */
  export type ReportGenerationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportGeneration
     */
    select?: ReportGenerationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportGeneration
     */
    omit?: ReportGenerationOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    isActive: 'isActive',
    lastLogin: 'lastLogin',
    candidateId: 'candidateId',
    companyId: 'companyId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    cellPhone: 'cellPhone',
    nationality: 'nationality',
    currentLocation: 'currentLocation',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    maritalStatus: 'maritalStatus',
    currentPosition: 'currentPosition',
    experience: 'experience',
    education: 'education',
    technicalSkills: 'technicalSkills',
    languageProficiency: 'languageProficiency',
    certifications: 'certifications',
    culturalBackground: 'culturalBackground',
    workStylePreference: 'workStylePreference',
    communicationStyle: 'communicationStyle',
    adaptabilityScore: 'adaptabilityScore',
    teamworkOrientation: 'teamworkOrientation',
    leadershipStyle: 'leadershipStyle',
    conflictResolution: 'conflictResolution',
    timeManagement: 'timeManagement',
    waHarmonyAlignment: 'waHarmonyAlignment',
    kaizenMindset: 'kaizenMindset',
    omotenashiService: 'omotenashiService',
    bushidoDedication: 'bushidoDedication',
    nemawashiConsensus: 'nemawashiConsensus',
    candidateStatus: 'candidateStatus',
    availabilityDate: 'availabilityDate',
    salaryExpectation: 'salaryExpectation',
    preferredLocation: 'preferredLocation',
    visaStatus: 'visaStatus'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    companyName: 'companyName',
    industry: 'industry',
    companySize: 'companySize',
    headquarters: 'headquarters',
    website: 'website',
    description: 'description',
    corporateCulture: 'corporateCulture',
    workEnvironment: 'workEnvironment',
    managementStyle: 'managementStyle',
    communicationStyle: 'communicationStyle',
    diversityPolicy: 'diversityPolicy',
    waHarmonyImportance: 'waHarmonyImportance',
    kaizenImplementation: 'kaizenImplementation',
    omotenashiStandards: 'omotenashiStandards',
    hierarchyStructure: 'hierarchyStructure',
    consensusDecisionMaking: 'consensusDecisionMaking',
    revenue: 'revenue',
    foundedYear: 'foundedYear',
    employeeCount: 'employeeCount',
    businessModel: 'businessModel',
    competitiveAdvantage: 'competitiveAdvantage',
    preferredCandidateProfile: 'preferredCandidateProfile',
    culturalRequirements: 'culturalRequirements',
    languageRequirements: 'languageRequirements'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const JobPostingScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    jobTitle: 'jobTitle',
    department: 'department',
    location: 'location',
    employmentType: 'employmentType',
    experienceLevel: 'experienceLevel',
    jobDescription: 'jobDescription',
    responsibilities: 'responsibilities',
    requirements: 'requirements',
    qualifications: 'qualifications',
    technicalSkills: 'technicalSkills',
    salaryRangeMinimum: 'salaryRangeMinimum',
    salaryRangeMaximum: 'salaryRangeMaximum',
    benefits: 'benefits',
    bonusStructure: 'bonusStructure',
    culturalFitRequirements: 'culturalFitRequirements',
    languageRequirements: 'languageRequirements',
    communicationStyle: 'communicationStyle',
    teamworkExpectation: 'teamworkExpectation',
    leadershipExpectation: 'leadershipExpectation',
    waHarmonyRequired: 'waHarmonyRequired',
    kaizenParticipation: 'kaizenParticipation',
    omotenashiExpectation: 'omotenashiExpectation',
    hierarchyRespect: 'hierarchyRespect',
    consensusBuilding: 'consensusBuilding',
    postingStatus: 'postingStatus',
    applicationDeadline: 'applicationDeadline',
    startDate: 'startDate',
    urgencyLevel: 'urgencyLevel',
    companyId: 'companyId'
  };

  export type JobPostingScalarFieldEnum = (typeof JobPostingScalarFieldEnum)[keyof typeof JobPostingScalarFieldEnum]


  export const CulturalAssessmentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    assessmentType: 'assessmentType',
    assessmentDate: 'assessmentDate',
    overallScore: 'overallScore',
    culturalFitPrediction: 'culturalFitPrediction',
    integrationTimelineDays: 'integrationTimelineDays',
    waHarmonyScore: 'waHarmonyScore',
    kaizenImprovementScore: 'kaizenImprovementScore',
    omotenashiServiceScore: 'omotenashiServiceScore',
    bushidoDedicationScore: 'bushidoDedicationScore',
    nemawashiConsensusScore: 'nemawashiConsensusScore',
    honneTatemaeBalance: 'honneTatemaeBalance',
    indirectCommunication: 'indirectCommunication',
    nonverbalAwareness: 'nonverbalAwareness',
    silenceComfort: 'silenceComfort',
    contextualUnderstanding: 'contextualUnderstanding',
    senpaiKohaiRespect: 'senpaiKohaiRespect',
    authorityRecognition: 'authorityRecognition',
    formalityAdherence: 'formalityAdherence',
    statusAwareness: 'statusAwareness',
    hierarchyNavigation: 'hierarchyNavigation',
    groupHarmonyPriority: 'groupHarmonyPriority',
    collectiveDecisionMaking: 'collectiveDecisionMaking',
    consensusBuilding: 'consensusBuilding',
    teamLoyalty: 'teamLoyalty',
    groupAccountability: 'groupAccountability',
    dedicationToWork: 'dedicationToWork',
    qualityFocus: 'qualityFocus',
    continuousImprovement: 'continuousImprovement',
    attentionToDetail: 'attentionToDetail',
    processAdherence: 'processAdherence',
    punctualityImportance: 'punctualityImportance',
    timeRespect: 'timeRespect',
    scheduleAdherence: 'scheduleAdherence',
    planningOrientation: 'planningOrientation',
    deadlineCommitment: 'deadlineCommitment',
    relationshipInvestment: 'relationshipInvestment',
    trustBuilding: 'trustBuilding',
    longTermOrientation: 'longTermOrientation',
    loyaltyDemonstration: 'loyaltyDemonstration',
    networkMaintenance: 'networkMaintenance',
    changeAcceptance: 'changeAcceptance',
    flexibilityInApproach: 'flexibilityInApproach',
    learningOrientation: 'learningOrientation',
    culturalAdaptability: 'culturalAdaptability',
    resilienceInChallenges: 'resilienceInChallenges',
    professionalEtiquette: 'professionalEtiquette',
    businessCardProtocol: 'businessCardProtocol',
    meetingParticipation: 'meetingParticipation',
    presentationSkills: 'presentationSkills',
    clientServiceOrientation: 'clientServiceOrientation',
    creativeThinking: 'creativeThinking',
    innovationBalance: 'innovationBalance',
    riskAssessment: 'riskAssessment',
    dimensionScores: 'dimensionScores',
    culturalTrainingNeeded: 'culturalTrainingNeeded',
    assessmentNotes: 'assessmentNotes'
  };

  export type CulturalAssessmentScalarFieldEnum = (typeof CulturalAssessmentScalarFieldEnum)[keyof typeof CulturalAssessmentScalarFieldEnum]


  export const PsychologicalAssessmentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    assessmentType: 'assessmentType',
    assessmentDate: 'assessmentDate',
    openness: 'openness',
    conscientiousness: 'conscientiousness',
    extraversion: 'extraversion',
    agreeableness: 'agreeableness',
    neuroticism: 'neuroticism',
    logicalReasoning: 'logicalReasoning',
    numericalAbility: 'numericalAbility',
    verbalAbility: 'verbalAbility',
    spatialAbility: 'spatialAbility',
    memoryCapacity: 'memoryCapacity',
    selfAwareness: 'selfAwareness',
    selfRegulation: 'selfRegulation',
    motivation: 'motivation',
    empathy: 'empathy',
    socialSkills: 'socialSkills',
    stressResilience: 'stressResilience',
    teamworkAbility: 'teamworkAbility',
    leadershipPotential: 'leadershipPotential',
    adaptability: 'adaptability',
    problemSolving: 'problemSolving',
    overallScore: 'overallScore',
    recommendations: 'recommendations',
    assessmentNotes: 'assessmentNotes'
  };

  export type PsychologicalAssessmentScalarFieldEnum = (typeof PsychologicalAssessmentScalarFieldEnum)[keyof typeof PsychologicalAssessmentScalarFieldEnum]


  export const LanguageAssessmentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    language: 'language',
    assessmentDate: 'assessmentDate',
    assessmentType: 'assessmentType',
    speakingLevel: 'speakingLevel',
    listeningLevel: 'listeningLevel',
    readingLevel: 'readingLevel',
    writingLevel: 'writingLevel',
    overallScore: 'overallScore',
    speakingScore: 'speakingScore',
    listeningScore: 'listeningScore',
    readingScore: 'readingScore',
    writingScore: 'writingScore',
    businessCommunication: 'businessCommunication',
    technicalVocabulary: 'technicalVocabulary',
    presentationSkills: 'presentationSkills',
    negotiationSkills: 'negotiationSkills',
    certificationLevel: 'certificationLevel',
    certificationDate: 'certificationDate',
    assessmentNotes: 'assessmentNotes'
  };

  export type LanguageAssessmentScalarFieldEnum = (typeof LanguageAssessmentScalarFieldEnum)[keyof typeof LanguageAssessmentScalarFieldEnum]


  export const ProfessionalAssessmentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    assessmentType: 'assessmentType',
    assessmentDate: 'assessmentDate',
    technicalProficiency: 'technicalProficiency',
    toolsAndTechnologies: 'toolsAndTechnologies',
    industryKnowledge: 'industryKnowledge',
    problemSolvingAbility: 'problemSolvingAbility',
    innovationCapability: 'innovationCapability',
    projectManagement: 'projectManagement',
    teamLeadership: 'teamLeadership',
    clientManagement: 'clientManagement',
    strategicThinking: 'strategicThinking',
    analyticalSkills: 'analyticalSkills',
    domainExpertise: 'domainExpertise',
    regulatoryKnowledge: 'regulatoryKnowledge',
    marketUnderstanding: 'marketUnderstanding',
    competitorAwareness: 'competitorAwareness',
    overallScore: 'overallScore',
    skillGaps: 'skillGaps',
    developmentPlan: 'developmentPlan',
    assessmentNotes: 'assessmentNotes'
  };

  export type ProfessionalAssessmentScalarFieldEnum = (typeof ProfessionalAssessmentScalarFieldEnum)[keyof typeof ProfessionalAssessmentScalarFieldEnum]


  export const InterviewSessionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    applicationId: 'applicationId',
    interviewType: 'interviewType',
    interviewRound: 'interviewRound',
    interviewDate: 'interviewDate',
    duration: 'duration',
    technicalScore: 'technicalScore',
    culturalFitScore: 'culturalFitScore',
    communicationScore: 'communicationScore',
    motivationScore: 'motivationScore',
    overallScore: 'overallScore',
    strengths: 'strengths',
    weaknesses: 'weaknesses',
    recommendations: 'recommendations',
    interviewNotes: 'interviewNotes',
    recommendation: 'recommendation',
    interviewerName: 'interviewerName',
    interviewerRole: 'interviewerRole'
  };

  export type InterviewSessionScalarFieldEnum = (typeof InterviewSessionScalarFieldEnum)[keyof typeof InterviewSessionScalarFieldEnum]


  export const OnboardingRecordScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    companyId: 'companyId',
    startDate: 'startDate',
    onboardingStatus: 'onboardingStatus',
    documentationComplete: 'documentationComplete',
    systemAccessGranted: 'systemAccessGranted',
    trainingCompleted: 'trainingCompleted',
    culturalOrientationDone: 'culturalOrientationDone',
    mentorAssigned: 'mentorAssigned',
    culturalAdaptationScore: 'culturalAdaptationScore',
    integrationChallenges: 'integrationChallenges',
    supportProvided: 'supportProvided',
    expectedCompletionDate: 'expectedCompletionDate',
    actualCompletionDate: 'actualCompletionDate',
    onboardingNotes: 'onboardingNotes'
  };

  export type OnboardingRecordScalarFieldEnum = (typeof OnboardingRecordScalarFieldEnum)[keyof typeof OnboardingRecordScalarFieldEnum]


  export const PerformanceReviewScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    companyId: 'companyId',
    reviewPeriod: 'reviewPeriod',
    reviewDate: 'reviewDate',
    reviewType: 'reviewType',
    technicalPerformance: 'technicalPerformance',
    culturalIntegration: 'culturalIntegration',
    teamCollaboration: 'teamCollaboration',
    communicationSkills: 'communicationSkills',
    goalAchievement: 'goalAchievement',
    overallPerformance: 'overallPerformance',
    culturalFitImprovement: 'culturalFitImprovement',
    japaneseBusinessEtiquette: 'japaneseBusinessEtiquette',
    teamHarmonyContribution: 'teamHarmonyContribution',
    achievements: 'achievements',
    areasForImprovement: 'areasForImprovement',
    developmentGoals: 'developmentGoals',
    reviewerName: 'reviewerName',
    reviewerRole: 'reviewerRole',
    reviewNotes: 'reviewNotes'
  };

  export type PerformanceReviewScalarFieldEnum = (typeof PerformanceReviewScalarFieldEnum)[keyof typeof PerformanceReviewScalarFieldEnum]


  export const CandidateStatusHistoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    candidateId: 'candidateId',
    previousStatus: 'previousStatus',
    newStatus: 'newStatus',
    changeReason: 'changeReason',
    changedBy: 'changedBy',
    notes: 'notes'
  };

  export type CandidateStatusHistoryScalarFieldEnum = (typeof CandidateStatusHistoryScalarFieldEnum)[keyof typeof CandidateStatusHistoryScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    candidateId: 'candidateId',
    companyId: 'companyId',
    jobPostingId: 'jobPostingId',
    applicationStatus: 'applicationStatus',
    applicationDate: 'applicationDate',
    overallMatchScore: 'overallMatchScore',
    technicalMatchScore: 'technicalMatchScore',
    culturalFitScore: 'culturalFitScore',
    languageMatchScore: 'languageMatchScore',
    experienceMatchScore: 'experienceMatchScore',
    resumeUrl: 'resumeUrl',
    coverLetterUrl: 'coverLetterUrl',
    portfolioUrl: 'portfolioUrl',
    finalDecision: 'finalDecision',
    decisionDate: 'decisionDate',
    decisionReason: 'decisionReason',
    applicationNotes: 'applicationNotes'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const MarketIntelligenceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dataType: 'dataType',
    industry: 'industry',
    location: 'location',
    timeframe: 'timeframe',
    averageSalary: 'averageSalary',
    salaryRange: 'salaryRange',
    demandLevel: 'demandLevel',
    supplyLevel: 'supplyLevel',
    inDemandSkills: 'inDemandSkills',
    emergingSkills: 'emergingSkills',
    decliningSkills: 'decliningSkills',
    culturalTrends: 'culturalTrends',
    adaptationChallenges: 'adaptationChallenges',
    successFactors: 'successFactors',
    dataSource: 'dataSource',
    reliability: 'reliability',
    marketNotes: 'marketNotes'
  };

  export type MarketIntelligenceScalarFieldEnum = (typeof MarketIntelligenceScalarFieldEnum)[keyof typeof MarketIntelligenceScalarFieldEnum]


  export const SystemMetricsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    metricType: 'metricType',
    metricName: 'metricName',
    metricValue: 'metricValue',
    metricUnit: 'metricUnit',
    timeframe: 'timeframe',
    category: 'category',
    subcategory: 'subcategory',
    calculationMethod: 'calculationMethod',
    dataPoints: 'dataPoints',
    confidence: 'confidence',
    metricNotes: 'metricNotes'
  };

  export type SystemMetricsScalarFieldEnum = (typeof SystemMetricsScalarFieldEnum)[keyof typeof SystemMetricsScalarFieldEnum]


  export const ReportGenerationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reportType: 'reportType',
    reportTitle: 'reportTitle',
    reportFormat: 'reportFormat',
    candidateId: 'candidateId',
    companyId: 'companyId',
    dateRange: 'dateRange',
    filters: 'filters',
    generationStatus: 'generationStatus',
    generatedAt: 'generatedAt',
    reportUrl: 'reportUrl',
    reportSize: 'reportSize',
    keyFindings: 'keyFindings',
    recommendations: 'recommendations',
    dataPoints: 'dataPoints',
    requestedBy: 'requestedBy',
    reportNotes: 'reportNotes'
  };

  export type ReportGenerationScalarFieldEnum = (typeof ReportGenerationScalarFieldEnum)[keyof typeof ReportGenerationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CandidateStatus'
   */
  export type EnumCandidateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CandidateStatus'>
    


  /**
   * Reference to a field of type 'CandidateStatus[]'
   */
  export type ListEnumCandidateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CandidateStatus[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'PostingStatus'
   */
  export type EnumPostingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostingStatus'>
    


  /**
   * Reference to a field of type 'PostingStatus[]'
   */
  export type ListEnumPostingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostingStatus[]'>
    


  /**
   * Reference to a field of type 'ApplicationStatus'
   */
  export type EnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus'>
    


  /**
   * Reference to a field of type 'ApplicationStatus[]'
   */
  export type ListEnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    candidateId?: StringNullableFilter<"User"> | string | null
    companyId?: StringNullableFilter<"User"> | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    candidateId?: string
    companyId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
  }, "id" | "email" | "candidateId" | "companyId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    candidateId?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CandidateWhereInput = {
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    id?: StringFilter<"Candidate"> | string
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    firstName?: StringFilter<"Candidate"> | string
    lastName?: StringFilter<"Candidate"> | string
    email?: StringFilter<"Candidate"> | string
    cellPhone?: StringNullableFilter<"Candidate"> | string | null
    nationality?: StringFilter<"Candidate"> | string
    currentLocation?: StringFilter<"Candidate"> | string
    dateOfBirth?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    gender?: StringNullableFilter<"Candidate"> | string | null
    maritalStatus?: StringNullableFilter<"Candidate"> | string | null
    currentPosition?: StringNullableFilter<"Candidate"> | string | null
    experience?: IntNullableFilter<"Candidate"> | number | null
    education?: StringNullableFilter<"Candidate"> | string | null
    technicalSkills?: StringNullableFilter<"Candidate"> | string | null
    languageProficiency?: StringNullableFilter<"Candidate"> | string | null
    certifications?: StringNullableFilter<"Candidate"> | string | null
    culturalBackground?: StringNullableFilter<"Candidate"> | string | null
    workStylePreference?: StringNullableFilter<"Candidate"> | string | null
    communicationStyle?: StringNullableFilter<"Candidate"> | string | null
    adaptabilityScore?: FloatNullableFilter<"Candidate"> | number | null
    teamworkOrientation?: StringNullableFilter<"Candidate"> | string | null
    leadershipStyle?: StringNullableFilter<"Candidate"> | string | null
    conflictResolution?: StringNullableFilter<"Candidate"> | string | null
    timeManagement?: StringNullableFilter<"Candidate"> | string | null
    waHarmonyAlignment?: FloatNullableFilter<"Candidate"> | number | null
    kaizenMindset?: FloatNullableFilter<"Candidate"> | number | null
    omotenashiService?: FloatNullableFilter<"Candidate"> | number | null
    bushidoDedication?: FloatNullableFilter<"Candidate"> | number | null
    nemawashiConsensus?: FloatNullableFilter<"Candidate"> | number | null
    candidateStatus?: EnumCandidateStatusFilter<"Candidate"> | $Enums.CandidateStatus
    availabilityDate?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    salaryExpectation?: IntNullableFilter<"Candidate"> | number | null
    preferredLocation?: StringNullableFilter<"Candidate"> | string | null
    visaStatus?: StringNullableFilter<"Candidate"> | string | null
    applications?: ApplicationListRelationFilter
    culturalAssessments?: CulturalAssessmentListRelationFilter
    psychologicalAssessments?: PsychologicalAssessmentListRelationFilter
    languageAssessments?: LanguageAssessmentListRelationFilter
    professionalAssessments?: ProfessionalAssessmentListRelationFilter
    interviewSessions?: InterviewSessionListRelationFilter
    onboardingRecords?: OnboardingRecordListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
    statusHistory?: CandidateStatusHistoryListRelationFilter
  }

  export type CandidateOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    cellPhone?: SortOrderInput | SortOrder
    nationality?: SortOrder
    currentLocation?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    currentPosition?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    technicalSkills?: SortOrderInput | SortOrder
    languageProficiency?: SortOrderInput | SortOrder
    certifications?: SortOrderInput | SortOrder
    culturalBackground?: SortOrderInput | SortOrder
    workStylePreference?: SortOrderInput | SortOrder
    communicationStyle?: SortOrderInput | SortOrder
    adaptabilityScore?: SortOrderInput | SortOrder
    teamworkOrientation?: SortOrderInput | SortOrder
    leadershipStyle?: SortOrderInput | SortOrder
    conflictResolution?: SortOrderInput | SortOrder
    timeManagement?: SortOrderInput | SortOrder
    waHarmonyAlignment?: SortOrderInput | SortOrder
    kaizenMindset?: SortOrderInput | SortOrder
    omotenashiService?: SortOrderInput | SortOrder
    bushidoDedication?: SortOrderInput | SortOrder
    nemawashiConsensus?: SortOrderInput | SortOrder
    candidateStatus?: SortOrder
    availabilityDate?: SortOrderInput | SortOrder
    salaryExpectation?: SortOrderInput | SortOrder
    preferredLocation?: SortOrderInput | SortOrder
    visaStatus?: SortOrderInput | SortOrder
    applications?: ApplicationOrderByRelationAggregateInput
    culturalAssessments?: CulturalAssessmentOrderByRelationAggregateInput
    psychologicalAssessments?: PsychologicalAssessmentOrderByRelationAggregateInput
    languageAssessments?: LanguageAssessmentOrderByRelationAggregateInput
    professionalAssessments?: ProfessionalAssessmentOrderByRelationAggregateInput
    interviewSessions?: InterviewSessionOrderByRelationAggregateInput
    onboardingRecords?: OnboardingRecordOrderByRelationAggregateInput
    performanceReviews?: PerformanceReviewOrderByRelationAggregateInput
    statusHistory?: CandidateStatusHistoryOrderByRelationAggregateInput
  }

  export type CandidateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    firstName?: StringFilter<"Candidate"> | string
    lastName?: StringFilter<"Candidate"> | string
    cellPhone?: StringNullableFilter<"Candidate"> | string | null
    nationality?: StringFilter<"Candidate"> | string
    currentLocation?: StringFilter<"Candidate"> | string
    dateOfBirth?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    gender?: StringNullableFilter<"Candidate"> | string | null
    maritalStatus?: StringNullableFilter<"Candidate"> | string | null
    currentPosition?: StringNullableFilter<"Candidate"> | string | null
    experience?: IntNullableFilter<"Candidate"> | number | null
    education?: StringNullableFilter<"Candidate"> | string | null
    technicalSkills?: StringNullableFilter<"Candidate"> | string | null
    languageProficiency?: StringNullableFilter<"Candidate"> | string | null
    certifications?: StringNullableFilter<"Candidate"> | string | null
    culturalBackground?: StringNullableFilter<"Candidate"> | string | null
    workStylePreference?: StringNullableFilter<"Candidate"> | string | null
    communicationStyle?: StringNullableFilter<"Candidate"> | string | null
    adaptabilityScore?: FloatNullableFilter<"Candidate"> | number | null
    teamworkOrientation?: StringNullableFilter<"Candidate"> | string | null
    leadershipStyle?: StringNullableFilter<"Candidate"> | string | null
    conflictResolution?: StringNullableFilter<"Candidate"> | string | null
    timeManagement?: StringNullableFilter<"Candidate"> | string | null
    waHarmonyAlignment?: FloatNullableFilter<"Candidate"> | number | null
    kaizenMindset?: FloatNullableFilter<"Candidate"> | number | null
    omotenashiService?: FloatNullableFilter<"Candidate"> | number | null
    bushidoDedication?: FloatNullableFilter<"Candidate"> | number | null
    nemawashiConsensus?: FloatNullableFilter<"Candidate"> | number | null
    candidateStatus?: EnumCandidateStatusFilter<"Candidate"> | $Enums.CandidateStatus
    availabilityDate?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    salaryExpectation?: IntNullableFilter<"Candidate"> | number | null
    preferredLocation?: StringNullableFilter<"Candidate"> | string | null
    visaStatus?: StringNullableFilter<"Candidate"> | string | null
    applications?: ApplicationListRelationFilter
    culturalAssessments?: CulturalAssessmentListRelationFilter
    psychologicalAssessments?: PsychologicalAssessmentListRelationFilter
    languageAssessments?: LanguageAssessmentListRelationFilter
    professionalAssessments?: ProfessionalAssessmentListRelationFilter
    interviewSessions?: InterviewSessionListRelationFilter
    onboardingRecords?: OnboardingRecordListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
    statusHistory?: CandidateStatusHistoryListRelationFilter
  }, "id" | "email">

  export type CandidateOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    cellPhone?: SortOrderInput | SortOrder
    nationality?: SortOrder
    currentLocation?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    currentPosition?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    technicalSkills?: SortOrderInput | SortOrder
    languageProficiency?: SortOrderInput | SortOrder
    certifications?: SortOrderInput | SortOrder
    culturalBackground?: SortOrderInput | SortOrder
    workStylePreference?: SortOrderInput | SortOrder
    communicationStyle?: SortOrderInput | SortOrder
    adaptabilityScore?: SortOrderInput | SortOrder
    teamworkOrientation?: SortOrderInput | SortOrder
    leadershipStyle?: SortOrderInput | SortOrder
    conflictResolution?: SortOrderInput | SortOrder
    timeManagement?: SortOrderInput | SortOrder
    waHarmonyAlignment?: SortOrderInput | SortOrder
    kaizenMindset?: SortOrderInput | SortOrder
    omotenashiService?: SortOrderInput | SortOrder
    bushidoDedication?: SortOrderInput | SortOrder
    nemawashiConsensus?: SortOrderInput | SortOrder
    candidateStatus?: SortOrder
    availabilityDate?: SortOrderInput | SortOrder
    salaryExpectation?: SortOrderInput | SortOrder
    preferredLocation?: SortOrderInput | SortOrder
    visaStatus?: SortOrderInput | SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _avg?: CandidateAvgOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
    _sum?: CandidateSumOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    OR?: CandidateScalarWhereWithAggregatesInput[]
    NOT?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Candidate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
    firstName?: StringWithAggregatesFilter<"Candidate"> | string
    lastName?: StringWithAggregatesFilter<"Candidate"> | string
    email?: StringWithAggregatesFilter<"Candidate"> | string
    cellPhone?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    nationality?: StringWithAggregatesFilter<"Candidate"> | string
    currentLocation?: StringWithAggregatesFilter<"Candidate"> | string
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Candidate"> | Date | string | null
    gender?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    maritalStatus?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    currentPosition?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    experience?: IntNullableWithAggregatesFilter<"Candidate"> | number | null
    education?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    technicalSkills?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    languageProficiency?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    certifications?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    culturalBackground?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    workStylePreference?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    communicationStyle?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    adaptabilityScore?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    teamworkOrientation?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    leadershipStyle?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    conflictResolution?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    timeManagement?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    waHarmonyAlignment?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    kaizenMindset?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    omotenashiService?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    bushidoDedication?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    nemawashiConsensus?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    candidateStatus?: EnumCandidateStatusWithAggregatesFilter<"Candidate"> | $Enums.CandidateStatus
    availabilityDate?: DateTimeNullableWithAggregatesFilter<"Candidate"> | Date | string | null
    salaryExpectation?: IntNullableWithAggregatesFilter<"Candidate"> | number | null
    preferredLocation?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    visaStatus?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    companyName?: StringFilter<"Company"> | string
    industry?: StringFilter<"Company"> | string
    companySize?: StringFilter<"Company"> | string
    headquarters?: StringFilter<"Company"> | string
    website?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    corporateCulture?: StringNullableFilter<"Company"> | string | null
    workEnvironment?: StringNullableFilter<"Company"> | string | null
    managementStyle?: StringNullableFilter<"Company"> | string | null
    communicationStyle?: StringNullableFilter<"Company"> | string | null
    diversityPolicy?: StringNullableFilter<"Company"> | string | null
    waHarmonyImportance?: FloatNullableFilter<"Company"> | number | null
    kaizenImplementation?: FloatNullableFilter<"Company"> | number | null
    omotenashiStandards?: FloatNullableFilter<"Company"> | number | null
    hierarchyStructure?: StringNullableFilter<"Company"> | string | null
    consensusDecisionMaking?: FloatNullableFilter<"Company"> | number | null
    revenue?: BigIntNullableFilter<"Company"> | bigint | number | null
    foundedYear?: IntNullableFilter<"Company"> | number | null
    employeeCount?: IntNullableFilter<"Company"> | number | null
    businessModel?: StringNullableFilter<"Company"> | string | null
    competitiveAdvantage?: StringNullableFilter<"Company"> | string | null
    preferredCandidateProfile?: StringNullableFilter<"Company"> | string | null
    culturalRequirements?: StringNullableFilter<"Company"> | string | null
    languageRequirements?: StringNullableFilter<"Company"> | string | null
    jobPostings?: JobPostingListRelationFilter
    applications?: ApplicationListRelationFilter
    onboardingRecords?: OnboardingRecordListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    headquarters?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    corporateCulture?: SortOrderInput | SortOrder
    workEnvironment?: SortOrderInput | SortOrder
    managementStyle?: SortOrderInput | SortOrder
    communicationStyle?: SortOrderInput | SortOrder
    diversityPolicy?: SortOrderInput | SortOrder
    waHarmonyImportance?: SortOrderInput | SortOrder
    kaizenImplementation?: SortOrderInput | SortOrder
    omotenashiStandards?: SortOrderInput | SortOrder
    hierarchyStructure?: SortOrderInput | SortOrder
    consensusDecisionMaking?: SortOrderInput | SortOrder
    revenue?: SortOrderInput | SortOrder
    foundedYear?: SortOrderInput | SortOrder
    employeeCount?: SortOrderInput | SortOrder
    businessModel?: SortOrderInput | SortOrder
    competitiveAdvantage?: SortOrderInput | SortOrder
    preferredCandidateProfile?: SortOrderInput | SortOrder
    culturalRequirements?: SortOrderInput | SortOrder
    languageRequirements?: SortOrderInput | SortOrder
    jobPostings?: JobPostingOrderByRelationAggregateInput
    applications?: ApplicationOrderByRelationAggregateInput
    onboardingRecords?: OnboardingRecordOrderByRelationAggregateInput
    performanceReviews?: PerformanceReviewOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyName?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    industry?: StringFilter<"Company"> | string
    companySize?: StringFilter<"Company"> | string
    headquarters?: StringFilter<"Company"> | string
    website?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    corporateCulture?: StringNullableFilter<"Company"> | string | null
    workEnvironment?: StringNullableFilter<"Company"> | string | null
    managementStyle?: StringNullableFilter<"Company"> | string | null
    communicationStyle?: StringNullableFilter<"Company"> | string | null
    diversityPolicy?: StringNullableFilter<"Company"> | string | null
    waHarmonyImportance?: FloatNullableFilter<"Company"> | number | null
    kaizenImplementation?: FloatNullableFilter<"Company"> | number | null
    omotenashiStandards?: FloatNullableFilter<"Company"> | number | null
    hierarchyStructure?: StringNullableFilter<"Company"> | string | null
    consensusDecisionMaking?: FloatNullableFilter<"Company"> | number | null
    revenue?: BigIntNullableFilter<"Company"> | bigint | number | null
    foundedYear?: IntNullableFilter<"Company"> | number | null
    employeeCount?: IntNullableFilter<"Company"> | number | null
    businessModel?: StringNullableFilter<"Company"> | string | null
    competitiveAdvantage?: StringNullableFilter<"Company"> | string | null
    preferredCandidateProfile?: StringNullableFilter<"Company"> | string | null
    culturalRequirements?: StringNullableFilter<"Company"> | string | null
    languageRequirements?: StringNullableFilter<"Company"> | string | null
    jobPostings?: JobPostingListRelationFilter
    applications?: ApplicationListRelationFilter
    onboardingRecords?: OnboardingRecordListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
  }, "id" | "companyName">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    headquarters?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    corporateCulture?: SortOrderInput | SortOrder
    workEnvironment?: SortOrderInput | SortOrder
    managementStyle?: SortOrderInput | SortOrder
    communicationStyle?: SortOrderInput | SortOrder
    diversityPolicy?: SortOrderInput | SortOrder
    waHarmonyImportance?: SortOrderInput | SortOrder
    kaizenImplementation?: SortOrderInput | SortOrder
    omotenashiStandards?: SortOrderInput | SortOrder
    hierarchyStructure?: SortOrderInput | SortOrder
    consensusDecisionMaking?: SortOrderInput | SortOrder
    revenue?: SortOrderInput | SortOrder
    foundedYear?: SortOrderInput | SortOrder
    employeeCount?: SortOrderInput | SortOrder
    businessModel?: SortOrderInput | SortOrder
    competitiveAdvantage?: SortOrderInput | SortOrder
    preferredCandidateProfile?: SortOrderInput | SortOrder
    culturalRequirements?: SortOrderInput | SortOrder
    languageRequirements?: SortOrderInput | SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    companyName?: StringWithAggregatesFilter<"Company"> | string
    industry?: StringWithAggregatesFilter<"Company"> | string
    companySize?: StringWithAggregatesFilter<"Company"> | string
    headquarters?: StringWithAggregatesFilter<"Company"> | string
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    corporateCulture?: StringNullableWithAggregatesFilter<"Company"> | string | null
    workEnvironment?: StringNullableWithAggregatesFilter<"Company"> | string | null
    managementStyle?: StringNullableWithAggregatesFilter<"Company"> | string | null
    communicationStyle?: StringNullableWithAggregatesFilter<"Company"> | string | null
    diversityPolicy?: StringNullableWithAggregatesFilter<"Company"> | string | null
    waHarmonyImportance?: FloatNullableWithAggregatesFilter<"Company"> | number | null
    kaizenImplementation?: FloatNullableWithAggregatesFilter<"Company"> | number | null
    omotenashiStandards?: FloatNullableWithAggregatesFilter<"Company"> | number | null
    hierarchyStructure?: StringNullableWithAggregatesFilter<"Company"> | string | null
    consensusDecisionMaking?: FloatNullableWithAggregatesFilter<"Company"> | number | null
    revenue?: BigIntNullableWithAggregatesFilter<"Company"> | bigint | number | null
    foundedYear?: IntNullableWithAggregatesFilter<"Company"> | number | null
    employeeCount?: IntNullableWithAggregatesFilter<"Company"> | number | null
    businessModel?: StringNullableWithAggregatesFilter<"Company"> | string | null
    competitiveAdvantage?: StringNullableWithAggregatesFilter<"Company"> | string | null
    preferredCandidateProfile?: StringNullableWithAggregatesFilter<"Company"> | string | null
    culturalRequirements?: StringNullableWithAggregatesFilter<"Company"> | string | null
    languageRequirements?: StringNullableWithAggregatesFilter<"Company"> | string | null
  }

  export type JobPostingWhereInput = {
    AND?: JobPostingWhereInput | JobPostingWhereInput[]
    OR?: JobPostingWhereInput[]
    NOT?: JobPostingWhereInput | JobPostingWhereInput[]
    id?: StringFilter<"JobPosting"> | string
    createdAt?: DateTimeFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeFilter<"JobPosting"> | Date | string
    jobTitle?: StringFilter<"JobPosting"> | string
    department?: StringNullableFilter<"JobPosting"> | string | null
    location?: StringFilter<"JobPosting"> | string
    employmentType?: StringFilter<"JobPosting"> | string
    experienceLevel?: StringFilter<"JobPosting"> | string
    jobDescription?: StringFilter<"JobPosting"> | string
    responsibilities?: StringNullableFilter<"JobPosting"> | string | null
    requirements?: StringNullableFilter<"JobPosting"> | string | null
    qualifications?: StringNullableFilter<"JobPosting"> | string | null
    technicalSkills?: StringNullableFilter<"JobPosting"> | string | null
    salaryRangeMinimum?: IntNullableFilter<"JobPosting"> | number | null
    salaryRangeMaximum?: IntNullableFilter<"JobPosting"> | number | null
    benefits?: StringNullableFilter<"JobPosting"> | string | null
    bonusStructure?: StringNullableFilter<"JobPosting"> | string | null
    culturalFitRequirements?: StringNullableFilter<"JobPosting"> | string | null
    languageRequirements?: StringNullableFilter<"JobPosting"> | string | null
    communicationStyle?: StringNullableFilter<"JobPosting"> | string | null
    teamworkExpectation?: StringNullableFilter<"JobPosting"> | string | null
    leadershipExpectation?: StringNullableFilter<"JobPosting"> | string | null
    waHarmonyRequired?: FloatNullableFilter<"JobPosting"> | number | null
    kaizenParticipation?: FloatNullableFilter<"JobPosting"> | number | null
    omotenashiExpectation?: FloatNullableFilter<"JobPosting"> | number | null
    hierarchyRespect?: FloatNullableFilter<"JobPosting"> | number | null
    consensusBuilding?: FloatNullableFilter<"JobPosting"> | number | null
    postingStatus?: EnumPostingStatusFilter<"JobPosting"> | $Enums.PostingStatus
    applicationDeadline?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    startDate?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    urgencyLevel?: StringNullableFilter<"JobPosting"> | string | null
    companyId?: StringFilter<"JobPosting"> | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    applications?: ApplicationListRelationFilter
  }

  export type JobPostingOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobTitle?: SortOrder
    department?: SortOrderInput | SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    jobDescription?: SortOrder
    responsibilities?: SortOrderInput | SortOrder
    requirements?: SortOrderInput | SortOrder
    qualifications?: SortOrderInput | SortOrder
    technicalSkills?: SortOrderInput | SortOrder
    salaryRangeMinimum?: SortOrderInput | SortOrder
    salaryRangeMaximum?: SortOrderInput | SortOrder
    benefits?: SortOrderInput | SortOrder
    bonusStructure?: SortOrderInput | SortOrder
    culturalFitRequirements?: SortOrderInput | SortOrder
    languageRequirements?: SortOrderInput | SortOrder
    communicationStyle?: SortOrderInput | SortOrder
    teamworkExpectation?: SortOrderInput | SortOrder
    leadershipExpectation?: SortOrderInput | SortOrder
    waHarmonyRequired?: SortOrderInput | SortOrder
    kaizenParticipation?: SortOrderInput | SortOrder
    omotenashiExpectation?: SortOrderInput | SortOrder
    hierarchyRespect?: SortOrderInput | SortOrder
    consensusBuilding?: SortOrderInput | SortOrder
    postingStatus?: SortOrder
    applicationDeadline?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    urgencyLevel?: SortOrderInput | SortOrder
    companyId?: SortOrder
    company?: CompanyOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type JobPostingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobPostingWhereInput | JobPostingWhereInput[]
    OR?: JobPostingWhereInput[]
    NOT?: JobPostingWhereInput | JobPostingWhereInput[]
    createdAt?: DateTimeFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeFilter<"JobPosting"> | Date | string
    jobTitle?: StringFilter<"JobPosting"> | string
    department?: StringNullableFilter<"JobPosting"> | string | null
    location?: StringFilter<"JobPosting"> | string
    employmentType?: StringFilter<"JobPosting"> | string
    experienceLevel?: StringFilter<"JobPosting"> | string
    jobDescription?: StringFilter<"JobPosting"> | string
    responsibilities?: StringNullableFilter<"JobPosting"> | string | null
    requirements?: StringNullableFilter<"JobPosting"> | string | null
    qualifications?: StringNullableFilter<"JobPosting"> | string | null
    technicalSkills?: StringNullableFilter<"JobPosting"> | string | null
    salaryRangeMinimum?: IntNullableFilter<"JobPosting"> | number | null
    salaryRangeMaximum?: IntNullableFilter<"JobPosting"> | number | null
    benefits?: StringNullableFilter<"JobPosting"> | string | null
    bonusStructure?: StringNullableFilter<"JobPosting"> | string | null
    culturalFitRequirements?: StringNullableFilter<"JobPosting"> | string | null
    languageRequirements?: StringNullableFilter<"JobPosting"> | string | null
    communicationStyle?: StringNullableFilter<"JobPosting"> | string | null
    teamworkExpectation?: StringNullableFilter<"JobPosting"> | string | null
    leadershipExpectation?: StringNullableFilter<"JobPosting"> | string | null
    waHarmonyRequired?: FloatNullableFilter<"JobPosting"> | number | null
    kaizenParticipation?: FloatNullableFilter<"JobPosting"> | number | null
    omotenashiExpectation?: FloatNullableFilter<"JobPosting"> | number | null
    hierarchyRespect?: FloatNullableFilter<"JobPosting"> | number | null
    consensusBuilding?: FloatNullableFilter<"JobPosting"> | number | null
    postingStatus?: EnumPostingStatusFilter<"JobPosting"> | $Enums.PostingStatus
    applicationDeadline?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    startDate?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    urgencyLevel?: StringNullableFilter<"JobPosting"> | string | null
    companyId?: StringFilter<"JobPosting"> | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    applications?: ApplicationListRelationFilter
  }, "id">

  export type JobPostingOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobTitle?: SortOrder
    department?: SortOrderInput | SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    jobDescription?: SortOrder
    responsibilities?: SortOrderInput | SortOrder
    requirements?: SortOrderInput | SortOrder
    qualifications?: SortOrderInput | SortOrder
    technicalSkills?: SortOrderInput | SortOrder
    salaryRangeMinimum?: SortOrderInput | SortOrder
    salaryRangeMaximum?: SortOrderInput | SortOrder
    benefits?: SortOrderInput | SortOrder
    bonusStructure?: SortOrderInput | SortOrder
    culturalFitRequirements?: SortOrderInput | SortOrder
    languageRequirements?: SortOrderInput | SortOrder
    communicationStyle?: SortOrderInput | SortOrder
    teamworkExpectation?: SortOrderInput | SortOrder
    leadershipExpectation?: SortOrderInput | SortOrder
    waHarmonyRequired?: SortOrderInput | SortOrder
    kaizenParticipation?: SortOrderInput | SortOrder
    omotenashiExpectation?: SortOrderInput | SortOrder
    hierarchyRespect?: SortOrderInput | SortOrder
    consensusBuilding?: SortOrderInput | SortOrder
    postingStatus?: SortOrder
    applicationDeadline?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    urgencyLevel?: SortOrderInput | SortOrder
    companyId?: SortOrder
    _count?: JobPostingCountOrderByAggregateInput
    _avg?: JobPostingAvgOrderByAggregateInput
    _max?: JobPostingMaxOrderByAggregateInput
    _min?: JobPostingMinOrderByAggregateInput
    _sum?: JobPostingSumOrderByAggregateInput
  }

  export type JobPostingScalarWhereWithAggregatesInput = {
    AND?: JobPostingScalarWhereWithAggregatesInput | JobPostingScalarWhereWithAggregatesInput[]
    OR?: JobPostingScalarWhereWithAggregatesInput[]
    NOT?: JobPostingScalarWhereWithAggregatesInput | JobPostingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobPosting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobPosting"> | Date | string
    jobTitle?: StringWithAggregatesFilter<"JobPosting"> | string
    department?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    location?: StringWithAggregatesFilter<"JobPosting"> | string
    employmentType?: StringWithAggregatesFilter<"JobPosting"> | string
    experienceLevel?: StringWithAggregatesFilter<"JobPosting"> | string
    jobDescription?: StringWithAggregatesFilter<"JobPosting"> | string
    responsibilities?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    requirements?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    qualifications?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    technicalSkills?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    salaryRangeMinimum?: IntNullableWithAggregatesFilter<"JobPosting"> | number | null
    salaryRangeMaximum?: IntNullableWithAggregatesFilter<"JobPosting"> | number | null
    benefits?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    bonusStructure?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    culturalFitRequirements?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    languageRequirements?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    communicationStyle?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    teamworkExpectation?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    leadershipExpectation?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    waHarmonyRequired?: FloatNullableWithAggregatesFilter<"JobPosting"> | number | null
    kaizenParticipation?: FloatNullableWithAggregatesFilter<"JobPosting"> | number | null
    omotenashiExpectation?: FloatNullableWithAggregatesFilter<"JobPosting"> | number | null
    hierarchyRespect?: FloatNullableWithAggregatesFilter<"JobPosting"> | number | null
    consensusBuilding?: FloatNullableWithAggregatesFilter<"JobPosting"> | number | null
    postingStatus?: EnumPostingStatusWithAggregatesFilter<"JobPosting"> | $Enums.PostingStatus
    applicationDeadline?: DateTimeNullableWithAggregatesFilter<"JobPosting"> | Date | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"JobPosting"> | Date | string | null
    urgencyLevel?: StringNullableWithAggregatesFilter<"JobPosting"> | string | null
    companyId?: StringWithAggregatesFilter<"JobPosting"> | string
  }

  export type CulturalAssessmentWhereInput = {
    AND?: CulturalAssessmentWhereInput | CulturalAssessmentWhereInput[]
    OR?: CulturalAssessmentWhereInput[]
    NOT?: CulturalAssessmentWhereInput | CulturalAssessmentWhereInput[]
    id?: StringFilter<"CulturalAssessment"> | string
    createdAt?: DateTimeFilter<"CulturalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"CulturalAssessment"> | Date | string
    candidateId?: StringFilter<"CulturalAssessment"> | string
    assessmentType?: StringFilter<"CulturalAssessment"> | string
    assessmentDate?: DateTimeFilter<"CulturalAssessment"> | Date | string
    overallScore?: FloatFilter<"CulturalAssessment"> | number
    culturalFitPrediction?: FloatFilter<"CulturalAssessment"> | number
    integrationTimelineDays?: IntFilter<"CulturalAssessment"> | number
    waHarmonyScore?: FloatFilter<"CulturalAssessment"> | number
    kaizenImprovementScore?: FloatFilter<"CulturalAssessment"> | number
    omotenashiServiceScore?: FloatFilter<"CulturalAssessment"> | number
    bushidoDedicationScore?: FloatFilter<"CulturalAssessment"> | number
    nemawashiConsensusScore?: FloatFilter<"CulturalAssessment"> | number
    honneTatemaeBalance?: FloatFilter<"CulturalAssessment"> | number
    indirectCommunication?: FloatFilter<"CulturalAssessment"> | number
    nonverbalAwareness?: FloatFilter<"CulturalAssessment"> | number
    silenceComfort?: FloatFilter<"CulturalAssessment"> | number
    contextualUnderstanding?: FloatFilter<"CulturalAssessment"> | number
    senpaiKohaiRespect?: FloatFilter<"CulturalAssessment"> | number
    authorityRecognition?: FloatFilter<"CulturalAssessment"> | number
    formalityAdherence?: FloatFilter<"CulturalAssessment"> | number
    statusAwareness?: FloatFilter<"CulturalAssessment"> | number
    hierarchyNavigation?: FloatFilter<"CulturalAssessment"> | number
    groupHarmonyPriority?: FloatFilter<"CulturalAssessment"> | number
    collectiveDecisionMaking?: FloatFilter<"CulturalAssessment"> | number
    consensusBuilding?: FloatFilter<"CulturalAssessment"> | number
    teamLoyalty?: FloatFilter<"CulturalAssessment"> | number
    groupAccountability?: FloatFilter<"CulturalAssessment"> | number
    dedicationToWork?: FloatFilter<"CulturalAssessment"> | number
    qualityFocus?: FloatFilter<"CulturalAssessment"> | number
    continuousImprovement?: FloatFilter<"CulturalAssessment"> | number
    attentionToDetail?: FloatFilter<"CulturalAssessment"> | number
    processAdherence?: FloatFilter<"CulturalAssessment"> | number
    punctualityImportance?: FloatFilter<"CulturalAssessment"> | number
    timeRespect?: FloatFilter<"CulturalAssessment"> | number
    scheduleAdherence?: FloatFilter<"CulturalAssessment"> | number
    planningOrientation?: FloatFilter<"CulturalAssessment"> | number
    deadlineCommitment?: FloatFilter<"CulturalAssessment"> | number
    relationshipInvestment?: FloatFilter<"CulturalAssessment"> | number
    trustBuilding?: FloatFilter<"CulturalAssessment"> | number
    longTermOrientation?: FloatFilter<"CulturalAssessment"> | number
    loyaltyDemonstration?: FloatFilter<"CulturalAssessment"> | number
    networkMaintenance?: FloatFilter<"CulturalAssessment"> | number
    changeAcceptance?: FloatFilter<"CulturalAssessment"> | number
    flexibilityInApproach?: FloatFilter<"CulturalAssessment"> | number
    learningOrientation?: FloatFilter<"CulturalAssessment"> | number
    culturalAdaptability?: FloatFilter<"CulturalAssessment"> | number
    resilienceInChallenges?: FloatFilter<"CulturalAssessment"> | number
    professionalEtiquette?: FloatFilter<"CulturalAssessment"> | number
    businessCardProtocol?: FloatFilter<"CulturalAssessment"> | number
    meetingParticipation?: FloatFilter<"CulturalAssessment"> | number
    presentationSkills?: FloatFilter<"CulturalAssessment"> | number
    clientServiceOrientation?: FloatFilter<"CulturalAssessment"> | number
    creativeThinking?: FloatFilter<"CulturalAssessment"> | number
    innovationBalance?: FloatFilter<"CulturalAssessment"> | number
    riskAssessment?: FloatFilter<"CulturalAssessment"> | number
    dimensionScores?: StringNullableFilter<"CulturalAssessment"> | string | null
    culturalTrainingNeeded?: StringNullableFilter<"CulturalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"CulturalAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type CulturalAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    overallScore?: SortOrder
    culturalFitPrediction?: SortOrder
    integrationTimelineDays?: SortOrder
    waHarmonyScore?: SortOrder
    kaizenImprovementScore?: SortOrder
    omotenashiServiceScore?: SortOrder
    bushidoDedicationScore?: SortOrder
    nemawashiConsensusScore?: SortOrder
    honneTatemaeBalance?: SortOrder
    indirectCommunication?: SortOrder
    nonverbalAwareness?: SortOrder
    silenceComfort?: SortOrder
    contextualUnderstanding?: SortOrder
    senpaiKohaiRespect?: SortOrder
    authorityRecognition?: SortOrder
    formalityAdherence?: SortOrder
    statusAwareness?: SortOrder
    hierarchyNavigation?: SortOrder
    groupHarmonyPriority?: SortOrder
    collectiveDecisionMaking?: SortOrder
    consensusBuilding?: SortOrder
    teamLoyalty?: SortOrder
    groupAccountability?: SortOrder
    dedicationToWork?: SortOrder
    qualityFocus?: SortOrder
    continuousImprovement?: SortOrder
    attentionToDetail?: SortOrder
    processAdherence?: SortOrder
    punctualityImportance?: SortOrder
    timeRespect?: SortOrder
    scheduleAdherence?: SortOrder
    planningOrientation?: SortOrder
    deadlineCommitment?: SortOrder
    relationshipInvestment?: SortOrder
    trustBuilding?: SortOrder
    longTermOrientation?: SortOrder
    loyaltyDemonstration?: SortOrder
    networkMaintenance?: SortOrder
    changeAcceptance?: SortOrder
    flexibilityInApproach?: SortOrder
    learningOrientation?: SortOrder
    culturalAdaptability?: SortOrder
    resilienceInChallenges?: SortOrder
    professionalEtiquette?: SortOrder
    businessCardProtocol?: SortOrder
    meetingParticipation?: SortOrder
    presentationSkills?: SortOrder
    clientServiceOrientation?: SortOrder
    creativeThinking?: SortOrder
    innovationBalance?: SortOrder
    riskAssessment?: SortOrder
    dimensionScores?: SortOrderInput | SortOrder
    culturalTrainingNeeded?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
  }

  export type CulturalAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CulturalAssessmentWhereInput | CulturalAssessmentWhereInput[]
    OR?: CulturalAssessmentWhereInput[]
    NOT?: CulturalAssessmentWhereInput | CulturalAssessmentWhereInput[]
    createdAt?: DateTimeFilter<"CulturalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"CulturalAssessment"> | Date | string
    candidateId?: StringFilter<"CulturalAssessment"> | string
    assessmentType?: StringFilter<"CulturalAssessment"> | string
    assessmentDate?: DateTimeFilter<"CulturalAssessment"> | Date | string
    overallScore?: FloatFilter<"CulturalAssessment"> | number
    culturalFitPrediction?: FloatFilter<"CulturalAssessment"> | number
    integrationTimelineDays?: IntFilter<"CulturalAssessment"> | number
    waHarmonyScore?: FloatFilter<"CulturalAssessment"> | number
    kaizenImprovementScore?: FloatFilter<"CulturalAssessment"> | number
    omotenashiServiceScore?: FloatFilter<"CulturalAssessment"> | number
    bushidoDedicationScore?: FloatFilter<"CulturalAssessment"> | number
    nemawashiConsensusScore?: FloatFilter<"CulturalAssessment"> | number
    honneTatemaeBalance?: FloatFilter<"CulturalAssessment"> | number
    indirectCommunication?: FloatFilter<"CulturalAssessment"> | number
    nonverbalAwareness?: FloatFilter<"CulturalAssessment"> | number
    silenceComfort?: FloatFilter<"CulturalAssessment"> | number
    contextualUnderstanding?: FloatFilter<"CulturalAssessment"> | number
    senpaiKohaiRespect?: FloatFilter<"CulturalAssessment"> | number
    authorityRecognition?: FloatFilter<"CulturalAssessment"> | number
    formalityAdherence?: FloatFilter<"CulturalAssessment"> | number
    statusAwareness?: FloatFilter<"CulturalAssessment"> | number
    hierarchyNavigation?: FloatFilter<"CulturalAssessment"> | number
    groupHarmonyPriority?: FloatFilter<"CulturalAssessment"> | number
    collectiveDecisionMaking?: FloatFilter<"CulturalAssessment"> | number
    consensusBuilding?: FloatFilter<"CulturalAssessment"> | number
    teamLoyalty?: FloatFilter<"CulturalAssessment"> | number
    groupAccountability?: FloatFilter<"CulturalAssessment"> | number
    dedicationToWork?: FloatFilter<"CulturalAssessment"> | number
    qualityFocus?: FloatFilter<"CulturalAssessment"> | number
    continuousImprovement?: FloatFilter<"CulturalAssessment"> | number
    attentionToDetail?: FloatFilter<"CulturalAssessment"> | number
    processAdherence?: FloatFilter<"CulturalAssessment"> | number
    punctualityImportance?: FloatFilter<"CulturalAssessment"> | number
    timeRespect?: FloatFilter<"CulturalAssessment"> | number
    scheduleAdherence?: FloatFilter<"CulturalAssessment"> | number
    planningOrientation?: FloatFilter<"CulturalAssessment"> | number
    deadlineCommitment?: FloatFilter<"CulturalAssessment"> | number
    relationshipInvestment?: FloatFilter<"CulturalAssessment"> | number
    trustBuilding?: FloatFilter<"CulturalAssessment"> | number
    longTermOrientation?: FloatFilter<"CulturalAssessment"> | number
    loyaltyDemonstration?: FloatFilter<"CulturalAssessment"> | number
    networkMaintenance?: FloatFilter<"CulturalAssessment"> | number
    changeAcceptance?: FloatFilter<"CulturalAssessment"> | number
    flexibilityInApproach?: FloatFilter<"CulturalAssessment"> | number
    learningOrientation?: FloatFilter<"CulturalAssessment"> | number
    culturalAdaptability?: FloatFilter<"CulturalAssessment"> | number
    resilienceInChallenges?: FloatFilter<"CulturalAssessment"> | number
    professionalEtiquette?: FloatFilter<"CulturalAssessment"> | number
    businessCardProtocol?: FloatFilter<"CulturalAssessment"> | number
    meetingParticipation?: FloatFilter<"CulturalAssessment"> | number
    presentationSkills?: FloatFilter<"CulturalAssessment"> | number
    clientServiceOrientation?: FloatFilter<"CulturalAssessment"> | number
    creativeThinking?: FloatFilter<"CulturalAssessment"> | number
    innovationBalance?: FloatFilter<"CulturalAssessment"> | number
    riskAssessment?: FloatFilter<"CulturalAssessment"> | number
    dimensionScores?: StringNullableFilter<"CulturalAssessment"> | string | null
    culturalTrainingNeeded?: StringNullableFilter<"CulturalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"CulturalAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type CulturalAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    overallScore?: SortOrder
    culturalFitPrediction?: SortOrder
    integrationTimelineDays?: SortOrder
    waHarmonyScore?: SortOrder
    kaizenImprovementScore?: SortOrder
    omotenashiServiceScore?: SortOrder
    bushidoDedicationScore?: SortOrder
    nemawashiConsensusScore?: SortOrder
    honneTatemaeBalance?: SortOrder
    indirectCommunication?: SortOrder
    nonverbalAwareness?: SortOrder
    silenceComfort?: SortOrder
    contextualUnderstanding?: SortOrder
    senpaiKohaiRespect?: SortOrder
    authorityRecognition?: SortOrder
    formalityAdherence?: SortOrder
    statusAwareness?: SortOrder
    hierarchyNavigation?: SortOrder
    groupHarmonyPriority?: SortOrder
    collectiveDecisionMaking?: SortOrder
    consensusBuilding?: SortOrder
    teamLoyalty?: SortOrder
    groupAccountability?: SortOrder
    dedicationToWork?: SortOrder
    qualityFocus?: SortOrder
    continuousImprovement?: SortOrder
    attentionToDetail?: SortOrder
    processAdherence?: SortOrder
    punctualityImportance?: SortOrder
    timeRespect?: SortOrder
    scheduleAdherence?: SortOrder
    planningOrientation?: SortOrder
    deadlineCommitment?: SortOrder
    relationshipInvestment?: SortOrder
    trustBuilding?: SortOrder
    longTermOrientation?: SortOrder
    loyaltyDemonstration?: SortOrder
    networkMaintenance?: SortOrder
    changeAcceptance?: SortOrder
    flexibilityInApproach?: SortOrder
    learningOrientation?: SortOrder
    culturalAdaptability?: SortOrder
    resilienceInChallenges?: SortOrder
    professionalEtiquette?: SortOrder
    businessCardProtocol?: SortOrder
    meetingParticipation?: SortOrder
    presentationSkills?: SortOrder
    clientServiceOrientation?: SortOrder
    creativeThinking?: SortOrder
    innovationBalance?: SortOrder
    riskAssessment?: SortOrder
    dimensionScores?: SortOrderInput | SortOrder
    culturalTrainingNeeded?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    _count?: CulturalAssessmentCountOrderByAggregateInput
    _avg?: CulturalAssessmentAvgOrderByAggregateInput
    _max?: CulturalAssessmentMaxOrderByAggregateInput
    _min?: CulturalAssessmentMinOrderByAggregateInput
    _sum?: CulturalAssessmentSumOrderByAggregateInput
  }

  export type CulturalAssessmentScalarWhereWithAggregatesInput = {
    AND?: CulturalAssessmentScalarWhereWithAggregatesInput | CulturalAssessmentScalarWhereWithAggregatesInput[]
    OR?: CulturalAssessmentScalarWhereWithAggregatesInput[]
    NOT?: CulturalAssessmentScalarWhereWithAggregatesInput | CulturalAssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CulturalAssessment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CulturalAssessment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CulturalAssessment"> | Date | string
    candidateId?: StringWithAggregatesFilter<"CulturalAssessment"> | string
    assessmentType?: StringWithAggregatesFilter<"CulturalAssessment"> | string
    assessmentDate?: DateTimeWithAggregatesFilter<"CulturalAssessment"> | Date | string
    overallScore?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    culturalFitPrediction?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    integrationTimelineDays?: IntWithAggregatesFilter<"CulturalAssessment"> | number
    waHarmonyScore?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    kaizenImprovementScore?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    omotenashiServiceScore?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    bushidoDedicationScore?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    nemawashiConsensusScore?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    honneTatemaeBalance?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    indirectCommunication?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    nonverbalAwareness?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    silenceComfort?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    contextualUnderstanding?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    senpaiKohaiRespect?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    authorityRecognition?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    formalityAdherence?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    statusAwareness?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    hierarchyNavigation?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    groupHarmonyPriority?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    collectiveDecisionMaking?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    consensusBuilding?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    teamLoyalty?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    groupAccountability?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    dedicationToWork?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    qualityFocus?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    continuousImprovement?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    attentionToDetail?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    processAdherence?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    punctualityImportance?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    timeRespect?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    scheduleAdherence?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    planningOrientation?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    deadlineCommitment?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    relationshipInvestment?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    trustBuilding?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    longTermOrientation?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    loyaltyDemonstration?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    networkMaintenance?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    changeAcceptance?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    flexibilityInApproach?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    learningOrientation?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    culturalAdaptability?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    resilienceInChallenges?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    professionalEtiquette?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    businessCardProtocol?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    meetingParticipation?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    presentationSkills?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    clientServiceOrientation?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    creativeThinking?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    innovationBalance?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    riskAssessment?: FloatWithAggregatesFilter<"CulturalAssessment"> | number
    dimensionScores?: StringNullableWithAggregatesFilter<"CulturalAssessment"> | string | null
    culturalTrainingNeeded?: StringNullableWithAggregatesFilter<"CulturalAssessment"> | string | null
    assessmentNotes?: StringNullableWithAggregatesFilter<"CulturalAssessment"> | string | null
  }

  export type PsychologicalAssessmentWhereInput = {
    AND?: PsychologicalAssessmentWhereInput | PsychologicalAssessmentWhereInput[]
    OR?: PsychologicalAssessmentWhereInput[]
    NOT?: PsychologicalAssessmentWhereInput | PsychologicalAssessmentWhereInput[]
    id?: StringFilter<"PsychologicalAssessment"> | string
    createdAt?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    candidateId?: StringFilter<"PsychologicalAssessment"> | string
    assessmentType?: StringFilter<"PsychologicalAssessment"> | string
    assessmentDate?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    openness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    conscientiousness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    extraversion?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    agreeableness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    neuroticism?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    logicalReasoning?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    numericalAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    verbalAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    spatialAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    memoryCapacity?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    selfAwareness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    selfRegulation?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    motivation?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    empathy?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    socialSkills?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    stressResilience?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    teamworkAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    leadershipPotential?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    adaptability?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    problemSolving?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    overallScore?: FloatFilter<"PsychologicalAssessment"> | number
    recommendations?: StringNullableFilter<"PsychologicalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"PsychologicalAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type PsychologicalAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    openness?: SortOrderInput | SortOrder
    conscientiousness?: SortOrderInput | SortOrder
    extraversion?: SortOrderInput | SortOrder
    agreeableness?: SortOrderInput | SortOrder
    neuroticism?: SortOrderInput | SortOrder
    logicalReasoning?: SortOrderInput | SortOrder
    numericalAbility?: SortOrderInput | SortOrder
    verbalAbility?: SortOrderInput | SortOrder
    spatialAbility?: SortOrderInput | SortOrder
    memoryCapacity?: SortOrderInput | SortOrder
    selfAwareness?: SortOrderInput | SortOrder
    selfRegulation?: SortOrderInput | SortOrder
    motivation?: SortOrderInput | SortOrder
    empathy?: SortOrderInput | SortOrder
    socialSkills?: SortOrderInput | SortOrder
    stressResilience?: SortOrderInput | SortOrder
    teamworkAbility?: SortOrderInput | SortOrder
    leadershipPotential?: SortOrderInput | SortOrder
    adaptability?: SortOrderInput | SortOrder
    problemSolving?: SortOrderInput | SortOrder
    overallScore?: SortOrder
    recommendations?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
  }

  export type PsychologicalAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PsychologicalAssessmentWhereInput | PsychologicalAssessmentWhereInput[]
    OR?: PsychologicalAssessmentWhereInput[]
    NOT?: PsychologicalAssessmentWhereInput | PsychologicalAssessmentWhereInput[]
    createdAt?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    candidateId?: StringFilter<"PsychologicalAssessment"> | string
    assessmentType?: StringFilter<"PsychologicalAssessment"> | string
    assessmentDate?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    openness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    conscientiousness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    extraversion?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    agreeableness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    neuroticism?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    logicalReasoning?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    numericalAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    verbalAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    spatialAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    memoryCapacity?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    selfAwareness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    selfRegulation?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    motivation?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    empathy?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    socialSkills?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    stressResilience?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    teamworkAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    leadershipPotential?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    adaptability?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    problemSolving?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    overallScore?: FloatFilter<"PsychologicalAssessment"> | number
    recommendations?: StringNullableFilter<"PsychologicalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"PsychologicalAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type PsychologicalAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    openness?: SortOrderInput | SortOrder
    conscientiousness?: SortOrderInput | SortOrder
    extraversion?: SortOrderInput | SortOrder
    agreeableness?: SortOrderInput | SortOrder
    neuroticism?: SortOrderInput | SortOrder
    logicalReasoning?: SortOrderInput | SortOrder
    numericalAbility?: SortOrderInput | SortOrder
    verbalAbility?: SortOrderInput | SortOrder
    spatialAbility?: SortOrderInput | SortOrder
    memoryCapacity?: SortOrderInput | SortOrder
    selfAwareness?: SortOrderInput | SortOrder
    selfRegulation?: SortOrderInput | SortOrder
    motivation?: SortOrderInput | SortOrder
    empathy?: SortOrderInput | SortOrder
    socialSkills?: SortOrderInput | SortOrder
    stressResilience?: SortOrderInput | SortOrder
    teamworkAbility?: SortOrderInput | SortOrder
    leadershipPotential?: SortOrderInput | SortOrder
    adaptability?: SortOrderInput | SortOrder
    problemSolving?: SortOrderInput | SortOrder
    overallScore?: SortOrder
    recommendations?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    _count?: PsychologicalAssessmentCountOrderByAggregateInput
    _avg?: PsychologicalAssessmentAvgOrderByAggregateInput
    _max?: PsychologicalAssessmentMaxOrderByAggregateInput
    _min?: PsychologicalAssessmentMinOrderByAggregateInput
    _sum?: PsychologicalAssessmentSumOrderByAggregateInput
  }

  export type PsychologicalAssessmentScalarWhereWithAggregatesInput = {
    AND?: PsychologicalAssessmentScalarWhereWithAggregatesInput | PsychologicalAssessmentScalarWhereWithAggregatesInput[]
    OR?: PsychologicalAssessmentScalarWhereWithAggregatesInput[]
    NOT?: PsychologicalAssessmentScalarWhereWithAggregatesInput | PsychologicalAssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PsychologicalAssessment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PsychologicalAssessment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PsychologicalAssessment"> | Date | string
    candidateId?: StringWithAggregatesFilter<"PsychologicalAssessment"> | string
    assessmentType?: StringWithAggregatesFilter<"PsychologicalAssessment"> | string
    assessmentDate?: DateTimeWithAggregatesFilter<"PsychologicalAssessment"> | Date | string
    openness?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    conscientiousness?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    extraversion?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    agreeableness?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    neuroticism?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    logicalReasoning?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    numericalAbility?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    verbalAbility?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    spatialAbility?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    memoryCapacity?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    selfAwareness?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    selfRegulation?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    motivation?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    empathy?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    socialSkills?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    stressResilience?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    teamworkAbility?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    leadershipPotential?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    adaptability?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    problemSolving?: FloatNullableWithAggregatesFilter<"PsychologicalAssessment"> | number | null
    overallScore?: FloatWithAggregatesFilter<"PsychologicalAssessment"> | number
    recommendations?: StringNullableWithAggregatesFilter<"PsychologicalAssessment"> | string | null
    assessmentNotes?: StringNullableWithAggregatesFilter<"PsychologicalAssessment"> | string | null
  }

  export type LanguageAssessmentWhereInput = {
    AND?: LanguageAssessmentWhereInput | LanguageAssessmentWhereInput[]
    OR?: LanguageAssessmentWhereInput[]
    NOT?: LanguageAssessmentWhereInput | LanguageAssessmentWhereInput[]
    id?: StringFilter<"LanguageAssessment"> | string
    createdAt?: DateTimeFilter<"LanguageAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"LanguageAssessment"> | Date | string
    candidateId?: StringFilter<"LanguageAssessment"> | string
    language?: StringFilter<"LanguageAssessment"> | string
    assessmentDate?: DateTimeFilter<"LanguageAssessment"> | Date | string
    assessmentType?: StringFilter<"LanguageAssessment"> | string
    speakingLevel?: StringFilter<"LanguageAssessment"> | string
    listeningLevel?: StringFilter<"LanguageAssessment"> | string
    readingLevel?: StringFilter<"LanguageAssessment"> | string
    writingLevel?: StringFilter<"LanguageAssessment"> | string
    overallScore?: FloatFilter<"LanguageAssessment"> | number
    speakingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    listeningScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    readingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    writingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    businessCommunication?: FloatNullableFilter<"LanguageAssessment"> | number | null
    technicalVocabulary?: FloatNullableFilter<"LanguageAssessment"> | number | null
    presentationSkills?: FloatNullableFilter<"LanguageAssessment"> | number | null
    negotiationSkills?: FloatNullableFilter<"LanguageAssessment"> | number | null
    certificationLevel?: StringNullableFilter<"LanguageAssessment"> | string | null
    certificationDate?: DateTimeNullableFilter<"LanguageAssessment"> | Date | string | null
    assessmentNotes?: StringNullableFilter<"LanguageAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type LanguageAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    language?: SortOrder
    assessmentDate?: SortOrder
    assessmentType?: SortOrder
    speakingLevel?: SortOrder
    listeningLevel?: SortOrder
    readingLevel?: SortOrder
    writingLevel?: SortOrder
    overallScore?: SortOrder
    speakingScore?: SortOrderInput | SortOrder
    listeningScore?: SortOrderInput | SortOrder
    readingScore?: SortOrderInput | SortOrder
    writingScore?: SortOrderInput | SortOrder
    businessCommunication?: SortOrderInput | SortOrder
    technicalVocabulary?: SortOrderInput | SortOrder
    presentationSkills?: SortOrderInput | SortOrder
    negotiationSkills?: SortOrderInput | SortOrder
    certificationLevel?: SortOrderInput | SortOrder
    certificationDate?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
  }

  export type LanguageAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LanguageAssessmentWhereInput | LanguageAssessmentWhereInput[]
    OR?: LanguageAssessmentWhereInput[]
    NOT?: LanguageAssessmentWhereInput | LanguageAssessmentWhereInput[]
    createdAt?: DateTimeFilter<"LanguageAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"LanguageAssessment"> | Date | string
    candidateId?: StringFilter<"LanguageAssessment"> | string
    language?: StringFilter<"LanguageAssessment"> | string
    assessmentDate?: DateTimeFilter<"LanguageAssessment"> | Date | string
    assessmentType?: StringFilter<"LanguageAssessment"> | string
    speakingLevel?: StringFilter<"LanguageAssessment"> | string
    listeningLevel?: StringFilter<"LanguageAssessment"> | string
    readingLevel?: StringFilter<"LanguageAssessment"> | string
    writingLevel?: StringFilter<"LanguageAssessment"> | string
    overallScore?: FloatFilter<"LanguageAssessment"> | number
    speakingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    listeningScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    readingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    writingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    businessCommunication?: FloatNullableFilter<"LanguageAssessment"> | number | null
    technicalVocabulary?: FloatNullableFilter<"LanguageAssessment"> | number | null
    presentationSkills?: FloatNullableFilter<"LanguageAssessment"> | number | null
    negotiationSkills?: FloatNullableFilter<"LanguageAssessment"> | number | null
    certificationLevel?: StringNullableFilter<"LanguageAssessment"> | string | null
    certificationDate?: DateTimeNullableFilter<"LanguageAssessment"> | Date | string | null
    assessmentNotes?: StringNullableFilter<"LanguageAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type LanguageAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    language?: SortOrder
    assessmentDate?: SortOrder
    assessmentType?: SortOrder
    speakingLevel?: SortOrder
    listeningLevel?: SortOrder
    readingLevel?: SortOrder
    writingLevel?: SortOrder
    overallScore?: SortOrder
    speakingScore?: SortOrderInput | SortOrder
    listeningScore?: SortOrderInput | SortOrder
    readingScore?: SortOrderInput | SortOrder
    writingScore?: SortOrderInput | SortOrder
    businessCommunication?: SortOrderInput | SortOrder
    technicalVocabulary?: SortOrderInput | SortOrder
    presentationSkills?: SortOrderInput | SortOrder
    negotiationSkills?: SortOrderInput | SortOrder
    certificationLevel?: SortOrderInput | SortOrder
    certificationDate?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    _count?: LanguageAssessmentCountOrderByAggregateInput
    _avg?: LanguageAssessmentAvgOrderByAggregateInput
    _max?: LanguageAssessmentMaxOrderByAggregateInput
    _min?: LanguageAssessmentMinOrderByAggregateInput
    _sum?: LanguageAssessmentSumOrderByAggregateInput
  }

  export type LanguageAssessmentScalarWhereWithAggregatesInput = {
    AND?: LanguageAssessmentScalarWhereWithAggregatesInput | LanguageAssessmentScalarWhereWithAggregatesInput[]
    OR?: LanguageAssessmentScalarWhereWithAggregatesInput[]
    NOT?: LanguageAssessmentScalarWhereWithAggregatesInput | LanguageAssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LanguageAssessment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LanguageAssessment"> | Date | string
    candidateId?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    language?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    assessmentDate?: DateTimeWithAggregatesFilter<"LanguageAssessment"> | Date | string
    assessmentType?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    speakingLevel?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    listeningLevel?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    readingLevel?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    writingLevel?: StringWithAggregatesFilter<"LanguageAssessment"> | string
    overallScore?: FloatWithAggregatesFilter<"LanguageAssessment"> | number
    speakingScore?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    listeningScore?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    readingScore?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    writingScore?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    businessCommunication?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    technicalVocabulary?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    presentationSkills?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    negotiationSkills?: FloatNullableWithAggregatesFilter<"LanguageAssessment"> | number | null
    certificationLevel?: StringNullableWithAggregatesFilter<"LanguageAssessment"> | string | null
    certificationDate?: DateTimeNullableWithAggregatesFilter<"LanguageAssessment"> | Date | string | null
    assessmentNotes?: StringNullableWithAggregatesFilter<"LanguageAssessment"> | string | null
  }

  export type ProfessionalAssessmentWhereInput = {
    AND?: ProfessionalAssessmentWhereInput | ProfessionalAssessmentWhereInput[]
    OR?: ProfessionalAssessmentWhereInput[]
    NOT?: ProfessionalAssessmentWhereInput | ProfessionalAssessmentWhereInput[]
    id?: StringFilter<"ProfessionalAssessment"> | string
    createdAt?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    candidateId?: StringFilter<"ProfessionalAssessment"> | string
    assessmentType?: StringFilter<"ProfessionalAssessment"> | string
    assessmentDate?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    technicalProficiency?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    toolsAndTechnologies?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    industryKnowledge?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    problemSolvingAbility?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    innovationCapability?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    projectManagement?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    teamLeadership?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    clientManagement?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    strategicThinking?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    analyticalSkills?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    domainExpertise?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    regulatoryKnowledge?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    marketUnderstanding?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    competitorAwareness?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    overallScore?: FloatFilter<"ProfessionalAssessment"> | number
    skillGaps?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    developmentPlan?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type ProfessionalAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    technicalProficiency?: SortOrderInput | SortOrder
    toolsAndTechnologies?: SortOrderInput | SortOrder
    industryKnowledge?: SortOrderInput | SortOrder
    problemSolvingAbility?: SortOrderInput | SortOrder
    innovationCapability?: SortOrderInput | SortOrder
    projectManagement?: SortOrderInput | SortOrder
    teamLeadership?: SortOrderInput | SortOrder
    clientManagement?: SortOrderInput | SortOrder
    strategicThinking?: SortOrderInput | SortOrder
    analyticalSkills?: SortOrderInput | SortOrder
    domainExpertise?: SortOrderInput | SortOrder
    regulatoryKnowledge?: SortOrderInput | SortOrder
    marketUnderstanding?: SortOrderInput | SortOrder
    competitorAwareness?: SortOrderInput | SortOrder
    overallScore?: SortOrder
    skillGaps?: SortOrderInput | SortOrder
    developmentPlan?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
  }

  export type ProfessionalAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionalAssessmentWhereInput | ProfessionalAssessmentWhereInput[]
    OR?: ProfessionalAssessmentWhereInput[]
    NOT?: ProfessionalAssessmentWhereInput | ProfessionalAssessmentWhereInput[]
    createdAt?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    candidateId?: StringFilter<"ProfessionalAssessment"> | string
    assessmentType?: StringFilter<"ProfessionalAssessment"> | string
    assessmentDate?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    technicalProficiency?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    toolsAndTechnologies?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    industryKnowledge?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    problemSolvingAbility?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    innovationCapability?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    projectManagement?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    teamLeadership?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    clientManagement?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    strategicThinking?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    analyticalSkills?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    domainExpertise?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    regulatoryKnowledge?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    marketUnderstanding?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    competitorAwareness?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    overallScore?: FloatFilter<"ProfessionalAssessment"> | number
    skillGaps?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    developmentPlan?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type ProfessionalAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    technicalProficiency?: SortOrderInput | SortOrder
    toolsAndTechnologies?: SortOrderInput | SortOrder
    industryKnowledge?: SortOrderInput | SortOrder
    problemSolvingAbility?: SortOrderInput | SortOrder
    innovationCapability?: SortOrderInput | SortOrder
    projectManagement?: SortOrderInput | SortOrder
    teamLeadership?: SortOrderInput | SortOrder
    clientManagement?: SortOrderInput | SortOrder
    strategicThinking?: SortOrderInput | SortOrder
    analyticalSkills?: SortOrderInput | SortOrder
    domainExpertise?: SortOrderInput | SortOrder
    regulatoryKnowledge?: SortOrderInput | SortOrder
    marketUnderstanding?: SortOrderInput | SortOrder
    competitorAwareness?: SortOrderInput | SortOrder
    overallScore?: SortOrder
    skillGaps?: SortOrderInput | SortOrder
    developmentPlan?: SortOrderInput | SortOrder
    assessmentNotes?: SortOrderInput | SortOrder
    _count?: ProfessionalAssessmentCountOrderByAggregateInput
    _avg?: ProfessionalAssessmentAvgOrderByAggregateInput
    _max?: ProfessionalAssessmentMaxOrderByAggregateInput
    _min?: ProfessionalAssessmentMinOrderByAggregateInput
    _sum?: ProfessionalAssessmentSumOrderByAggregateInput
  }

  export type ProfessionalAssessmentScalarWhereWithAggregatesInput = {
    AND?: ProfessionalAssessmentScalarWhereWithAggregatesInput | ProfessionalAssessmentScalarWhereWithAggregatesInput[]
    OR?: ProfessionalAssessmentScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalAssessmentScalarWhereWithAggregatesInput | ProfessionalAssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionalAssessment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProfessionalAssessment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfessionalAssessment"> | Date | string
    candidateId?: StringWithAggregatesFilter<"ProfessionalAssessment"> | string
    assessmentType?: StringWithAggregatesFilter<"ProfessionalAssessment"> | string
    assessmentDate?: DateTimeWithAggregatesFilter<"ProfessionalAssessment"> | Date | string
    technicalProficiency?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    toolsAndTechnologies?: StringNullableWithAggregatesFilter<"ProfessionalAssessment"> | string | null
    industryKnowledge?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    problemSolvingAbility?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    innovationCapability?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    projectManagement?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    teamLeadership?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    clientManagement?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    strategicThinking?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    analyticalSkills?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    domainExpertise?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    regulatoryKnowledge?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    marketUnderstanding?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    competitorAwareness?: FloatNullableWithAggregatesFilter<"ProfessionalAssessment"> | number | null
    overallScore?: FloatWithAggregatesFilter<"ProfessionalAssessment"> | number
    skillGaps?: StringNullableWithAggregatesFilter<"ProfessionalAssessment"> | string | null
    developmentPlan?: StringNullableWithAggregatesFilter<"ProfessionalAssessment"> | string | null
    assessmentNotes?: StringNullableWithAggregatesFilter<"ProfessionalAssessment"> | string | null
  }

  export type InterviewSessionWhereInput = {
    AND?: InterviewSessionWhereInput | InterviewSessionWhereInput[]
    OR?: InterviewSessionWhereInput[]
    NOT?: InterviewSessionWhereInput | InterviewSessionWhereInput[]
    id?: StringFilter<"InterviewSession"> | string
    createdAt?: DateTimeFilter<"InterviewSession"> | Date | string
    updatedAt?: DateTimeFilter<"InterviewSession"> | Date | string
    candidateId?: StringFilter<"InterviewSession"> | string
    applicationId?: StringNullableFilter<"InterviewSession"> | string | null
    interviewType?: StringFilter<"InterviewSession"> | string
    interviewRound?: IntFilter<"InterviewSession"> | number
    interviewDate?: DateTimeFilter<"InterviewSession"> | Date | string
    duration?: IntNullableFilter<"InterviewSession"> | number | null
    technicalScore?: FloatNullableFilter<"InterviewSession"> | number | null
    culturalFitScore?: FloatNullableFilter<"InterviewSession"> | number | null
    communicationScore?: FloatNullableFilter<"InterviewSession"> | number | null
    motivationScore?: FloatNullableFilter<"InterviewSession"> | number | null
    overallScore?: FloatFilter<"InterviewSession"> | number
    strengths?: StringNullableFilter<"InterviewSession"> | string | null
    weaknesses?: StringNullableFilter<"InterviewSession"> | string | null
    recommendations?: StringNullableFilter<"InterviewSession"> | string | null
    interviewNotes?: StringNullableFilter<"InterviewSession"> | string | null
    recommendation?: StringFilter<"InterviewSession"> | string
    interviewerName?: StringNullableFilter<"InterviewSession"> | string | null
    interviewerRole?: StringNullableFilter<"InterviewSession"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }

  export type InterviewSessionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    interviewType?: SortOrder
    interviewRound?: SortOrder
    interviewDate?: SortOrder
    duration?: SortOrderInput | SortOrder
    technicalScore?: SortOrderInput | SortOrder
    culturalFitScore?: SortOrderInput | SortOrder
    communicationScore?: SortOrderInput | SortOrder
    motivationScore?: SortOrderInput | SortOrder
    overallScore?: SortOrder
    strengths?: SortOrderInput | SortOrder
    weaknesses?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    interviewNotes?: SortOrderInput | SortOrder
    recommendation?: SortOrder
    interviewerName?: SortOrderInput | SortOrder
    interviewerRole?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
    application?: ApplicationOrderByWithRelationInput
  }

  export type InterviewSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InterviewSessionWhereInput | InterviewSessionWhereInput[]
    OR?: InterviewSessionWhereInput[]
    NOT?: InterviewSessionWhereInput | InterviewSessionWhereInput[]
    createdAt?: DateTimeFilter<"InterviewSession"> | Date | string
    updatedAt?: DateTimeFilter<"InterviewSession"> | Date | string
    candidateId?: StringFilter<"InterviewSession"> | string
    applicationId?: StringNullableFilter<"InterviewSession"> | string | null
    interviewType?: StringFilter<"InterviewSession"> | string
    interviewRound?: IntFilter<"InterviewSession"> | number
    interviewDate?: DateTimeFilter<"InterviewSession"> | Date | string
    duration?: IntNullableFilter<"InterviewSession"> | number | null
    technicalScore?: FloatNullableFilter<"InterviewSession"> | number | null
    culturalFitScore?: FloatNullableFilter<"InterviewSession"> | number | null
    communicationScore?: FloatNullableFilter<"InterviewSession"> | number | null
    motivationScore?: FloatNullableFilter<"InterviewSession"> | number | null
    overallScore?: FloatFilter<"InterviewSession"> | number
    strengths?: StringNullableFilter<"InterviewSession"> | string | null
    weaknesses?: StringNullableFilter<"InterviewSession"> | string | null
    recommendations?: StringNullableFilter<"InterviewSession"> | string | null
    interviewNotes?: StringNullableFilter<"InterviewSession"> | string | null
    recommendation?: StringFilter<"InterviewSession"> | string
    interviewerName?: StringNullableFilter<"InterviewSession"> | string | null
    interviewerRole?: StringNullableFilter<"InterviewSession"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }, "id">

  export type InterviewSessionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    interviewType?: SortOrder
    interviewRound?: SortOrder
    interviewDate?: SortOrder
    duration?: SortOrderInput | SortOrder
    technicalScore?: SortOrderInput | SortOrder
    culturalFitScore?: SortOrderInput | SortOrder
    communicationScore?: SortOrderInput | SortOrder
    motivationScore?: SortOrderInput | SortOrder
    overallScore?: SortOrder
    strengths?: SortOrderInput | SortOrder
    weaknesses?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    interviewNotes?: SortOrderInput | SortOrder
    recommendation?: SortOrder
    interviewerName?: SortOrderInput | SortOrder
    interviewerRole?: SortOrderInput | SortOrder
    _count?: InterviewSessionCountOrderByAggregateInput
    _avg?: InterviewSessionAvgOrderByAggregateInput
    _max?: InterviewSessionMaxOrderByAggregateInput
    _min?: InterviewSessionMinOrderByAggregateInput
    _sum?: InterviewSessionSumOrderByAggregateInput
  }

  export type InterviewSessionScalarWhereWithAggregatesInput = {
    AND?: InterviewSessionScalarWhereWithAggregatesInput | InterviewSessionScalarWhereWithAggregatesInput[]
    OR?: InterviewSessionScalarWhereWithAggregatesInput[]
    NOT?: InterviewSessionScalarWhereWithAggregatesInput | InterviewSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InterviewSession"> | string
    createdAt?: DateTimeWithAggregatesFilter<"InterviewSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InterviewSession"> | Date | string
    candidateId?: StringWithAggregatesFilter<"InterviewSession"> | string
    applicationId?: StringNullableWithAggregatesFilter<"InterviewSession"> | string | null
    interviewType?: StringWithAggregatesFilter<"InterviewSession"> | string
    interviewRound?: IntWithAggregatesFilter<"InterviewSession"> | number
    interviewDate?: DateTimeWithAggregatesFilter<"InterviewSession"> | Date | string
    duration?: IntNullableWithAggregatesFilter<"InterviewSession"> | number | null
    technicalScore?: FloatNullableWithAggregatesFilter<"InterviewSession"> | number | null
    culturalFitScore?: FloatNullableWithAggregatesFilter<"InterviewSession"> | number | null
    communicationScore?: FloatNullableWithAggregatesFilter<"InterviewSession"> | number | null
    motivationScore?: FloatNullableWithAggregatesFilter<"InterviewSession"> | number | null
    overallScore?: FloatWithAggregatesFilter<"InterviewSession"> | number
    strengths?: StringNullableWithAggregatesFilter<"InterviewSession"> | string | null
    weaknesses?: StringNullableWithAggregatesFilter<"InterviewSession"> | string | null
    recommendations?: StringNullableWithAggregatesFilter<"InterviewSession"> | string | null
    interviewNotes?: StringNullableWithAggregatesFilter<"InterviewSession"> | string | null
    recommendation?: StringWithAggregatesFilter<"InterviewSession"> | string
    interviewerName?: StringNullableWithAggregatesFilter<"InterviewSession"> | string | null
    interviewerRole?: StringNullableWithAggregatesFilter<"InterviewSession"> | string | null
  }

  export type OnboardingRecordWhereInput = {
    AND?: OnboardingRecordWhereInput | OnboardingRecordWhereInput[]
    OR?: OnboardingRecordWhereInput[]
    NOT?: OnboardingRecordWhereInput | OnboardingRecordWhereInput[]
    id?: StringFilter<"OnboardingRecord"> | string
    createdAt?: DateTimeFilter<"OnboardingRecord"> | Date | string
    updatedAt?: DateTimeFilter<"OnboardingRecord"> | Date | string
    candidateId?: StringFilter<"OnboardingRecord"> | string
    companyId?: StringFilter<"OnboardingRecord"> | string
    startDate?: DateTimeFilter<"OnboardingRecord"> | Date | string
    onboardingStatus?: StringFilter<"OnboardingRecord"> | string
    documentationComplete?: BoolFilter<"OnboardingRecord"> | boolean
    systemAccessGranted?: BoolFilter<"OnboardingRecord"> | boolean
    trainingCompleted?: BoolFilter<"OnboardingRecord"> | boolean
    culturalOrientationDone?: BoolFilter<"OnboardingRecord"> | boolean
    mentorAssigned?: BoolFilter<"OnboardingRecord"> | boolean
    culturalAdaptationScore?: FloatNullableFilter<"OnboardingRecord"> | number | null
    integrationChallenges?: StringNullableFilter<"OnboardingRecord"> | string | null
    supportProvided?: StringNullableFilter<"OnboardingRecord"> | string | null
    expectedCompletionDate?: DateTimeNullableFilter<"OnboardingRecord"> | Date | string | null
    actualCompletionDate?: DateTimeNullableFilter<"OnboardingRecord"> | Date | string | null
    onboardingNotes?: StringNullableFilter<"OnboardingRecord"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type OnboardingRecordOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    onboardingStatus?: SortOrder
    documentationComplete?: SortOrder
    systemAccessGranted?: SortOrder
    trainingCompleted?: SortOrder
    culturalOrientationDone?: SortOrder
    mentorAssigned?: SortOrder
    culturalAdaptationScore?: SortOrderInput | SortOrder
    integrationChallenges?: SortOrderInput | SortOrder
    supportProvided?: SortOrderInput | SortOrder
    expectedCompletionDate?: SortOrderInput | SortOrder
    actualCompletionDate?: SortOrderInput | SortOrder
    onboardingNotes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
  }

  export type OnboardingRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OnboardingRecordWhereInput | OnboardingRecordWhereInput[]
    OR?: OnboardingRecordWhereInput[]
    NOT?: OnboardingRecordWhereInput | OnboardingRecordWhereInput[]
    createdAt?: DateTimeFilter<"OnboardingRecord"> | Date | string
    updatedAt?: DateTimeFilter<"OnboardingRecord"> | Date | string
    candidateId?: StringFilter<"OnboardingRecord"> | string
    companyId?: StringFilter<"OnboardingRecord"> | string
    startDate?: DateTimeFilter<"OnboardingRecord"> | Date | string
    onboardingStatus?: StringFilter<"OnboardingRecord"> | string
    documentationComplete?: BoolFilter<"OnboardingRecord"> | boolean
    systemAccessGranted?: BoolFilter<"OnboardingRecord"> | boolean
    trainingCompleted?: BoolFilter<"OnboardingRecord"> | boolean
    culturalOrientationDone?: BoolFilter<"OnboardingRecord"> | boolean
    mentorAssigned?: BoolFilter<"OnboardingRecord"> | boolean
    culturalAdaptationScore?: FloatNullableFilter<"OnboardingRecord"> | number | null
    integrationChallenges?: StringNullableFilter<"OnboardingRecord"> | string | null
    supportProvided?: StringNullableFilter<"OnboardingRecord"> | string | null
    expectedCompletionDate?: DateTimeNullableFilter<"OnboardingRecord"> | Date | string | null
    actualCompletionDate?: DateTimeNullableFilter<"OnboardingRecord"> | Date | string | null
    onboardingNotes?: StringNullableFilter<"OnboardingRecord"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id">

  export type OnboardingRecordOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    onboardingStatus?: SortOrder
    documentationComplete?: SortOrder
    systemAccessGranted?: SortOrder
    trainingCompleted?: SortOrder
    culturalOrientationDone?: SortOrder
    mentorAssigned?: SortOrder
    culturalAdaptationScore?: SortOrderInput | SortOrder
    integrationChallenges?: SortOrderInput | SortOrder
    supportProvided?: SortOrderInput | SortOrder
    expectedCompletionDate?: SortOrderInput | SortOrder
    actualCompletionDate?: SortOrderInput | SortOrder
    onboardingNotes?: SortOrderInput | SortOrder
    _count?: OnboardingRecordCountOrderByAggregateInput
    _avg?: OnboardingRecordAvgOrderByAggregateInput
    _max?: OnboardingRecordMaxOrderByAggregateInput
    _min?: OnboardingRecordMinOrderByAggregateInput
    _sum?: OnboardingRecordSumOrderByAggregateInput
  }

  export type OnboardingRecordScalarWhereWithAggregatesInput = {
    AND?: OnboardingRecordScalarWhereWithAggregatesInput | OnboardingRecordScalarWhereWithAggregatesInput[]
    OR?: OnboardingRecordScalarWhereWithAggregatesInput[]
    NOT?: OnboardingRecordScalarWhereWithAggregatesInput | OnboardingRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OnboardingRecord"> | string
    createdAt?: DateTimeWithAggregatesFilter<"OnboardingRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OnboardingRecord"> | Date | string
    candidateId?: StringWithAggregatesFilter<"OnboardingRecord"> | string
    companyId?: StringWithAggregatesFilter<"OnboardingRecord"> | string
    startDate?: DateTimeWithAggregatesFilter<"OnboardingRecord"> | Date | string
    onboardingStatus?: StringWithAggregatesFilter<"OnboardingRecord"> | string
    documentationComplete?: BoolWithAggregatesFilter<"OnboardingRecord"> | boolean
    systemAccessGranted?: BoolWithAggregatesFilter<"OnboardingRecord"> | boolean
    trainingCompleted?: BoolWithAggregatesFilter<"OnboardingRecord"> | boolean
    culturalOrientationDone?: BoolWithAggregatesFilter<"OnboardingRecord"> | boolean
    mentorAssigned?: BoolWithAggregatesFilter<"OnboardingRecord"> | boolean
    culturalAdaptationScore?: FloatNullableWithAggregatesFilter<"OnboardingRecord"> | number | null
    integrationChallenges?: StringNullableWithAggregatesFilter<"OnboardingRecord"> | string | null
    supportProvided?: StringNullableWithAggregatesFilter<"OnboardingRecord"> | string | null
    expectedCompletionDate?: DateTimeNullableWithAggregatesFilter<"OnboardingRecord"> | Date | string | null
    actualCompletionDate?: DateTimeNullableWithAggregatesFilter<"OnboardingRecord"> | Date | string | null
    onboardingNotes?: StringNullableWithAggregatesFilter<"OnboardingRecord"> | string | null
  }

  export type PerformanceReviewWhereInput = {
    AND?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    OR?: PerformanceReviewWhereInput[]
    NOT?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    id?: StringFilter<"PerformanceReview"> | string
    createdAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    candidateId?: StringFilter<"PerformanceReview"> | string
    companyId?: StringFilter<"PerformanceReview"> | string
    reviewPeriod?: StringFilter<"PerformanceReview"> | string
    reviewDate?: DateTimeFilter<"PerformanceReview"> | Date | string
    reviewType?: StringFilter<"PerformanceReview"> | string
    technicalPerformance?: FloatNullableFilter<"PerformanceReview"> | number | null
    culturalIntegration?: FloatNullableFilter<"PerformanceReview"> | number | null
    teamCollaboration?: FloatNullableFilter<"PerformanceReview"> | number | null
    communicationSkills?: FloatNullableFilter<"PerformanceReview"> | number | null
    goalAchievement?: FloatNullableFilter<"PerformanceReview"> | number | null
    overallPerformance?: FloatFilter<"PerformanceReview"> | number
    culturalFitImprovement?: FloatNullableFilter<"PerformanceReview"> | number | null
    japaneseBusinessEtiquette?: FloatNullableFilter<"PerformanceReview"> | number | null
    teamHarmonyContribution?: FloatNullableFilter<"PerformanceReview"> | number | null
    achievements?: StringNullableFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableFilter<"PerformanceReview"> | string | null
    developmentGoals?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewerName?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewerRole?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewNotes?: StringNullableFilter<"PerformanceReview"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type PerformanceReviewOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    reviewPeriod?: SortOrder
    reviewDate?: SortOrder
    reviewType?: SortOrder
    technicalPerformance?: SortOrderInput | SortOrder
    culturalIntegration?: SortOrderInput | SortOrder
    teamCollaboration?: SortOrderInput | SortOrder
    communicationSkills?: SortOrderInput | SortOrder
    goalAchievement?: SortOrderInput | SortOrder
    overallPerformance?: SortOrder
    culturalFitImprovement?: SortOrderInput | SortOrder
    japaneseBusinessEtiquette?: SortOrderInput | SortOrder
    teamHarmonyContribution?: SortOrderInput | SortOrder
    achievements?: SortOrderInput | SortOrder
    areasForImprovement?: SortOrderInput | SortOrder
    developmentGoals?: SortOrderInput | SortOrder
    reviewerName?: SortOrderInput | SortOrder
    reviewerRole?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
  }

  export type PerformanceReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    OR?: PerformanceReviewWhereInput[]
    NOT?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    createdAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    candidateId?: StringFilter<"PerformanceReview"> | string
    companyId?: StringFilter<"PerformanceReview"> | string
    reviewPeriod?: StringFilter<"PerformanceReview"> | string
    reviewDate?: DateTimeFilter<"PerformanceReview"> | Date | string
    reviewType?: StringFilter<"PerformanceReview"> | string
    technicalPerformance?: FloatNullableFilter<"PerformanceReview"> | number | null
    culturalIntegration?: FloatNullableFilter<"PerformanceReview"> | number | null
    teamCollaboration?: FloatNullableFilter<"PerformanceReview"> | number | null
    communicationSkills?: FloatNullableFilter<"PerformanceReview"> | number | null
    goalAchievement?: FloatNullableFilter<"PerformanceReview"> | number | null
    overallPerformance?: FloatFilter<"PerformanceReview"> | number
    culturalFitImprovement?: FloatNullableFilter<"PerformanceReview"> | number | null
    japaneseBusinessEtiquette?: FloatNullableFilter<"PerformanceReview"> | number | null
    teamHarmonyContribution?: FloatNullableFilter<"PerformanceReview"> | number | null
    achievements?: StringNullableFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableFilter<"PerformanceReview"> | string | null
    developmentGoals?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewerName?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewerRole?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewNotes?: StringNullableFilter<"PerformanceReview"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id">

  export type PerformanceReviewOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    reviewPeriod?: SortOrder
    reviewDate?: SortOrder
    reviewType?: SortOrder
    technicalPerformance?: SortOrderInput | SortOrder
    culturalIntegration?: SortOrderInput | SortOrder
    teamCollaboration?: SortOrderInput | SortOrder
    communicationSkills?: SortOrderInput | SortOrder
    goalAchievement?: SortOrderInput | SortOrder
    overallPerformance?: SortOrder
    culturalFitImprovement?: SortOrderInput | SortOrder
    japaneseBusinessEtiquette?: SortOrderInput | SortOrder
    teamHarmonyContribution?: SortOrderInput | SortOrder
    achievements?: SortOrderInput | SortOrder
    areasForImprovement?: SortOrderInput | SortOrder
    developmentGoals?: SortOrderInput | SortOrder
    reviewerName?: SortOrderInput | SortOrder
    reviewerRole?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    _count?: PerformanceReviewCountOrderByAggregateInput
    _avg?: PerformanceReviewAvgOrderByAggregateInput
    _max?: PerformanceReviewMaxOrderByAggregateInput
    _min?: PerformanceReviewMinOrderByAggregateInput
    _sum?: PerformanceReviewSumOrderByAggregateInput
  }

  export type PerformanceReviewScalarWhereWithAggregatesInput = {
    AND?: PerformanceReviewScalarWhereWithAggregatesInput | PerformanceReviewScalarWhereWithAggregatesInput[]
    OR?: PerformanceReviewScalarWhereWithAggregatesInput[]
    NOT?: PerformanceReviewScalarWhereWithAggregatesInput | PerformanceReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerformanceReview"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerformanceReview"> | Date | string
    candidateId?: StringWithAggregatesFilter<"PerformanceReview"> | string
    companyId?: StringWithAggregatesFilter<"PerformanceReview"> | string
    reviewPeriod?: StringWithAggregatesFilter<"PerformanceReview"> | string
    reviewDate?: DateTimeWithAggregatesFilter<"PerformanceReview"> | Date | string
    reviewType?: StringWithAggregatesFilter<"PerformanceReview"> | string
    technicalPerformance?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    culturalIntegration?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    teamCollaboration?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    communicationSkills?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    goalAchievement?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    overallPerformance?: FloatWithAggregatesFilter<"PerformanceReview"> | number
    culturalFitImprovement?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    japaneseBusinessEtiquette?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    teamHarmonyContribution?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    achievements?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    developmentGoals?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    reviewerName?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    reviewerRole?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    reviewNotes?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
  }

  export type CandidateStatusHistoryWhereInput = {
    AND?: CandidateStatusHistoryWhereInput | CandidateStatusHistoryWhereInput[]
    OR?: CandidateStatusHistoryWhereInput[]
    NOT?: CandidateStatusHistoryWhereInput | CandidateStatusHistoryWhereInput[]
    id?: StringFilter<"CandidateStatusHistory"> | string
    createdAt?: DateTimeFilter<"CandidateStatusHistory"> | Date | string
    candidateId?: StringFilter<"CandidateStatusHistory"> | string
    previousStatus?: EnumCandidateStatusFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    changeReason?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    changedBy?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    notes?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type CandidateStatusHistoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    candidateId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changeReason?: SortOrderInput | SortOrder
    changedBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
  }

  export type CandidateStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidateStatusHistoryWhereInput | CandidateStatusHistoryWhereInput[]
    OR?: CandidateStatusHistoryWhereInput[]
    NOT?: CandidateStatusHistoryWhereInput | CandidateStatusHistoryWhereInput[]
    createdAt?: DateTimeFilter<"CandidateStatusHistory"> | Date | string
    candidateId?: StringFilter<"CandidateStatusHistory"> | string
    previousStatus?: EnumCandidateStatusFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    changeReason?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    changedBy?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    notes?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type CandidateStatusHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    candidateId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changeReason?: SortOrderInput | SortOrder
    changedBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: CandidateStatusHistoryCountOrderByAggregateInput
    _max?: CandidateStatusHistoryMaxOrderByAggregateInput
    _min?: CandidateStatusHistoryMinOrderByAggregateInput
  }

  export type CandidateStatusHistoryScalarWhereWithAggregatesInput = {
    AND?: CandidateStatusHistoryScalarWhereWithAggregatesInput | CandidateStatusHistoryScalarWhereWithAggregatesInput[]
    OR?: CandidateStatusHistoryScalarWhereWithAggregatesInput[]
    NOT?: CandidateStatusHistoryScalarWhereWithAggregatesInput | CandidateStatusHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidateStatusHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CandidateStatusHistory"> | Date | string
    candidateId?: StringWithAggregatesFilter<"CandidateStatusHistory"> | string
    previousStatus?: EnumCandidateStatusWithAggregatesFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusWithAggregatesFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    changeReason?: StringNullableWithAggregatesFilter<"CandidateStatusHistory"> | string | null
    changedBy?: StringNullableWithAggregatesFilter<"CandidateStatusHistory"> | string | null
    notes?: StringNullableWithAggregatesFilter<"CandidateStatusHistory"> | string | null
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: StringFilter<"Application"> | string
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    candidateId?: StringFilter<"Application"> | string
    companyId?: StringFilter<"Application"> | string
    jobPostingId?: StringFilter<"Application"> | string
    applicationStatus?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    applicationDate?: DateTimeFilter<"Application"> | Date | string
    overallMatchScore?: FloatNullableFilter<"Application"> | number | null
    technicalMatchScore?: FloatNullableFilter<"Application"> | number | null
    culturalFitScore?: FloatNullableFilter<"Application"> | number | null
    languageMatchScore?: FloatNullableFilter<"Application"> | number | null
    experienceMatchScore?: FloatNullableFilter<"Application"> | number | null
    resumeUrl?: StringNullableFilter<"Application"> | string | null
    coverLetterUrl?: StringNullableFilter<"Application"> | string | null
    portfolioUrl?: StringNullableFilter<"Application"> | string | null
    finalDecision?: StringNullableFilter<"Application"> | string | null
    decisionDate?: DateTimeNullableFilter<"Application"> | Date | string | null
    decisionReason?: StringNullableFilter<"Application"> | string | null
    applicationNotes?: StringNullableFilter<"Application"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    jobPosting?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    interviewSessions?: InterviewSessionListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    jobPostingId?: SortOrder
    applicationStatus?: SortOrder
    applicationDate?: SortOrder
    overallMatchScore?: SortOrderInput | SortOrder
    technicalMatchScore?: SortOrderInput | SortOrder
    culturalFitScore?: SortOrderInput | SortOrder
    languageMatchScore?: SortOrderInput | SortOrder
    experienceMatchScore?: SortOrderInput | SortOrder
    resumeUrl?: SortOrderInput | SortOrder
    coverLetterUrl?: SortOrderInput | SortOrder
    portfolioUrl?: SortOrderInput | SortOrder
    finalDecision?: SortOrderInput | SortOrder
    decisionDate?: SortOrderInput | SortOrder
    decisionReason?: SortOrderInput | SortOrder
    applicationNotes?: SortOrderInput | SortOrder
    candidate?: CandidateOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    jobPosting?: JobPostingOrderByWithRelationInput
    interviewSessions?: InterviewSessionOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    candidateId?: StringFilter<"Application"> | string
    companyId?: StringFilter<"Application"> | string
    jobPostingId?: StringFilter<"Application"> | string
    applicationStatus?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    applicationDate?: DateTimeFilter<"Application"> | Date | string
    overallMatchScore?: FloatNullableFilter<"Application"> | number | null
    technicalMatchScore?: FloatNullableFilter<"Application"> | number | null
    culturalFitScore?: FloatNullableFilter<"Application"> | number | null
    languageMatchScore?: FloatNullableFilter<"Application"> | number | null
    experienceMatchScore?: FloatNullableFilter<"Application"> | number | null
    resumeUrl?: StringNullableFilter<"Application"> | string | null
    coverLetterUrl?: StringNullableFilter<"Application"> | string | null
    portfolioUrl?: StringNullableFilter<"Application"> | string | null
    finalDecision?: StringNullableFilter<"Application"> | string | null
    decisionDate?: DateTimeNullableFilter<"Application"> | Date | string | null
    decisionReason?: StringNullableFilter<"Application"> | string | null
    applicationNotes?: StringNullableFilter<"Application"> | string | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    jobPosting?: XOR<JobPostingScalarRelationFilter, JobPostingWhereInput>
    interviewSessions?: InterviewSessionListRelationFilter
  }, "id">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    jobPostingId?: SortOrder
    applicationStatus?: SortOrder
    applicationDate?: SortOrder
    overallMatchScore?: SortOrderInput | SortOrder
    technicalMatchScore?: SortOrderInput | SortOrder
    culturalFitScore?: SortOrderInput | SortOrder
    languageMatchScore?: SortOrderInput | SortOrder
    experienceMatchScore?: SortOrderInput | SortOrder
    resumeUrl?: SortOrderInput | SortOrder
    coverLetterUrl?: SortOrderInput | SortOrder
    portfolioUrl?: SortOrderInput | SortOrder
    finalDecision?: SortOrderInput | SortOrder
    decisionDate?: SortOrderInput | SortOrder
    decisionReason?: SortOrderInput | SortOrder
    applicationNotes?: SortOrderInput | SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Application"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    candidateId?: StringWithAggregatesFilter<"Application"> | string
    companyId?: StringWithAggregatesFilter<"Application"> | string
    jobPostingId?: StringWithAggregatesFilter<"Application"> | string
    applicationStatus?: EnumApplicationStatusWithAggregatesFilter<"Application"> | $Enums.ApplicationStatus
    applicationDate?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    overallMatchScore?: FloatNullableWithAggregatesFilter<"Application"> | number | null
    technicalMatchScore?: FloatNullableWithAggregatesFilter<"Application"> | number | null
    culturalFitScore?: FloatNullableWithAggregatesFilter<"Application"> | number | null
    languageMatchScore?: FloatNullableWithAggregatesFilter<"Application"> | number | null
    experienceMatchScore?: FloatNullableWithAggregatesFilter<"Application"> | number | null
    resumeUrl?: StringNullableWithAggregatesFilter<"Application"> | string | null
    coverLetterUrl?: StringNullableWithAggregatesFilter<"Application"> | string | null
    portfolioUrl?: StringNullableWithAggregatesFilter<"Application"> | string | null
    finalDecision?: StringNullableWithAggregatesFilter<"Application"> | string | null
    decisionDate?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    decisionReason?: StringNullableWithAggregatesFilter<"Application"> | string | null
    applicationNotes?: StringNullableWithAggregatesFilter<"Application"> | string | null
  }

  export type MarketIntelligenceWhereInput = {
    AND?: MarketIntelligenceWhereInput | MarketIntelligenceWhereInput[]
    OR?: MarketIntelligenceWhereInput[]
    NOT?: MarketIntelligenceWhereInput | MarketIntelligenceWhereInput[]
    id?: StringFilter<"MarketIntelligence"> | string
    createdAt?: DateTimeFilter<"MarketIntelligence"> | Date | string
    updatedAt?: DateTimeFilter<"MarketIntelligence"> | Date | string
    dataType?: StringFilter<"MarketIntelligence"> | string
    industry?: StringFilter<"MarketIntelligence"> | string
    location?: StringFilter<"MarketIntelligence"> | string
    timeframe?: StringFilter<"MarketIntelligence"> | string
    averageSalary?: FloatNullableFilter<"MarketIntelligence"> | number | null
    salaryRange?: StringNullableFilter<"MarketIntelligence"> | string | null
    demandLevel?: StringFilter<"MarketIntelligence"> | string
    supplyLevel?: StringFilter<"MarketIntelligence"> | string
    inDemandSkills?: StringNullableFilter<"MarketIntelligence"> | string | null
    emergingSkills?: StringNullableFilter<"MarketIntelligence"> | string | null
    decliningSkills?: StringNullableFilter<"MarketIntelligence"> | string | null
    culturalTrends?: StringNullableFilter<"MarketIntelligence"> | string | null
    adaptationChallenges?: StringNullableFilter<"MarketIntelligence"> | string | null
    successFactors?: StringNullableFilter<"MarketIntelligence"> | string | null
    dataSource?: StringNullableFilter<"MarketIntelligence"> | string | null
    reliability?: FloatNullableFilter<"MarketIntelligence"> | number | null
    marketNotes?: StringNullableFilter<"MarketIntelligence"> | string | null
  }

  export type MarketIntelligenceOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataType?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    timeframe?: SortOrder
    averageSalary?: SortOrderInput | SortOrder
    salaryRange?: SortOrderInput | SortOrder
    demandLevel?: SortOrder
    supplyLevel?: SortOrder
    inDemandSkills?: SortOrderInput | SortOrder
    emergingSkills?: SortOrderInput | SortOrder
    decliningSkills?: SortOrderInput | SortOrder
    culturalTrends?: SortOrderInput | SortOrder
    adaptationChallenges?: SortOrderInput | SortOrder
    successFactors?: SortOrderInput | SortOrder
    dataSource?: SortOrderInput | SortOrder
    reliability?: SortOrderInput | SortOrder
    marketNotes?: SortOrderInput | SortOrder
  }

  export type MarketIntelligenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarketIntelligenceWhereInput | MarketIntelligenceWhereInput[]
    OR?: MarketIntelligenceWhereInput[]
    NOT?: MarketIntelligenceWhereInput | MarketIntelligenceWhereInput[]
    createdAt?: DateTimeFilter<"MarketIntelligence"> | Date | string
    updatedAt?: DateTimeFilter<"MarketIntelligence"> | Date | string
    dataType?: StringFilter<"MarketIntelligence"> | string
    industry?: StringFilter<"MarketIntelligence"> | string
    location?: StringFilter<"MarketIntelligence"> | string
    timeframe?: StringFilter<"MarketIntelligence"> | string
    averageSalary?: FloatNullableFilter<"MarketIntelligence"> | number | null
    salaryRange?: StringNullableFilter<"MarketIntelligence"> | string | null
    demandLevel?: StringFilter<"MarketIntelligence"> | string
    supplyLevel?: StringFilter<"MarketIntelligence"> | string
    inDemandSkills?: StringNullableFilter<"MarketIntelligence"> | string | null
    emergingSkills?: StringNullableFilter<"MarketIntelligence"> | string | null
    decliningSkills?: StringNullableFilter<"MarketIntelligence"> | string | null
    culturalTrends?: StringNullableFilter<"MarketIntelligence"> | string | null
    adaptationChallenges?: StringNullableFilter<"MarketIntelligence"> | string | null
    successFactors?: StringNullableFilter<"MarketIntelligence"> | string | null
    dataSource?: StringNullableFilter<"MarketIntelligence"> | string | null
    reliability?: FloatNullableFilter<"MarketIntelligence"> | number | null
    marketNotes?: StringNullableFilter<"MarketIntelligence"> | string | null
  }, "id">

  export type MarketIntelligenceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataType?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    timeframe?: SortOrder
    averageSalary?: SortOrderInput | SortOrder
    salaryRange?: SortOrderInput | SortOrder
    demandLevel?: SortOrder
    supplyLevel?: SortOrder
    inDemandSkills?: SortOrderInput | SortOrder
    emergingSkills?: SortOrderInput | SortOrder
    decliningSkills?: SortOrderInput | SortOrder
    culturalTrends?: SortOrderInput | SortOrder
    adaptationChallenges?: SortOrderInput | SortOrder
    successFactors?: SortOrderInput | SortOrder
    dataSource?: SortOrderInput | SortOrder
    reliability?: SortOrderInput | SortOrder
    marketNotes?: SortOrderInput | SortOrder
    _count?: MarketIntelligenceCountOrderByAggregateInput
    _avg?: MarketIntelligenceAvgOrderByAggregateInput
    _max?: MarketIntelligenceMaxOrderByAggregateInput
    _min?: MarketIntelligenceMinOrderByAggregateInput
    _sum?: MarketIntelligenceSumOrderByAggregateInput
  }

  export type MarketIntelligenceScalarWhereWithAggregatesInput = {
    AND?: MarketIntelligenceScalarWhereWithAggregatesInput | MarketIntelligenceScalarWhereWithAggregatesInput[]
    OR?: MarketIntelligenceScalarWhereWithAggregatesInput[]
    NOT?: MarketIntelligenceScalarWhereWithAggregatesInput | MarketIntelligenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketIntelligence"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MarketIntelligence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MarketIntelligence"> | Date | string
    dataType?: StringWithAggregatesFilter<"MarketIntelligence"> | string
    industry?: StringWithAggregatesFilter<"MarketIntelligence"> | string
    location?: StringWithAggregatesFilter<"MarketIntelligence"> | string
    timeframe?: StringWithAggregatesFilter<"MarketIntelligence"> | string
    averageSalary?: FloatNullableWithAggregatesFilter<"MarketIntelligence"> | number | null
    salaryRange?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    demandLevel?: StringWithAggregatesFilter<"MarketIntelligence"> | string
    supplyLevel?: StringWithAggregatesFilter<"MarketIntelligence"> | string
    inDemandSkills?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    emergingSkills?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    decliningSkills?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    culturalTrends?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    adaptationChallenges?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    successFactors?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    dataSource?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
    reliability?: FloatNullableWithAggregatesFilter<"MarketIntelligence"> | number | null
    marketNotes?: StringNullableWithAggregatesFilter<"MarketIntelligence"> | string | null
  }

  export type SystemMetricsWhereInput = {
    AND?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    OR?: SystemMetricsWhereInput[]
    NOT?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    id?: StringFilter<"SystemMetrics"> | string
    createdAt?: DateTimeFilter<"SystemMetrics"> | Date | string
    metricType?: StringFilter<"SystemMetrics"> | string
    metricName?: StringFilter<"SystemMetrics"> | string
    metricValue?: FloatFilter<"SystemMetrics"> | number
    metricUnit?: StringNullableFilter<"SystemMetrics"> | string | null
    timeframe?: StringNullableFilter<"SystemMetrics"> | string | null
    category?: StringNullableFilter<"SystemMetrics"> | string | null
    subcategory?: StringNullableFilter<"SystemMetrics"> | string | null
    calculationMethod?: StringNullableFilter<"SystemMetrics"> | string | null
    dataPoints?: IntNullableFilter<"SystemMetrics"> | number | null
    confidence?: FloatNullableFilter<"SystemMetrics"> | number | null
    metricNotes?: StringNullableFilter<"SystemMetrics"> | string | null
  }

  export type SystemMetricsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    metricType?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrderInput | SortOrder
    timeframe?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    subcategory?: SortOrderInput | SortOrder
    calculationMethod?: SortOrderInput | SortOrder
    dataPoints?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    metricNotes?: SortOrderInput | SortOrder
  }

  export type SystemMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    OR?: SystemMetricsWhereInput[]
    NOT?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    createdAt?: DateTimeFilter<"SystemMetrics"> | Date | string
    metricType?: StringFilter<"SystemMetrics"> | string
    metricName?: StringFilter<"SystemMetrics"> | string
    metricValue?: FloatFilter<"SystemMetrics"> | number
    metricUnit?: StringNullableFilter<"SystemMetrics"> | string | null
    timeframe?: StringNullableFilter<"SystemMetrics"> | string | null
    category?: StringNullableFilter<"SystemMetrics"> | string | null
    subcategory?: StringNullableFilter<"SystemMetrics"> | string | null
    calculationMethod?: StringNullableFilter<"SystemMetrics"> | string | null
    dataPoints?: IntNullableFilter<"SystemMetrics"> | number | null
    confidence?: FloatNullableFilter<"SystemMetrics"> | number | null
    metricNotes?: StringNullableFilter<"SystemMetrics"> | string | null
  }, "id">

  export type SystemMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    metricType?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrderInput | SortOrder
    timeframe?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    subcategory?: SortOrderInput | SortOrder
    calculationMethod?: SortOrderInput | SortOrder
    dataPoints?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    metricNotes?: SortOrderInput | SortOrder
    _count?: SystemMetricsCountOrderByAggregateInput
    _avg?: SystemMetricsAvgOrderByAggregateInput
    _max?: SystemMetricsMaxOrderByAggregateInput
    _min?: SystemMetricsMinOrderByAggregateInput
    _sum?: SystemMetricsSumOrderByAggregateInput
  }

  export type SystemMetricsScalarWhereWithAggregatesInput = {
    AND?: SystemMetricsScalarWhereWithAggregatesInput | SystemMetricsScalarWhereWithAggregatesInput[]
    OR?: SystemMetricsScalarWhereWithAggregatesInput[]
    NOT?: SystemMetricsScalarWhereWithAggregatesInput | SystemMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemMetrics"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SystemMetrics"> | Date | string
    metricType?: StringWithAggregatesFilter<"SystemMetrics"> | string
    metricName?: StringWithAggregatesFilter<"SystemMetrics"> | string
    metricValue?: FloatWithAggregatesFilter<"SystemMetrics"> | number
    metricUnit?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
    timeframe?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
    category?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
    subcategory?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
    calculationMethod?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
    dataPoints?: IntNullableWithAggregatesFilter<"SystemMetrics"> | number | null
    confidence?: FloatNullableWithAggregatesFilter<"SystemMetrics"> | number | null
    metricNotes?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
  }

  export type ReportGenerationWhereInput = {
    AND?: ReportGenerationWhereInput | ReportGenerationWhereInput[]
    OR?: ReportGenerationWhereInput[]
    NOT?: ReportGenerationWhereInput | ReportGenerationWhereInput[]
    id?: StringFilter<"ReportGeneration"> | string
    createdAt?: DateTimeFilter<"ReportGeneration"> | Date | string
    updatedAt?: DateTimeFilter<"ReportGeneration"> | Date | string
    reportType?: StringFilter<"ReportGeneration"> | string
    reportTitle?: StringFilter<"ReportGeneration"> | string
    reportFormat?: StringFilter<"ReportGeneration"> | string
    candidateId?: StringNullableFilter<"ReportGeneration"> | string | null
    companyId?: StringNullableFilter<"ReportGeneration"> | string | null
    dateRange?: StringNullableFilter<"ReportGeneration"> | string | null
    filters?: StringNullableFilter<"ReportGeneration"> | string | null
    generationStatus?: StringFilter<"ReportGeneration"> | string
    generatedAt?: DateTimeNullableFilter<"ReportGeneration"> | Date | string | null
    reportUrl?: StringNullableFilter<"ReportGeneration"> | string | null
    reportSize?: IntNullableFilter<"ReportGeneration"> | number | null
    keyFindings?: StringNullableFilter<"ReportGeneration"> | string | null
    recommendations?: StringNullableFilter<"ReportGeneration"> | string | null
    dataPoints?: IntNullableFilter<"ReportGeneration"> | number | null
    requestedBy?: StringNullableFilter<"ReportGeneration"> | string | null
    reportNotes?: StringNullableFilter<"ReportGeneration"> | string | null
  }

  export type ReportGenerationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportType?: SortOrder
    reportTitle?: SortOrder
    reportFormat?: SortOrder
    candidateId?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    dateRange?: SortOrderInput | SortOrder
    filters?: SortOrderInput | SortOrder
    generationStatus?: SortOrder
    generatedAt?: SortOrderInput | SortOrder
    reportUrl?: SortOrderInput | SortOrder
    reportSize?: SortOrderInput | SortOrder
    keyFindings?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    dataPoints?: SortOrderInput | SortOrder
    requestedBy?: SortOrderInput | SortOrder
    reportNotes?: SortOrderInput | SortOrder
  }

  export type ReportGenerationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportGenerationWhereInput | ReportGenerationWhereInput[]
    OR?: ReportGenerationWhereInput[]
    NOT?: ReportGenerationWhereInput | ReportGenerationWhereInput[]
    createdAt?: DateTimeFilter<"ReportGeneration"> | Date | string
    updatedAt?: DateTimeFilter<"ReportGeneration"> | Date | string
    reportType?: StringFilter<"ReportGeneration"> | string
    reportTitle?: StringFilter<"ReportGeneration"> | string
    reportFormat?: StringFilter<"ReportGeneration"> | string
    candidateId?: StringNullableFilter<"ReportGeneration"> | string | null
    companyId?: StringNullableFilter<"ReportGeneration"> | string | null
    dateRange?: StringNullableFilter<"ReportGeneration"> | string | null
    filters?: StringNullableFilter<"ReportGeneration"> | string | null
    generationStatus?: StringFilter<"ReportGeneration"> | string
    generatedAt?: DateTimeNullableFilter<"ReportGeneration"> | Date | string | null
    reportUrl?: StringNullableFilter<"ReportGeneration"> | string | null
    reportSize?: IntNullableFilter<"ReportGeneration"> | number | null
    keyFindings?: StringNullableFilter<"ReportGeneration"> | string | null
    recommendations?: StringNullableFilter<"ReportGeneration"> | string | null
    dataPoints?: IntNullableFilter<"ReportGeneration"> | number | null
    requestedBy?: StringNullableFilter<"ReportGeneration"> | string | null
    reportNotes?: StringNullableFilter<"ReportGeneration"> | string | null
  }, "id">

  export type ReportGenerationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportType?: SortOrder
    reportTitle?: SortOrder
    reportFormat?: SortOrder
    candidateId?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    dateRange?: SortOrderInput | SortOrder
    filters?: SortOrderInput | SortOrder
    generationStatus?: SortOrder
    generatedAt?: SortOrderInput | SortOrder
    reportUrl?: SortOrderInput | SortOrder
    reportSize?: SortOrderInput | SortOrder
    keyFindings?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    dataPoints?: SortOrderInput | SortOrder
    requestedBy?: SortOrderInput | SortOrder
    reportNotes?: SortOrderInput | SortOrder
    _count?: ReportGenerationCountOrderByAggregateInput
    _avg?: ReportGenerationAvgOrderByAggregateInput
    _max?: ReportGenerationMaxOrderByAggregateInput
    _min?: ReportGenerationMinOrderByAggregateInput
    _sum?: ReportGenerationSumOrderByAggregateInput
  }

  export type ReportGenerationScalarWhereWithAggregatesInput = {
    AND?: ReportGenerationScalarWhereWithAggregatesInput | ReportGenerationScalarWhereWithAggregatesInput[]
    OR?: ReportGenerationScalarWhereWithAggregatesInput[]
    NOT?: ReportGenerationScalarWhereWithAggregatesInput | ReportGenerationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportGeneration"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportGeneration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReportGeneration"> | Date | string
    reportType?: StringWithAggregatesFilter<"ReportGeneration"> | string
    reportTitle?: StringWithAggregatesFilter<"ReportGeneration"> | string
    reportFormat?: StringWithAggregatesFilter<"ReportGeneration"> | string
    candidateId?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    companyId?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    dateRange?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    filters?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    generationStatus?: StringWithAggregatesFilter<"ReportGeneration"> | string
    generatedAt?: DateTimeNullableWithAggregatesFilter<"ReportGeneration"> | Date | string | null
    reportUrl?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    reportSize?: IntNullableWithAggregatesFilter<"ReportGeneration"> | number | null
    keyFindings?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    recommendations?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    dataPoints?: IntNullableWithAggregatesFilter<"ReportGeneration"> | number | null
    requestedBy?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
    reportNotes?: StringNullableWithAggregatesFilter<"ReportGeneration"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name?: string | null
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    candidateId?: string | null
    companyId?: string | null
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name?: string | null
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    candidateId?: string | null
    companyId?: string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name?: string | null
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    candidateId?: string | null
    companyId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
  }

  export type CandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingCreateNestedManyWithoutCompanyInput
    applications?: ApplicationCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUpdateManyWithoutCompanyNestedInput
    applications?: ApplicationUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobPostingCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
    company: CompanyCreateNestedOneWithoutJobPostingsInput
    applications?: ApplicationCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
    companyId: string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutJobPostingsNestedInput
    applications?: ApplicationUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
    companyId: string
  }

  export type JobPostingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobPostingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
  }

  export type CulturalAssessmentCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore?: number
    kaizenImprovementScore?: number
    omotenashiServiceScore?: number
    bushidoDedicationScore?: number
    nemawashiConsensusScore?: number
    honneTatemaeBalance?: number
    indirectCommunication?: number
    nonverbalAwareness?: number
    silenceComfort?: number
    contextualUnderstanding?: number
    senpaiKohaiRespect?: number
    authorityRecognition?: number
    formalityAdherence?: number
    statusAwareness?: number
    hierarchyNavigation?: number
    groupHarmonyPriority?: number
    collectiveDecisionMaking?: number
    consensusBuilding?: number
    teamLoyalty?: number
    groupAccountability?: number
    dedicationToWork?: number
    qualityFocus?: number
    continuousImprovement?: number
    attentionToDetail?: number
    processAdherence?: number
    punctualityImportance?: number
    timeRespect?: number
    scheduleAdherence?: number
    planningOrientation?: number
    deadlineCommitment?: number
    relationshipInvestment?: number
    trustBuilding?: number
    longTermOrientation?: number
    loyaltyDemonstration?: number
    networkMaintenance?: number
    changeAcceptance?: number
    flexibilityInApproach?: number
    learningOrientation?: number
    culturalAdaptability?: number
    resilienceInChallenges?: number
    professionalEtiquette?: number
    businessCardProtocol?: number
    meetingParticipation?: number
    presentationSkills?: number
    clientServiceOrientation?: number
    creativeThinking?: number
    innovationBalance?: number
    riskAssessment?: number
    dimensionScores?: string | null
    culturalTrainingNeeded?: string | null
    assessmentNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutCulturalAssessmentsInput
  }

  export type CulturalAssessmentUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    assessmentType: string
    assessmentDate?: Date | string
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore?: number
    kaizenImprovementScore?: number
    omotenashiServiceScore?: number
    bushidoDedicationScore?: number
    nemawashiConsensusScore?: number
    honneTatemaeBalance?: number
    indirectCommunication?: number
    nonverbalAwareness?: number
    silenceComfort?: number
    contextualUnderstanding?: number
    senpaiKohaiRespect?: number
    authorityRecognition?: number
    formalityAdherence?: number
    statusAwareness?: number
    hierarchyNavigation?: number
    groupHarmonyPriority?: number
    collectiveDecisionMaking?: number
    consensusBuilding?: number
    teamLoyalty?: number
    groupAccountability?: number
    dedicationToWork?: number
    qualityFocus?: number
    continuousImprovement?: number
    attentionToDetail?: number
    processAdherence?: number
    punctualityImportance?: number
    timeRespect?: number
    scheduleAdherence?: number
    planningOrientation?: number
    deadlineCommitment?: number
    relationshipInvestment?: number
    trustBuilding?: number
    longTermOrientation?: number
    loyaltyDemonstration?: number
    networkMaintenance?: number
    changeAcceptance?: number
    flexibilityInApproach?: number
    learningOrientation?: number
    culturalAdaptability?: number
    resilienceInChallenges?: number
    professionalEtiquette?: number
    businessCardProtocol?: number
    meetingParticipation?: number
    presentationSkills?: number
    clientServiceOrientation?: number
    creativeThinking?: number
    innovationBalance?: number
    riskAssessment?: number
    dimensionScores?: string | null
    culturalTrainingNeeded?: string | null
    assessmentNotes?: string | null
  }

  export type CulturalAssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    culturalFitPrediction?: FloatFieldUpdateOperationsInput | number
    integrationTimelineDays?: IntFieldUpdateOperationsInput | number
    waHarmonyScore?: FloatFieldUpdateOperationsInput | number
    kaizenImprovementScore?: FloatFieldUpdateOperationsInput | number
    omotenashiServiceScore?: FloatFieldUpdateOperationsInput | number
    bushidoDedicationScore?: FloatFieldUpdateOperationsInput | number
    nemawashiConsensusScore?: FloatFieldUpdateOperationsInput | number
    honneTatemaeBalance?: FloatFieldUpdateOperationsInput | number
    indirectCommunication?: FloatFieldUpdateOperationsInput | number
    nonverbalAwareness?: FloatFieldUpdateOperationsInput | number
    silenceComfort?: FloatFieldUpdateOperationsInput | number
    contextualUnderstanding?: FloatFieldUpdateOperationsInput | number
    senpaiKohaiRespect?: FloatFieldUpdateOperationsInput | number
    authorityRecognition?: FloatFieldUpdateOperationsInput | number
    formalityAdherence?: FloatFieldUpdateOperationsInput | number
    statusAwareness?: FloatFieldUpdateOperationsInput | number
    hierarchyNavigation?: FloatFieldUpdateOperationsInput | number
    groupHarmonyPriority?: FloatFieldUpdateOperationsInput | number
    collectiveDecisionMaking?: FloatFieldUpdateOperationsInput | number
    consensusBuilding?: FloatFieldUpdateOperationsInput | number
    teamLoyalty?: FloatFieldUpdateOperationsInput | number
    groupAccountability?: FloatFieldUpdateOperationsInput | number
    dedicationToWork?: FloatFieldUpdateOperationsInput | number
    qualityFocus?: FloatFieldUpdateOperationsInput | number
    continuousImprovement?: FloatFieldUpdateOperationsInput | number
    attentionToDetail?: FloatFieldUpdateOperationsInput | number
    processAdherence?: FloatFieldUpdateOperationsInput | number
    punctualityImportance?: FloatFieldUpdateOperationsInput | number
    timeRespect?: FloatFieldUpdateOperationsInput | number
    scheduleAdherence?: FloatFieldUpdateOperationsInput | number
    planningOrientation?: FloatFieldUpdateOperationsInput | number
    deadlineCommitment?: FloatFieldUpdateOperationsInput | number
    relationshipInvestment?: FloatFieldUpdateOperationsInput | number
    trustBuilding?: FloatFieldUpdateOperationsInput | number
    longTermOrientation?: FloatFieldUpdateOperationsInput | number
    loyaltyDemonstration?: FloatFieldUpdateOperationsInput | number
    networkMaintenance?: FloatFieldUpdateOperationsInput | number
    changeAcceptance?: FloatFieldUpdateOperationsInput | number
    flexibilityInApproach?: FloatFieldUpdateOperationsInput | number
    learningOrientation?: FloatFieldUpdateOperationsInput | number
    culturalAdaptability?: FloatFieldUpdateOperationsInput | number
    resilienceInChallenges?: FloatFieldUpdateOperationsInput | number
    professionalEtiquette?: FloatFieldUpdateOperationsInput | number
    businessCardProtocol?: FloatFieldUpdateOperationsInput | number
    meetingParticipation?: FloatFieldUpdateOperationsInput | number
    presentationSkills?: FloatFieldUpdateOperationsInput | number
    clientServiceOrientation?: FloatFieldUpdateOperationsInput | number
    creativeThinking?: FloatFieldUpdateOperationsInput | number
    innovationBalance?: FloatFieldUpdateOperationsInput | number
    riskAssessment?: FloatFieldUpdateOperationsInput | number
    dimensionScores?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrainingNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutCulturalAssessmentsNestedInput
  }

  export type CulturalAssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    culturalFitPrediction?: FloatFieldUpdateOperationsInput | number
    integrationTimelineDays?: IntFieldUpdateOperationsInput | number
    waHarmonyScore?: FloatFieldUpdateOperationsInput | number
    kaizenImprovementScore?: FloatFieldUpdateOperationsInput | number
    omotenashiServiceScore?: FloatFieldUpdateOperationsInput | number
    bushidoDedicationScore?: FloatFieldUpdateOperationsInput | number
    nemawashiConsensusScore?: FloatFieldUpdateOperationsInput | number
    honneTatemaeBalance?: FloatFieldUpdateOperationsInput | number
    indirectCommunication?: FloatFieldUpdateOperationsInput | number
    nonverbalAwareness?: FloatFieldUpdateOperationsInput | number
    silenceComfort?: FloatFieldUpdateOperationsInput | number
    contextualUnderstanding?: FloatFieldUpdateOperationsInput | number
    senpaiKohaiRespect?: FloatFieldUpdateOperationsInput | number
    authorityRecognition?: FloatFieldUpdateOperationsInput | number
    formalityAdherence?: FloatFieldUpdateOperationsInput | number
    statusAwareness?: FloatFieldUpdateOperationsInput | number
    hierarchyNavigation?: FloatFieldUpdateOperationsInput | number
    groupHarmonyPriority?: FloatFieldUpdateOperationsInput | number
    collectiveDecisionMaking?: FloatFieldUpdateOperationsInput | number
    consensusBuilding?: FloatFieldUpdateOperationsInput | number
    teamLoyalty?: FloatFieldUpdateOperationsInput | number
    groupAccountability?: FloatFieldUpdateOperationsInput | number
    dedicationToWork?: FloatFieldUpdateOperationsInput | number
    qualityFocus?: FloatFieldUpdateOperationsInput | number
    continuousImprovement?: FloatFieldUpdateOperationsInput | number
    attentionToDetail?: FloatFieldUpdateOperationsInput | number
    processAdherence?: FloatFieldUpdateOperationsInput | number
    punctualityImportance?: FloatFieldUpdateOperationsInput | number
    timeRespect?: FloatFieldUpdateOperationsInput | number
    scheduleAdherence?: FloatFieldUpdateOperationsInput | number
    planningOrientation?: FloatFieldUpdateOperationsInput | number
    deadlineCommitment?: FloatFieldUpdateOperationsInput | number
    relationshipInvestment?: FloatFieldUpdateOperationsInput | number
    trustBuilding?: FloatFieldUpdateOperationsInput | number
    longTermOrientation?: FloatFieldUpdateOperationsInput | number
    loyaltyDemonstration?: FloatFieldUpdateOperationsInput | number
    networkMaintenance?: FloatFieldUpdateOperationsInput | number
    changeAcceptance?: FloatFieldUpdateOperationsInput | number
    flexibilityInApproach?: FloatFieldUpdateOperationsInput | number
    learningOrientation?: FloatFieldUpdateOperationsInput | number
    culturalAdaptability?: FloatFieldUpdateOperationsInput | number
    resilienceInChallenges?: FloatFieldUpdateOperationsInput | number
    professionalEtiquette?: FloatFieldUpdateOperationsInput | number
    businessCardProtocol?: FloatFieldUpdateOperationsInput | number
    meetingParticipation?: FloatFieldUpdateOperationsInput | number
    presentationSkills?: FloatFieldUpdateOperationsInput | number
    clientServiceOrientation?: FloatFieldUpdateOperationsInput | number
    creativeThinking?: FloatFieldUpdateOperationsInput | number
    innovationBalance?: FloatFieldUpdateOperationsInput | number
    riskAssessment?: FloatFieldUpdateOperationsInput | number
    dimensionScores?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrainingNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CulturalAssessmentCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    assessmentType: string
    assessmentDate?: Date | string
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore?: number
    kaizenImprovementScore?: number
    omotenashiServiceScore?: number
    bushidoDedicationScore?: number
    nemawashiConsensusScore?: number
    honneTatemaeBalance?: number
    indirectCommunication?: number
    nonverbalAwareness?: number
    silenceComfort?: number
    contextualUnderstanding?: number
    senpaiKohaiRespect?: number
    authorityRecognition?: number
    formalityAdherence?: number
    statusAwareness?: number
    hierarchyNavigation?: number
    groupHarmonyPriority?: number
    collectiveDecisionMaking?: number
    consensusBuilding?: number
    teamLoyalty?: number
    groupAccountability?: number
    dedicationToWork?: number
    qualityFocus?: number
    continuousImprovement?: number
    attentionToDetail?: number
    processAdherence?: number
    punctualityImportance?: number
    timeRespect?: number
    scheduleAdherence?: number
    planningOrientation?: number
    deadlineCommitment?: number
    relationshipInvestment?: number
    trustBuilding?: number
    longTermOrientation?: number
    loyaltyDemonstration?: number
    networkMaintenance?: number
    changeAcceptance?: number
    flexibilityInApproach?: number
    learningOrientation?: number
    culturalAdaptability?: number
    resilienceInChallenges?: number
    professionalEtiquette?: number
    businessCardProtocol?: number
    meetingParticipation?: number
    presentationSkills?: number
    clientServiceOrientation?: number
    creativeThinking?: number
    innovationBalance?: number
    riskAssessment?: number
    dimensionScores?: string | null
    culturalTrainingNeeded?: string | null
    assessmentNotes?: string | null
  }

  export type CulturalAssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    culturalFitPrediction?: FloatFieldUpdateOperationsInput | number
    integrationTimelineDays?: IntFieldUpdateOperationsInput | number
    waHarmonyScore?: FloatFieldUpdateOperationsInput | number
    kaizenImprovementScore?: FloatFieldUpdateOperationsInput | number
    omotenashiServiceScore?: FloatFieldUpdateOperationsInput | number
    bushidoDedicationScore?: FloatFieldUpdateOperationsInput | number
    nemawashiConsensusScore?: FloatFieldUpdateOperationsInput | number
    honneTatemaeBalance?: FloatFieldUpdateOperationsInput | number
    indirectCommunication?: FloatFieldUpdateOperationsInput | number
    nonverbalAwareness?: FloatFieldUpdateOperationsInput | number
    silenceComfort?: FloatFieldUpdateOperationsInput | number
    contextualUnderstanding?: FloatFieldUpdateOperationsInput | number
    senpaiKohaiRespect?: FloatFieldUpdateOperationsInput | number
    authorityRecognition?: FloatFieldUpdateOperationsInput | number
    formalityAdherence?: FloatFieldUpdateOperationsInput | number
    statusAwareness?: FloatFieldUpdateOperationsInput | number
    hierarchyNavigation?: FloatFieldUpdateOperationsInput | number
    groupHarmonyPriority?: FloatFieldUpdateOperationsInput | number
    collectiveDecisionMaking?: FloatFieldUpdateOperationsInput | number
    consensusBuilding?: FloatFieldUpdateOperationsInput | number
    teamLoyalty?: FloatFieldUpdateOperationsInput | number
    groupAccountability?: FloatFieldUpdateOperationsInput | number
    dedicationToWork?: FloatFieldUpdateOperationsInput | number
    qualityFocus?: FloatFieldUpdateOperationsInput | number
    continuousImprovement?: FloatFieldUpdateOperationsInput | number
    attentionToDetail?: FloatFieldUpdateOperationsInput | number
    processAdherence?: FloatFieldUpdateOperationsInput | number
    punctualityImportance?: FloatFieldUpdateOperationsInput | number
    timeRespect?: FloatFieldUpdateOperationsInput | number
    scheduleAdherence?: FloatFieldUpdateOperationsInput | number
    planningOrientation?: FloatFieldUpdateOperationsInput | number
    deadlineCommitment?: FloatFieldUpdateOperationsInput | number
    relationshipInvestment?: FloatFieldUpdateOperationsInput | number
    trustBuilding?: FloatFieldUpdateOperationsInput | number
    longTermOrientation?: FloatFieldUpdateOperationsInput | number
    loyaltyDemonstration?: FloatFieldUpdateOperationsInput | number
    networkMaintenance?: FloatFieldUpdateOperationsInput | number
    changeAcceptance?: FloatFieldUpdateOperationsInput | number
    flexibilityInApproach?: FloatFieldUpdateOperationsInput | number
    learningOrientation?: FloatFieldUpdateOperationsInput | number
    culturalAdaptability?: FloatFieldUpdateOperationsInput | number
    resilienceInChallenges?: FloatFieldUpdateOperationsInput | number
    professionalEtiquette?: FloatFieldUpdateOperationsInput | number
    businessCardProtocol?: FloatFieldUpdateOperationsInput | number
    meetingParticipation?: FloatFieldUpdateOperationsInput | number
    presentationSkills?: FloatFieldUpdateOperationsInput | number
    clientServiceOrientation?: FloatFieldUpdateOperationsInput | number
    creativeThinking?: FloatFieldUpdateOperationsInput | number
    innovationBalance?: FloatFieldUpdateOperationsInput | number
    riskAssessment?: FloatFieldUpdateOperationsInput | number
    dimensionScores?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrainingNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CulturalAssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    culturalFitPrediction?: FloatFieldUpdateOperationsInput | number
    integrationTimelineDays?: IntFieldUpdateOperationsInput | number
    waHarmonyScore?: FloatFieldUpdateOperationsInput | number
    kaizenImprovementScore?: FloatFieldUpdateOperationsInput | number
    omotenashiServiceScore?: FloatFieldUpdateOperationsInput | number
    bushidoDedicationScore?: FloatFieldUpdateOperationsInput | number
    nemawashiConsensusScore?: FloatFieldUpdateOperationsInput | number
    honneTatemaeBalance?: FloatFieldUpdateOperationsInput | number
    indirectCommunication?: FloatFieldUpdateOperationsInput | number
    nonverbalAwareness?: FloatFieldUpdateOperationsInput | number
    silenceComfort?: FloatFieldUpdateOperationsInput | number
    contextualUnderstanding?: FloatFieldUpdateOperationsInput | number
    senpaiKohaiRespect?: FloatFieldUpdateOperationsInput | number
    authorityRecognition?: FloatFieldUpdateOperationsInput | number
    formalityAdherence?: FloatFieldUpdateOperationsInput | number
    statusAwareness?: FloatFieldUpdateOperationsInput | number
    hierarchyNavigation?: FloatFieldUpdateOperationsInput | number
    groupHarmonyPriority?: FloatFieldUpdateOperationsInput | number
    collectiveDecisionMaking?: FloatFieldUpdateOperationsInput | number
    consensusBuilding?: FloatFieldUpdateOperationsInput | number
    teamLoyalty?: FloatFieldUpdateOperationsInput | number
    groupAccountability?: FloatFieldUpdateOperationsInput | number
    dedicationToWork?: FloatFieldUpdateOperationsInput | number
    qualityFocus?: FloatFieldUpdateOperationsInput | number
    continuousImprovement?: FloatFieldUpdateOperationsInput | number
    attentionToDetail?: FloatFieldUpdateOperationsInput | number
    processAdherence?: FloatFieldUpdateOperationsInput | number
    punctualityImportance?: FloatFieldUpdateOperationsInput | number
    timeRespect?: FloatFieldUpdateOperationsInput | number
    scheduleAdherence?: FloatFieldUpdateOperationsInput | number
    planningOrientation?: FloatFieldUpdateOperationsInput | number
    deadlineCommitment?: FloatFieldUpdateOperationsInput | number
    relationshipInvestment?: FloatFieldUpdateOperationsInput | number
    trustBuilding?: FloatFieldUpdateOperationsInput | number
    longTermOrientation?: FloatFieldUpdateOperationsInput | number
    loyaltyDemonstration?: FloatFieldUpdateOperationsInput | number
    networkMaintenance?: FloatFieldUpdateOperationsInput | number
    changeAcceptance?: FloatFieldUpdateOperationsInput | number
    flexibilityInApproach?: FloatFieldUpdateOperationsInput | number
    learningOrientation?: FloatFieldUpdateOperationsInput | number
    culturalAdaptability?: FloatFieldUpdateOperationsInput | number
    resilienceInChallenges?: FloatFieldUpdateOperationsInput | number
    professionalEtiquette?: FloatFieldUpdateOperationsInput | number
    businessCardProtocol?: FloatFieldUpdateOperationsInput | number
    meetingParticipation?: FloatFieldUpdateOperationsInput | number
    presentationSkills?: FloatFieldUpdateOperationsInput | number
    clientServiceOrientation?: FloatFieldUpdateOperationsInput | number
    creativeThinking?: FloatFieldUpdateOperationsInput | number
    innovationBalance?: FloatFieldUpdateOperationsInput | number
    riskAssessment?: FloatFieldUpdateOperationsInput | number
    dimensionScores?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrainingNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsychologicalAssessmentCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    openness?: number | null
    conscientiousness?: number | null
    extraversion?: number | null
    agreeableness?: number | null
    neuroticism?: number | null
    logicalReasoning?: number | null
    numericalAbility?: number | null
    verbalAbility?: number | null
    spatialAbility?: number | null
    memoryCapacity?: number | null
    selfAwareness?: number | null
    selfRegulation?: number | null
    motivation?: number | null
    empathy?: number | null
    socialSkills?: number | null
    stressResilience?: number | null
    teamworkAbility?: number | null
    leadershipPotential?: number | null
    adaptability?: number | null
    problemSolving?: number | null
    overallScore: number
    recommendations?: string | null
    assessmentNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutPsychologicalAssessmentsInput
  }

  export type PsychologicalAssessmentUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    assessmentType: string
    assessmentDate?: Date | string
    openness?: number | null
    conscientiousness?: number | null
    extraversion?: number | null
    agreeableness?: number | null
    neuroticism?: number | null
    logicalReasoning?: number | null
    numericalAbility?: number | null
    verbalAbility?: number | null
    spatialAbility?: number | null
    memoryCapacity?: number | null
    selfAwareness?: number | null
    selfRegulation?: number | null
    motivation?: number | null
    empathy?: number | null
    socialSkills?: number | null
    stressResilience?: number | null
    teamworkAbility?: number | null
    leadershipPotential?: number | null
    adaptability?: number | null
    problemSolving?: number | null
    overallScore: number
    recommendations?: string | null
    assessmentNotes?: string | null
  }

  export type PsychologicalAssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    openness?: NullableFloatFieldUpdateOperationsInput | number | null
    conscientiousness?: NullableFloatFieldUpdateOperationsInput | number | null
    extraversion?: NullableFloatFieldUpdateOperationsInput | number | null
    agreeableness?: NullableFloatFieldUpdateOperationsInput | number | null
    neuroticism?: NullableFloatFieldUpdateOperationsInput | number | null
    logicalReasoning?: NullableFloatFieldUpdateOperationsInput | number | null
    numericalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    verbalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    spatialAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    selfAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    selfRegulation?: NullableFloatFieldUpdateOperationsInput | number | null
    motivation?: NullableFloatFieldUpdateOperationsInput | number | null
    empathy?: NullableFloatFieldUpdateOperationsInput | number | null
    socialSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    stressResilience?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    leadershipPotential?: NullableFloatFieldUpdateOperationsInput | number | null
    adaptability?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolving?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutPsychologicalAssessmentsNestedInput
  }

  export type PsychologicalAssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    openness?: NullableFloatFieldUpdateOperationsInput | number | null
    conscientiousness?: NullableFloatFieldUpdateOperationsInput | number | null
    extraversion?: NullableFloatFieldUpdateOperationsInput | number | null
    agreeableness?: NullableFloatFieldUpdateOperationsInput | number | null
    neuroticism?: NullableFloatFieldUpdateOperationsInput | number | null
    logicalReasoning?: NullableFloatFieldUpdateOperationsInput | number | null
    numericalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    verbalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    spatialAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    selfAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    selfRegulation?: NullableFloatFieldUpdateOperationsInput | number | null
    motivation?: NullableFloatFieldUpdateOperationsInput | number | null
    empathy?: NullableFloatFieldUpdateOperationsInput | number | null
    socialSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    stressResilience?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    leadershipPotential?: NullableFloatFieldUpdateOperationsInput | number | null
    adaptability?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolving?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsychologicalAssessmentCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    assessmentType: string
    assessmentDate?: Date | string
    openness?: number | null
    conscientiousness?: number | null
    extraversion?: number | null
    agreeableness?: number | null
    neuroticism?: number | null
    logicalReasoning?: number | null
    numericalAbility?: number | null
    verbalAbility?: number | null
    spatialAbility?: number | null
    memoryCapacity?: number | null
    selfAwareness?: number | null
    selfRegulation?: number | null
    motivation?: number | null
    empathy?: number | null
    socialSkills?: number | null
    stressResilience?: number | null
    teamworkAbility?: number | null
    leadershipPotential?: number | null
    adaptability?: number | null
    problemSolving?: number | null
    overallScore: number
    recommendations?: string | null
    assessmentNotes?: string | null
  }

  export type PsychologicalAssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    openness?: NullableFloatFieldUpdateOperationsInput | number | null
    conscientiousness?: NullableFloatFieldUpdateOperationsInput | number | null
    extraversion?: NullableFloatFieldUpdateOperationsInput | number | null
    agreeableness?: NullableFloatFieldUpdateOperationsInput | number | null
    neuroticism?: NullableFloatFieldUpdateOperationsInput | number | null
    logicalReasoning?: NullableFloatFieldUpdateOperationsInput | number | null
    numericalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    verbalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    spatialAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    selfAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    selfRegulation?: NullableFloatFieldUpdateOperationsInput | number | null
    motivation?: NullableFloatFieldUpdateOperationsInput | number | null
    empathy?: NullableFloatFieldUpdateOperationsInput | number | null
    socialSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    stressResilience?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    leadershipPotential?: NullableFloatFieldUpdateOperationsInput | number | null
    adaptability?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolving?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsychologicalAssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    openness?: NullableFloatFieldUpdateOperationsInput | number | null
    conscientiousness?: NullableFloatFieldUpdateOperationsInput | number | null
    extraversion?: NullableFloatFieldUpdateOperationsInput | number | null
    agreeableness?: NullableFloatFieldUpdateOperationsInput | number | null
    neuroticism?: NullableFloatFieldUpdateOperationsInput | number | null
    logicalReasoning?: NullableFloatFieldUpdateOperationsInput | number | null
    numericalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    verbalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    spatialAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    selfAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    selfRegulation?: NullableFloatFieldUpdateOperationsInput | number | null
    motivation?: NullableFloatFieldUpdateOperationsInput | number | null
    empathy?: NullableFloatFieldUpdateOperationsInput | number | null
    socialSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    stressResilience?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    leadershipPotential?: NullableFloatFieldUpdateOperationsInput | number | null
    adaptability?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolving?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageAssessmentCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language: string
    assessmentDate?: Date | string
    assessmentType: string
    speakingLevel: string
    listeningLevel: string
    readingLevel: string
    writingLevel: string
    overallScore: number
    speakingScore?: number | null
    listeningScore?: number | null
    readingScore?: number | null
    writingScore?: number | null
    businessCommunication?: number | null
    technicalVocabulary?: number | null
    presentationSkills?: number | null
    negotiationSkills?: number | null
    certificationLevel?: string | null
    certificationDate?: Date | string | null
    assessmentNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutLanguageAssessmentsInput
  }

  export type LanguageAssessmentUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    language: string
    assessmentDate?: Date | string
    assessmentType: string
    speakingLevel: string
    listeningLevel: string
    readingLevel: string
    writingLevel: string
    overallScore: number
    speakingScore?: number | null
    listeningScore?: number | null
    readingScore?: number | null
    writingScore?: number | null
    businessCommunication?: number | null
    technicalVocabulary?: number | null
    presentationSkills?: number | null
    negotiationSkills?: number | null
    certificationLevel?: string | null
    certificationDate?: Date | string | null
    assessmentNotes?: string | null
  }

  export type LanguageAssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    speakingLevel?: StringFieldUpdateOperationsInput | string
    listeningLevel?: StringFieldUpdateOperationsInput | string
    readingLevel?: StringFieldUpdateOperationsInput | string
    writingLevel?: StringFieldUpdateOperationsInput | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    speakingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    listeningScore?: NullableFloatFieldUpdateOperationsInput | number | null
    readingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    writingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    businessCommunication?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalVocabulary?: NullableFloatFieldUpdateOperationsInput | number | null
    presentationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    negotiationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    certificationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutLanguageAssessmentsNestedInput
  }

  export type LanguageAssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    speakingLevel?: StringFieldUpdateOperationsInput | string
    listeningLevel?: StringFieldUpdateOperationsInput | string
    readingLevel?: StringFieldUpdateOperationsInput | string
    writingLevel?: StringFieldUpdateOperationsInput | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    speakingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    listeningScore?: NullableFloatFieldUpdateOperationsInput | number | null
    readingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    writingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    businessCommunication?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalVocabulary?: NullableFloatFieldUpdateOperationsInput | number | null
    presentationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    negotiationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    certificationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageAssessmentCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    language: string
    assessmentDate?: Date | string
    assessmentType: string
    speakingLevel: string
    listeningLevel: string
    readingLevel: string
    writingLevel: string
    overallScore: number
    speakingScore?: number | null
    listeningScore?: number | null
    readingScore?: number | null
    writingScore?: number | null
    businessCommunication?: number | null
    technicalVocabulary?: number | null
    presentationSkills?: number | null
    negotiationSkills?: number | null
    certificationLevel?: string | null
    certificationDate?: Date | string | null
    assessmentNotes?: string | null
  }

  export type LanguageAssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    speakingLevel?: StringFieldUpdateOperationsInput | string
    listeningLevel?: StringFieldUpdateOperationsInput | string
    readingLevel?: StringFieldUpdateOperationsInput | string
    writingLevel?: StringFieldUpdateOperationsInput | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    speakingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    listeningScore?: NullableFloatFieldUpdateOperationsInput | number | null
    readingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    writingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    businessCommunication?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalVocabulary?: NullableFloatFieldUpdateOperationsInput | number | null
    presentationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    negotiationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    certificationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageAssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    speakingLevel?: StringFieldUpdateOperationsInput | string
    listeningLevel?: StringFieldUpdateOperationsInput | string
    readingLevel?: StringFieldUpdateOperationsInput | string
    writingLevel?: StringFieldUpdateOperationsInput | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    speakingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    listeningScore?: NullableFloatFieldUpdateOperationsInput | number | null
    readingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    writingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    businessCommunication?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalVocabulary?: NullableFloatFieldUpdateOperationsInput | number | null
    presentationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    negotiationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    certificationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessionalAssessmentCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    technicalProficiency?: number | null
    toolsAndTechnologies?: string | null
    industryKnowledge?: number | null
    problemSolvingAbility?: number | null
    innovationCapability?: number | null
    projectManagement?: number | null
    teamLeadership?: number | null
    clientManagement?: number | null
    strategicThinking?: number | null
    analyticalSkills?: number | null
    domainExpertise?: number | null
    regulatoryKnowledge?: number | null
    marketUnderstanding?: number | null
    competitorAwareness?: number | null
    overallScore: number
    skillGaps?: string | null
    developmentPlan?: string | null
    assessmentNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutProfessionalAssessmentsInput
  }

  export type ProfessionalAssessmentUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    assessmentType: string
    assessmentDate?: Date | string
    technicalProficiency?: number | null
    toolsAndTechnologies?: string | null
    industryKnowledge?: number | null
    problemSolvingAbility?: number | null
    innovationCapability?: number | null
    projectManagement?: number | null
    teamLeadership?: number | null
    clientManagement?: number | null
    strategicThinking?: number | null
    analyticalSkills?: number | null
    domainExpertise?: number | null
    regulatoryKnowledge?: number | null
    marketUnderstanding?: number | null
    competitorAwareness?: number | null
    overallScore: number
    skillGaps?: string | null
    developmentPlan?: string | null
    assessmentNotes?: string | null
  }

  export type ProfessionalAssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    technicalProficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    toolsAndTechnologies?: NullableStringFieldUpdateOperationsInput | string | null
    industryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolvingAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    innovationCapability?: NullableFloatFieldUpdateOperationsInput | number | null
    projectManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    teamLeadership?: NullableFloatFieldUpdateOperationsInput | number | null
    clientManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    strategicThinking?: NullableFloatFieldUpdateOperationsInput | number | null
    analyticalSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    domainExpertise?: NullableFloatFieldUpdateOperationsInput | number | null
    regulatoryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    marketUnderstanding?: NullableFloatFieldUpdateOperationsInput | number | null
    competitorAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    skillGaps?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutProfessionalAssessmentsNestedInput
  }

  export type ProfessionalAssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    technicalProficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    toolsAndTechnologies?: NullableStringFieldUpdateOperationsInput | string | null
    industryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolvingAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    innovationCapability?: NullableFloatFieldUpdateOperationsInput | number | null
    projectManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    teamLeadership?: NullableFloatFieldUpdateOperationsInput | number | null
    clientManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    strategicThinking?: NullableFloatFieldUpdateOperationsInput | number | null
    analyticalSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    domainExpertise?: NullableFloatFieldUpdateOperationsInput | number | null
    regulatoryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    marketUnderstanding?: NullableFloatFieldUpdateOperationsInput | number | null
    competitorAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    skillGaps?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessionalAssessmentCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    assessmentType: string
    assessmentDate?: Date | string
    technicalProficiency?: number | null
    toolsAndTechnologies?: string | null
    industryKnowledge?: number | null
    problemSolvingAbility?: number | null
    innovationCapability?: number | null
    projectManagement?: number | null
    teamLeadership?: number | null
    clientManagement?: number | null
    strategicThinking?: number | null
    analyticalSkills?: number | null
    domainExpertise?: number | null
    regulatoryKnowledge?: number | null
    marketUnderstanding?: number | null
    competitorAwareness?: number | null
    overallScore: number
    skillGaps?: string | null
    developmentPlan?: string | null
    assessmentNotes?: string | null
  }

  export type ProfessionalAssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    technicalProficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    toolsAndTechnologies?: NullableStringFieldUpdateOperationsInput | string | null
    industryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolvingAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    innovationCapability?: NullableFloatFieldUpdateOperationsInput | number | null
    projectManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    teamLeadership?: NullableFloatFieldUpdateOperationsInput | number | null
    clientManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    strategicThinking?: NullableFloatFieldUpdateOperationsInput | number | null
    analyticalSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    domainExpertise?: NullableFloatFieldUpdateOperationsInput | number | null
    regulatoryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    marketUnderstanding?: NullableFloatFieldUpdateOperationsInput | number | null
    competitorAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    skillGaps?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessionalAssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    technicalProficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    toolsAndTechnologies?: NullableStringFieldUpdateOperationsInput | string | null
    industryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolvingAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    innovationCapability?: NullableFloatFieldUpdateOperationsInput | number | null
    projectManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    teamLeadership?: NullableFloatFieldUpdateOperationsInput | number | null
    clientManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    strategicThinking?: NullableFloatFieldUpdateOperationsInput | number | null
    analyticalSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    domainExpertise?: NullableFloatFieldUpdateOperationsInput | number | null
    regulatoryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    marketUnderstanding?: NullableFloatFieldUpdateOperationsInput | number | null
    competitorAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    skillGaps?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewSessionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
    candidate: CandidateCreateNestedOneWithoutInterviewSessionsInput
    application?: ApplicationCreateNestedOneWithoutInterviewSessionsInput
  }

  export type InterviewSessionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    applicationId?: string | null
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
  }

  export type InterviewSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutInterviewSessionsNestedInput
    application?: ApplicationUpdateOneWithoutInterviewSessionsNestedInput
  }

  export type InterviewSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewSessionCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    applicationId?: string | null
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
  }

  export type InterviewSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OnboardingRecordCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutOnboardingRecordsInput
    company: CompanyCreateNestedOneWithoutOnboardingRecordsInput
  }

  export type OnboardingRecordUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
  }

  export type OnboardingRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutOnboardingRecordsNestedInput
    company?: CompanyUpdateOneRequiredWithoutOnboardingRecordsNestedInput
  }

  export type OnboardingRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OnboardingRecordCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
  }

  export type OnboardingRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OnboardingRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerformanceReviewCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutPerformanceReviewsInput
    company: CompanyCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
  }

  export type PerformanceReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    company?: CompanyUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerformanceReviewCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
  }

  export type PerformanceReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerformanceReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateStatusHistoryCreateInput = {
    id?: string
    createdAt?: Date | string
    previousStatus: $Enums.CandidateStatus
    newStatus: $Enums.CandidateStatus
    changeReason?: string | null
    changedBy?: string | null
    notes?: string | null
    candidate: CandidateCreateNestedOneWithoutStatusHistoryInput
  }

  export type CandidateStatusHistoryUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    candidateId: string
    previousStatus: $Enums.CandidateStatus
    newStatus: $Enums.CandidateStatus
    changeReason?: string | null
    changedBy?: string | null
    notes?: string | null
  }

  export type CandidateStatusHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutStatusHistoryNestedInput
  }

  export type CandidateStatusHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateStatusHistoryCreateManyInput = {
    id?: string
    createdAt?: Date | string
    candidateId: string
    previousStatus: $Enums.CandidateStatus
    newStatus: $Enums.CandidateStatus
    changeReason?: string | null
    changedBy?: string | null
    notes?: string | null
  }

  export type CandidateStatusHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateStatusHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    company: CompanyCreateNestedOneWithoutApplicationsInput
    jobPosting: JobPostingCreateNestedOneWithoutApplicationsInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    jobPostingId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    company?: CompanyUpdateOneRequiredWithoutApplicationsNestedInput
    jobPosting?: JobPostingUpdateOneRequiredWithoutApplicationsNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    jobPostingId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    jobPostingId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
  }

  export type ApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    jobPostingId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarketIntelligenceCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dataType: string
    industry: string
    location: string
    timeframe: string
    averageSalary?: number | null
    salaryRange?: string | null
    demandLevel: string
    supplyLevel: string
    inDemandSkills?: string | null
    emergingSkills?: string | null
    decliningSkills?: string | null
    culturalTrends?: string | null
    adaptationChallenges?: string | null
    successFactors?: string | null
    dataSource?: string | null
    reliability?: number | null
    marketNotes?: string | null
  }

  export type MarketIntelligenceUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dataType: string
    industry: string
    location: string
    timeframe: string
    averageSalary?: number | null
    salaryRange?: string | null
    demandLevel: string
    supplyLevel: string
    inDemandSkills?: string | null
    emergingSkills?: string | null
    decliningSkills?: string | null
    culturalTrends?: string | null
    adaptationChallenges?: string | null
    successFactors?: string | null
    dataSource?: string | null
    reliability?: number | null
    marketNotes?: string | null
  }

  export type MarketIntelligenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataType?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timeframe?: StringFieldUpdateOperationsInput | string
    averageSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    demandLevel?: StringFieldUpdateOperationsInput | string
    supplyLevel?: StringFieldUpdateOperationsInput | string
    inDemandSkills?: NullableStringFieldUpdateOperationsInput | string | null
    emergingSkills?: NullableStringFieldUpdateOperationsInput | string | null
    decliningSkills?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrends?: NullableStringFieldUpdateOperationsInput | string | null
    adaptationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    successFactors?: NullableStringFieldUpdateOperationsInput | string | null
    dataSource?: NullableStringFieldUpdateOperationsInput | string | null
    reliability?: NullableFloatFieldUpdateOperationsInput | number | null
    marketNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarketIntelligenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataType?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timeframe?: StringFieldUpdateOperationsInput | string
    averageSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    demandLevel?: StringFieldUpdateOperationsInput | string
    supplyLevel?: StringFieldUpdateOperationsInput | string
    inDemandSkills?: NullableStringFieldUpdateOperationsInput | string | null
    emergingSkills?: NullableStringFieldUpdateOperationsInput | string | null
    decliningSkills?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrends?: NullableStringFieldUpdateOperationsInput | string | null
    adaptationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    successFactors?: NullableStringFieldUpdateOperationsInput | string | null
    dataSource?: NullableStringFieldUpdateOperationsInput | string | null
    reliability?: NullableFloatFieldUpdateOperationsInput | number | null
    marketNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarketIntelligenceCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dataType: string
    industry: string
    location: string
    timeframe: string
    averageSalary?: number | null
    salaryRange?: string | null
    demandLevel: string
    supplyLevel: string
    inDemandSkills?: string | null
    emergingSkills?: string | null
    decliningSkills?: string | null
    culturalTrends?: string | null
    adaptationChallenges?: string | null
    successFactors?: string | null
    dataSource?: string | null
    reliability?: number | null
    marketNotes?: string | null
  }

  export type MarketIntelligenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataType?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timeframe?: StringFieldUpdateOperationsInput | string
    averageSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    demandLevel?: StringFieldUpdateOperationsInput | string
    supplyLevel?: StringFieldUpdateOperationsInput | string
    inDemandSkills?: NullableStringFieldUpdateOperationsInput | string | null
    emergingSkills?: NullableStringFieldUpdateOperationsInput | string | null
    decliningSkills?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrends?: NullableStringFieldUpdateOperationsInput | string | null
    adaptationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    successFactors?: NullableStringFieldUpdateOperationsInput | string | null
    dataSource?: NullableStringFieldUpdateOperationsInput | string | null
    reliability?: NullableFloatFieldUpdateOperationsInput | number | null
    marketNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarketIntelligenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataType?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timeframe?: StringFieldUpdateOperationsInput | string
    averageSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryRange?: NullableStringFieldUpdateOperationsInput | string | null
    demandLevel?: StringFieldUpdateOperationsInput | string
    supplyLevel?: StringFieldUpdateOperationsInput | string
    inDemandSkills?: NullableStringFieldUpdateOperationsInput | string | null
    emergingSkills?: NullableStringFieldUpdateOperationsInput | string | null
    decliningSkills?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrends?: NullableStringFieldUpdateOperationsInput | string | null
    adaptationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    successFactors?: NullableStringFieldUpdateOperationsInput | string | null
    dataSource?: NullableStringFieldUpdateOperationsInput | string | null
    reliability?: NullableFloatFieldUpdateOperationsInput | number | null
    marketNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemMetricsCreateInput = {
    id?: string
    createdAt?: Date | string
    metricType: string
    metricName: string
    metricValue: number
    metricUnit?: string | null
    timeframe?: string | null
    category?: string | null
    subcategory?: string | null
    calculationMethod?: string | null
    dataPoints?: number | null
    confidence?: number | null
    metricNotes?: string | null
  }

  export type SystemMetricsUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    metricType: string
    metricName: string
    metricValue: number
    metricUnit?: string | null
    timeframe?: string | null
    category?: string | null
    subcategory?: string | null
    calculationMethod?: string | null
    dataPoints?: number | null
    confidence?: number | null
    metricNotes?: string | null
  }

  export type SystemMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    timeframe?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metricNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    timeframe?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metricNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemMetricsCreateManyInput = {
    id?: string
    createdAt?: Date | string
    metricType: string
    metricName: string
    metricValue: number
    metricUnit?: string | null
    timeframe?: string | null
    category?: string | null
    subcategory?: string | null
    calculationMethod?: string | null
    dataPoints?: number | null
    confidence?: number | null
    metricNotes?: string | null
  }

  export type SystemMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    timeframe?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metricNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    timeframe?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metricNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportGenerationCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportType: string
    reportTitle: string
    reportFormat: string
    candidateId?: string | null
    companyId?: string | null
    dateRange?: string | null
    filters?: string | null
    generationStatus: string
    generatedAt?: Date | string | null
    reportUrl?: string | null
    reportSize?: number | null
    keyFindings?: string | null
    recommendations?: string | null
    dataPoints?: number | null
    requestedBy?: string | null
    reportNotes?: string | null
  }

  export type ReportGenerationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportType: string
    reportTitle: string
    reportFormat: string
    candidateId?: string | null
    companyId?: string | null
    dateRange?: string | null
    filters?: string | null
    generationStatus: string
    generatedAt?: Date | string | null
    reportUrl?: string | null
    reportSize?: number | null
    keyFindings?: string | null
    recommendations?: string | null
    dataPoints?: number | null
    requestedBy?: string | null
    reportNotes?: string | null
  }

  export type ReportGenerationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportType?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportFormat?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    dateRange?: NullableStringFieldUpdateOperationsInput | string | null
    filters?: NullableStringFieldUpdateOperationsInput | string | null
    generationStatus?: StringFieldUpdateOperationsInput | string
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportSize?: NullableIntFieldUpdateOperationsInput | number | null
    keyFindings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    requestedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reportNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportGenerationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportType?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportFormat?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    dateRange?: NullableStringFieldUpdateOperationsInput | string | null
    filters?: NullableStringFieldUpdateOperationsInput | string | null
    generationStatus?: StringFieldUpdateOperationsInput | string
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportSize?: NullableIntFieldUpdateOperationsInput | number | null
    keyFindings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    requestedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reportNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportGenerationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportType: string
    reportTitle: string
    reportFormat: string
    candidateId?: string | null
    companyId?: string | null
    dateRange?: string | null
    filters?: string | null
    generationStatus: string
    generatedAt?: Date | string | null
    reportUrl?: string | null
    reportSize?: number | null
    keyFindings?: string | null
    recommendations?: string | null
    dataPoints?: number | null
    requestedBy?: string | null
    reportNotes?: string | null
  }

  export type ReportGenerationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportType?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportFormat?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    dateRange?: NullableStringFieldUpdateOperationsInput | string | null
    filters?: NullableStringFieldUpdateOperationsInput | string | null
    generationStatus?: StringFieldUpdateOperationsInput | string
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportSize?: NullableIntFieldUpdateOperationsInput | number | null
    keyFindings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    requestedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reportNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportGenerationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportType?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportFormat?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    dateRange?: NullableStringFieldUpdateOperationsInput | string | null
    filters?: NullableStringFieldUpdateOperationsInput | string | null
    generationStatus?: StringFieldUpdateOperationsInput | string
    generatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportSize?: NullableIntFieldUpdateOperationsInput | number | null
    keyFindings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    dataPoints?: NullableIntFieldUpdateOperationsInput | number | null
    requestedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reportNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumCandidateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusFilter<$PrismaModel> | $Enums.CandidateStatus
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type CulturalAssessmentListRelationFilter = {
    every?: CulturalAssessmentWhereInput
    some?: CulturalAssessmentWhereInput
    none?: CulturalAssessmentWhereInput
  }

  export type PsychologicalAssessmentListRelationFilter = {
    every?: PsychologicalAssessmentWhereInput
    some?: PsychologicalAssessmentWhereInput
    none?: PsychologicalAssessmentWhereInput
  }

  export type LanguageAssessmentListRelationFilter = {
    every?: LanguageAssessmentWhereInput
    some?: LanguageAssessmentWhereInput
    none?: LanguageAssessmentWhereInput
  }

  export type ProfessionalAssessmentListRelationFilter = {
    every?: ProfessionalAssessmentWhereInput
    some?: ProfessionalAssessmentWhereInput
    none?: ProfessionalAssessmentWhereInput
  }

  export type InterviewSessionListRelationFilter = {
    every?: InterviewSessionWhereInput
    some?: InterviewSessionWhereInput
    none?: InterviewSessionWhereInput
  }

  export type OnboardingRecordListRelationFilter = {
    every?: OnboardingRecordWhereInput
    some?: OnboardingRecordWhereInput
    none?: OnboardingRecordWhereInput
  }

  export type PerformanceReviewListRelationFilter = {
    every?: PerformanceReviewWhereInput
    some?: PerformanceReviewWhereInput
    none?: PerformanceReviewWhereInput
  }

  export type CandidateStatusHistoryListRelationFilter = {
    every?: CandidateStatusHistoryWhereInput
    some?: CandidateStatusHistoryWhereInput
    none?: CandidateStatusHistoryWhereInput
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CulturalAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PsychologicalAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguageAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessionalAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InterviewSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OnboardingRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformanceReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateStatusHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    cellPhone?: SortOrder
    nationality?: SortOrder
    currentLocation?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    maritalStatus?: SortOrder
    currentPosition?: SortOrder
    experience?: SortOrder
    education?: SortOrder
    technicalSkills?: SortOrder
    languageProficiency?: SortOrder
    certifications?: SortOrder
    culturalBackground?: SortOrder
    workStylePreference?: SortOrder
    communicationStyle?: SortOrder
    adaptabilityScore?: SortOrder
    teamworkOrientation?: SortOrder
    leadershipStyle?: SortOrder
    conflictResolution?: SortOrder
    timeManagement?: SortOrder
    waHarmonyAlignment?: SortOrder
    kaizenMindset?: SortOrder
    omotenashiService?: SortOrder
    bushidoDedication?: SortOrder
    nemawashiConsensus?: SortOrder
    candidateStatus?: SortOrder
    availabilityDate?: SortOrder
    salaryExpectation?: SortOrder
    preferredLocation?: SortOrder
    visaStatus?: SortOrder
  }

  export type CandidateAvgOrderByAggregateInput = {
    experience?: SortOrder
    adaptabilityScore?: SortOrder
    waHarmonyAlignment?: SortOrder
    kaizenMindset?: SortOrder
    omotenashiService?: SortOrder
    bushidoDedication?: SortOrder
    nemawashiConsensus?: SortOrder
    salaryExpectation?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    cellPhone?: SortOrder
    nationality?: SortOrder
    currentLocation?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    maritalStatus?: SortOrder
    currentPosition?: SortOrder
    experience?: SortOrder
    education?: SortOrder
    technicalSkills?: SortOrder
    languageProficiency?: SortOrder
    certifications?: SortOrder
    culturalBackground?: SortOrder
    workStylePreference?: SortOrder
    communicationStyle?: SortOrder
    adaptabilityScore?: SortOrder
    teamworkOrientation?: SortOrder
    leadershipStyle?: SortOrder
    conflictResolution?: SortOrder
    timeManagement?: SortOrder
    waHarmonyAlignment?: SortOrder
    kaizenMindset?: SortOrder
    omotenashiService?: SortOrder
    bushidoDedication?: SortOrder
    nemawashiConsensus?: SortOrder
    candidateStatus?: SortOrder
    availabilityDate?: SortOrder
    salaryExpectation?: SortOrder
    preferredLocation?: SortOrder
    visaStatus?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    cellPhone?: SortOrder
    nationality?: SortOrder
    currentLocation?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    maritalStatus?: SortOrder
    currentPosition?: SortOrder
    experience?: SortOrder
    education?: SortOrder
    technicalSkills?: SortOrder
    languageProficiency?: SortOrder
    certifications?: SortOrder
    culturalBackground?: SortOrder
    workStylePreference?: SortOrder
    communicationStyle?: SortOrder
    adaptabilityScore?: SortOrder
    teamworkOrientation?: SortOrder
    leadershipStyle?: SortOrder
    conflictResolution?: SortOrder
    timeManagement?: SortOrder
    waHarmonyAlignment?: SortOrder
    kaizenMindset?: SortOrder
    omotenashiService?: SortOrder
    bushidoDedication?: SortOrder
    nemawashiConsensus?: SortOrder
    candidateStatus?: SortOrder
    availabilityDate?: SortOrder
    salaryExpectation?: SortOrder
    preferredLocation?: SortOrder
    visaStatus?: SortOrder
  }

  export type CandidateSumOrderByAggregateInput = {
    experience?: SortOrder
    adaptabilityScore?: SortOrder
    waHarmonyAlignment?: SortOrder
    kaizenMindset?: SortOrder
    omotenashiService?: SortOrder
    bushidoDedication?: SortOrder
    nemawashiConsensus?: SortOrder
    salaryExpectation?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumCandidateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel> | $Enums.CandidateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCandidateStatusFilter<$PrismaModel>
    _max?: NestedEnumCandidateStatusFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type JobPostingListRelationFilter = {
    every?: JobPostingWhereInput
    some?: JobPostingWhereInput
    none?: JobPostingWhereInput
  }

  export type JobPostingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    headquarters?: SortOrder
    website?: SortOrder
    description?: SortOrder
    corporateCulture?: SortOrder
    workEnvironment?: SortOrder
    managementStyle?: SortOrder
    communicationStyle?: SortOrder
    diversityPolicy?: SortOrder
    waHarmonyImportance?: SortOrder
    kaizenImplementation?: SortOrder
    omotenashiStandards?: SortOrder
    hierarchyStructure?: SortOrder
    consensusDecisionMaking?: SortOrder
    revenue?: SortOrder
    foundedYear?: SortOrder
    employeeCount?: SortOrder
    businessModel?: SortOrder
    competitiveAdvantage?: SortOrder
    preferredCandidateProfile?: SortOrder
    culturalRequirements?: SortOrder
    languageRequirements?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    waHarmonyImportance?: SortOrder
    kaizenImplementation?: SortOrder
    omotenashiStandards?: SortOrder
    consensusDecisionMaking?: SortOrder
    revenue?: SortOrder
    foundedYear?: SortOrder
    employeeCount?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    headquarters?: SortOrder
    website?: SortOrder
    description?: SortOrder
    corporateCulture?: SortOrder
    workEnvironment?: SortOrder
    managementStyle?: SortOrder
    communicationStyle?: SortOrder
    diversityPolicy?: SortOrder
    waHarmonyImportance?: SortOrder
    kaizenImplementation?: SortOrder
    omotenashiStandards?: SortOrder
    hierarchyStructure?: SortOrder
    consensusDecisionMaking?: SortOrder
    revenue?: SortOrder
    foundedYear?: SortOrder
    employeeCount?: SortOrder
    businessModel?: SortOrder
    competitiveAdvantage?: SortOrder
    preferredCandidateProfile?: SortOrder
    culturalRequirements?: SortOrder
    languageRequirements?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    headquarters?: SortOrder
    website?: SortOrder
    description?: SortOrder
    corporateCulture?: SortOrder
    workEnvironment?: SortOrder
    managementStyle?: SortOrder
    communicationStyle?: SortOrder
    diversityPolicy?: SortOrder
    waHarmonyImportance?: SortOrder
    kaizenImplementation?: SortOrder
    omotenashiStandards?: SortOrder
    hierarchyStructure?: SortOrder
    consensusDecisionMaking?: SortOrder
    revenue?: SortOrder
    foundedYear?: SortOrder
    employeeCount?: SortOrder
    businessModel?: SortOrder
    competitiveAdvantage?: SortOrder
    preferredCandidateProfile?: SortOrder
    culturalRequirements?: SortOrder
    languageRequirements?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    waHarmonyImportance?: SortOrder
    kaizenImplementation?: SortOrder
    omotenashiStandards?: SortOrder
    consensusDecisionMaking?: SortOrder
    revenue?: SortOrder
    foundedYear?: SortOrder
    employeeCount?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type EnumPostingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostingStatus | EnumPostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostingStatusFilter<$PrismaModel> | $Enums.PostingStatus
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type JobPostingCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobTitle?: SortOrder
    department?: SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    jobDescription?: SortOrder
    responsibilities?: SortOrder
    requirements?: SortOrder
    qualifications?: SortOrder
    technicalSkills?: SortOrder
    salaryRangeMinimum?: SortOrder
    salaryRangeMaximum?: SortOrder
    benefits?: SortOrder
    bonusStructure?: SortOrder
    culturalFitRequirements?: SortOrder
    languageRequirements?: SortOrder
    communicationStyle?: SortOrder
    teamworkExpectation?: SortOrder
    leadershipExpectation?: SortOrder
    waHarmonyRequired?: SortOrder
    kaizenParticipation?: SortOrder
    omotenashiExpectation?: SortOrder
    hierarchyRespect?: SortOrder
    consensusBuilding?: SortOrder
    postingStatus?: SortOrder
    applicationDeadline?: SortOrder
    startDate?: SortOrder
    urgencyLevel?: SortOrder
    companyId?: SortOrder
  }

  export type JobPostingAvgOrderByAggregateInput = {
    salaryRangeMinimum?: SortOrder
    salaryRangeMaximum?: SortOrder
    waHarmonyRequired?: SortOrder
    kaizenParticipation?: SortOrder
    omotenashiExpectation?: SortOrder
    hierarchyRespect?: SortOrder
    consensusBuilding?: SortOrder
  }

  export type JobPostingMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobTitle?: SortOrder
    department?: SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    jobDescription?: SortOrder
    responsibilities?: SortOrder
    requirements?: SortOrder
    qualifications?: SortOrder
    technicalSkills?: SortOrder
    salaryRangeMinimum?: SortOrder
    salaryRangeMaximum?: SortOrder
    benefits?: SortOrder
    bonusStructure?: SortOrder
    culturalFitRequirements?: SortOrder
    languageRequirements?: SortOrder
    communicationStyle?: SortOrder
    teamworkExpectation?: SortOrder
    leadershipExpectation?: SortOrder
    waHarmonyRequired?: SortOrder
    kaizenParticipation?: SortOrder
    omotenashiExpectation?: SortOrder
    hierarchyRespect?: SortOrder
    consensusBuilding?: SortOrder
    postingStatus?: SortOrder
    applicationDeadline?: SortOrder
    startDate?: SortOrder
    urgencyLevel?: SortOrder
    companyId?: SortOrder
  }

  export type JobPostingMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobTitle?: SortOrder
    department?: SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    jobDescription?: SortOrder
    responsibilities?: SortOrder
    requirements?: SortOrder
    qualifications?: SortOrder
    technicalSkills?: SortOrder
    salaryRangeMinimum?: SortOrder
    salaryRangeMaximum?: SortOrder
    benefits?: SortOrder
    bonusStructure?: SortOrder
    culturalFitRequirements?: SortOrder
    languageRequirements?: SortOrder
    communicationStyle?: SortOrder
    teamworkExpectation?: SortOrder
    leadershipExpectation?: SortOrder
    waHarmonyRequired?: SortOrder
    kaizenParticipation?: SortOrder
    omotenashiExpectation?: SortOrder
    hierarchyRespect?: SortOrder
    consensusBuilding?: SortOrder
    postingStatus?: SortOrder
    applicationDeadline?: SortOrder
    startDate?: SortOrder
    urgencyLevel?: SortOrder
    companyId?: SortOrder
  }

  export type JobPostingSumOrderByAggregateInput = {
    salaryRangeMinimum?: SortOrder
    salaryRangeMaximum?: SortOrder
    waHarmonyRequired?: SortOrder
    kaizenParticipation?: SortOrder
    omotenashiExpectation?: SortOrder
    hierarchyRespect?: SortOrder
    consensusBuilding?: SortOrder
  }

  export type EnumPostingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostingStatus | EnumPostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostingStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostingStatusFilter<$PrismaModel>
    _max?: NestedEnumPostingStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CandidateScalarRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type CulturalAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    overallScore?: SortOrder
    culturalFitPrediction?: SortOrder
    integrationTimelineDays?: SortOrder
    waHarmonyScore?: SortOrder
    kaizenImprovementScore?: SortOrder
    omotenashiServiceScore?: SortOrder
    bushidoDedicationScore?: SortOrder
    nemawashiConsensusScore?: SortOrder
    honneTatemaeBalance?: SortOrder
    indirectCommunication?: SortOrder
    nonverbalAwareness?: SortOrder
    silenceComfort?: SortOrder
    contextualUnderstanding?: SortOrder
    senpaiKohaiRespect?: SortOrder
    authorityRecognition?: SortOrder
    formalityAdherence?: SortOrder
    statusAwareness?: SortOrder
    hierarchyNavigation?: SortOrder
    groupHarmonyPriority?: SortOrder
    collectiveDecisionMaking?: SortOrder
    consensusBuilding?: SortOrder
    teamLoyalty?: SortOrder
    groupAccountability?: SortOrder
    dedicationToWork?: SortOrder
    qualityFocus?: SortOrder
    continuousImprovement?: SortOrder
    attentionToDetail?: SortOrder
    processAdherence?: SortOrder
    punctualityImportance?: SortOrder
    timeRespect?: SortOrder
    scheduleAdherence?: SortOrder
    planningOrientation?: SortOrder
    deadlineCommitment?: SortOrder
    relationshipInvestment?: SortOrder
    trustBuilding?: SortOrder
    longTermOrientation?: SortOrder
    loyaltyDemonstration?: SortOrder
    networkMaintenance?: SortOrder
    changeAcceptance?: SortOrder
    flexibilityInApproach?: SortOrder
    learningOrientation?: SortOrder
    culturalAdaptability?: SortOrder
    resilienceInChallenges?: SortOrder
    professionalEtiquette?: SortOrder
    businessCardProtocol?: SortOrder
    meetingParticipation?: SortOrder
    presentationSkills?: SortOrder
    clientServiceOrientation?: SortOrder
    creativeThinking?: SortOrder
    innovationBalance?: SortOrder
    riskAssessment?: SortOrder
    dimensionScores?: SortOrder
    culturalTrainingNeeded?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type CulturalAssessmentAvgOrderByAggregateInput = {
    overallScore?: SortOrder
    culturalFitPrediction?: SortOrder
    integrationTimelineDays?: SortOrder
    waHarmonyScore?: SortOrder
    kaizenImprovementScore?: SortOrder
    omotenashiServiceScore?: SortOrder
    bushidoDedicationScore?: SortOrder
    nemawashiConsensusScore?: SortOrder
    honneTatemaeBalance?: SortOrder
    indirectCommunication?: SortOrder
    nonverbalAwareness?: SortOrder
    silenceComfort?: SortOrder
    contextualUnderstanding?: SortOrder
    senpaiKohaiRespect?: SortOrder
    authorityRecognition?: SortOrder
    formalityAdherence?: SortOrder
    statusAwareness?: SortOrder
    hierarchyNavigation?: SortOrder
    groupHarmonyPriority?: SortOrder
    collectiveDecisionMaking?: SortOrder
    consensusBuilding?: SortOrder
    teamLoyalty?: SortOrder
    groupAccountability?: SortOrder
    dedicationToWork?: SortOrder
    qualityFocus?: SortOrder
    continuousImprovement?: SortOrder
    attentionToDetail?: SortOrder
    processAdherence?: SortOrder
    punctualityImportance?: SortOrder
    timeRespect?: SortOrder
    scheduleAdherence?: SortOrder
    planningOrientation?: SortOrder
    deadlineCommitment?: SortOrder
    relationshipInvestment?: SortOrder
    trustBuilding?: SortOrder
    longTermOrientation?: SortOrder
    loyaltyDemonstration?: SortOrder
    networkMaintenance?: SortOrder
    changeAcceptance?: SortOrder
    flexibilityInApproach?: SortOrder
    learningOrientation?: SortOrder
    culturalAdaptability?: SortOrder
    resilienceInChallenges?: SortOrder
    professionalEtiquette?: SortOrder
    businessCardProtocol?: SortOrder
    meetingParticipation?: SortOrder
    presentationSkills?: SortOrder
    clientServiceOrientation?: SortOrder
    creativeThinking?: SortOrder
    innovationBalance?: SortOrder
    riskAssessment?: SortOrder
  }

  export type CulturalAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    overallScore?: SortOrder
    culturalFitPrediction?: SortOrder
    integrationTimelineDays?: SortOrder
    waHarmonyScore?: SortOrder
    kaizenImprovementScore?: SortOrder
    omotenashiServiceScore?: SortOrder
    bushidoDedicationScore?: SortOrder
    nemawashiConsensusScore?: SortOrder
    honneTatemaeBalance?: SortOrder
    indirectCommunication?: SortOrder
    nonverbalAwareness?: SortOrder
    silenceComfort?: SortOrder
    contextualUnderstanding?: SortOrder
    senpaiKohaiRespect?: SortOrder
    authorityRecognition?: SortOrder
    formalityAdherence?: SortOrder
    statusAwareness?: SortOrder
    hierarchyNavigation?: SortOrder
    groupHarmonyPriority?: SortOrder
    collectiveDecisionMaking?: SortOrder
    consensusBuilding?: SortOrder
    teamLoyalty?: SortOrder
    groupAccountability?: SortOrder
    dedicationToWork?: SortOrder
    qualityFocus?: SortOrder
    continuousImprovement?: SortOrder
    attentionToDetail?: SortOrder
    processAdherence?: SortOrder
    punctualityImportance?: SortOrder
    timeRespect?: SortOrder
    scheduleAdherence?: SortOrder
    planningOrientation?: SortOrder
    deadlineCommitment?: SortOrder
    relationshipInvestment?: SortOrder
    trustBuilding?: SortOrder
    longTermOrientation?: SortOrder
    loyaltyDemonstration?: SortOrder
    networkMaintenance?: SortOrder
    changeAcceptance?: SortOrder
    flexibilityInApproach?: SortOrder
    learningOrientation?: SortOrder
    culturalAdaptability?: SortOrder
    resilienceInChallenges?: SortOrder
    professionalEtiquette?: SortOrder
    businessCardProtocol?: SortOrder
    meetingParticipation?: SortOrder
    presentationSkills?: SortOrder
    clientServiceOrientation?: SortOrder
    creativeThinking?: SortOrder
    innovationBalance?: SortOrder
    riskAssessment?: SortOrder
    dimensionScores?: SortOrder
    culturalTrainingNeeded?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type CulturalAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    overallScore?: SortOrder
    culturalFitPrediction?: SortOrder
    integrationTimelineDays?: SortOrder
    waHarmonyScore?: SortOrder
    kaizenImprovementScore?: SortOrder
    omotenashiServiceScore?: SortOrder
    bushidoDedicationScore?: SortOrder
    nemawashiConsensusScore?: SortOrder
    honneTatemaeBalance?: SortOrder
    indirectCommunication?: SortOrder
    nonverbalAwareness?: SortOrder
    silenceComfort?: SortOrder
    contextualUnderstanding?: SortOrder
    senpaiKohaiRespect?: SortOrder
    authorityRecognition?: SortOrder
    formalityAdherence?: SortOrder
    statusAwareness?: SortOrder
    hierarchyNavigation?: SortOrder
    groupHarmonyPriority?: SortOrder
    collectiveDecisionMaking?: SortOrder
    consensusBuilding?: SortOrder
    teamLoyalty?: SortOrder
    groupAccountability?: SortOrder
    dedicationToWork?: SortOrder
    qualityFocus?: SortOrder
    continuousImprovement?: SortOrder
    attentionToDetail?: SortOrder
    processAdherence?: SortOrder
    punctualityImportance?: SortOrder
    timeRespect?: SortOrder
    scheduleAdherence?: SortOrder
    planningOrientation?: SortOrder
    deadlineCommitment?: SortOrder
    relationshipInvestment?: SortOrder
    trustBuilding?: SortOrder
    longTermOrientation?: SortOrder
    loyaltyDemonstration?: SortOrder
    networkMaintenance?: SortOrder
    changeAcceptance?: SortOrder
    flexibilityInApproach?: SortOrder
    learningOrientation?: SortOrder
    culturalAdaptability?: SortOrder
    resilienceInChallenges?: SortOrder
    professionalEtiquette?: SortOrder
    businessCardProtocol?: SortOrder
    meetingParticipation?: SortOrder
    presentationSkills?: SortOrder
    clientServiceOrientation?: SortOrder
    creativeThinking?: SortOrder
    innovationBalance?: SortOrder
    riskAssessment?: SortOrder
    dimensionScores?: SortOrder
    culturalTrainingNeeded?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type CulturalAssessmentSumOrderByAggregateInput = {
    overallScore?: SortOrder
    culturalFitPrediction?: SortOrder
    integrationTimelineDays?: SortOrder
    waHarmonyScore?: SortOrder
    kaizenImprovementScore?: SortOrder
    omotenashiServiceScore?: SortOrder
    bushidoDedicationScore?: SortOrder
    nemawashiConsensusScore?: SortOrder
    honneTatemaeBalance?: SortOrder
    indirectCommunication?: SortOrder
    nonverbalAwareness?: SortOrder
    silenceComfort?: SortOrder
    contextualUnderstanding?: SortOrder
    senpaiKohaiRespect?: SortOrder
    authorityRecognition?: SortOrder
    formalityAdherence?: SortOrder
    statusAwareness?: SortOrder
    hierarchyNavigation?: SortOrder
    groupHarmonyPriority?: SortOrder
    collectiveDecisionMaking?: SortOrder
    consensusBuilding?: SortOrder
    teamLoyalty?: SortOrder
    groupAccountability?: SortOrder
    dedicationToWork?: SortOrder
    qualityFocus?: SortOrder
    continuousImprovement?: SortOrder
    attentionToDetail?: SortOrder
    processAdherence?: SortOrder
    punctualityImportance?: SortOrder
    timeRespect?: SortOrder
    scheduleAdherence?: SortOrder
    planningOrientation?: SortOrder
    deadlineCommitment?: SortOrder
    relationshipInvestment?: SortOrder
    trustBuilding?: SortOrder
    longTermOrientation?: SortOrder
    loyaltyDemonstration?: SortOrder
    networkMaintenance?: SortOrder
    changeAcceptance?: SortOrder
    flexibilityInApproach?: SortOrder
    learningOrientation?: SortOrder
    culturalAdaptability?: SortOrder
    resilienceInChallenges?: SortOrder
    professionalEtiquette?: SortOrder
    businessCardProtocol?: SortOrder
    meetingParticipation?: SortOrder
    presentationSkills?: SortOrder
    clientServiceOrientation?: SortOrder
    creativeThinking?: SortOrder
    innovationBalance?: SortOrder
    riskAssessment?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PsychologicalAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    openness?: SortOrder
    conscientiousness?: SortOrder
    extraversion?: SortOrder
    agreeableness?: SortOrder
    neuroticism?: SortOrder
    logicalReasoning?: SortOrder
    numericalAbility?: SortOrder
    verbalAbility?: SortOrder
    spatialAbility?: SortOrder
    memoryCapacity?: SortOrder
    selfAwareness?: SortOrder
    selfRegulation?: SortOrder
    motivation?: SortOrder
    empathy?: SortOrder
    socialSkills?: SortOrder
    stressResilience?: SortOrder
    teamworkAbility?: SortOrder
    leadershipPotential?: SortOrder
    adaptability?: SortOrder
    problemSolving?: SortOrder
    overallScore?: SortOrder
    recommendations?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type PsychologicalAssessmentAvgOrderByAggregateInput = {
    openness?: SortOrder
    conscientiousness?: SortOrder
    extraversion?: SortOrder
    agreeableness?: SortOrder
    neuroticism?: SortOrder
    logicalReasoning?: SortOrder
    numericalAbility?: SortOrder
    verbalAbility?: SortOrder
    spatialAbility?: SortOrder
    memoryCapacity?: SortOrder
    selfAwareness?: SortOrder
    selfRegulation?: SortOrder
    motivation?: SortOrder
    empathy?: SortOrder
    socialSkills?: SortOrder
    stressResilience?: SortOrder
    teamworkAbility?: SortOrder
    leadershipPotential?: SortOrder
    adaptability?: SortOrder
    problemSolving?: SortOrder
    overallScore?: SortOrder
  }

  export type PsychologicalAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    openness?: SortOrder
    conscientiousness?: SortOrder
    extraversion?: SortOrder
    agreeableness?: SortOrder
    neuroticism?: SortOrder
    logicalReasoning?: SortOrder
    numericalAbility?: SortOrder
    verbalAbility?: SortOrder
    spatialAbility?: SortOrder
    memoryCapacity?: SortOrder
    selfAwareness?: SortOrder
    selfRegulation?: SortOrder
    motivation?: SortOrder
    empathy?: SortOrder
    socialSkills?: SortOrder
    stressResilience?: SortOrder
    teamworkAbility?: SortOrder
    leadershipPotential?: SortOrder
    adaptability?: SortOrder
    problemSolving?: SortOrder
    overallScore?: SortOrder
    recommendations?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type PsychologicalAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    openness?: SortOrder
    conscientiousness?: SortOrder
    extraversion?: SortOrder
    agreeableness?: SortOrder
    neuroticism?: SortOrder
    logicalReasoning?: SortOrder
    numericalAbility?: SortOrder
    verbalAbility?: SortOrder
    spatialAbility?: SortOrder
    memoryCapacity?: SortOrder
    selfAwareness?: SortOrder
    selfRegulation?: SortOrder
    motivation?: SortOrder
    empathy?: SortOrder
    socialSkills?: SortOrder
    stressResilience?: SortOrder
    teamworkAbility?: SortOrder
    leadershipPotential?: SortOrder
    adaptability?: SortOrder
    problemSolving?: SortOrder
    overallScore?: SortOrder
    recommendations?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type PsychologicalAssessmentSumOrderByAggregateInput = {
    openness?: SortOrder
    conscientiousness?: SortOrder
    extraversion?: SortOrder
    agreeableness?: SortOrder
    neuroticism?: SortOrder
    logicalReasoning?: SortOrder
    numericalAbility?: SortOrder
    verbalAbility?: SortOrder
    spatialAbility?: SortOrder
    memoryCapacity?: SortOrder
    selfAwareness?: SortOrder
    selfRegulation?: SortOrder
    motivation?: SortOrder
    empathy?: SortOrder
    socialSkills?: SortOrder
    stressResilience?: SortOrder
    teamworkAbility?: SortOrder
    leadershipPotential?: SortOrder
    adaptability?: SortOrder
    problemSolving?: SortOrder
    overallScore?: SortOrder
  }

  export type LanguageAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    language?: SortOrder
    assessmentDate?: SortOrder
    assessmentType?: SortOrder
    speakingLevel?: SortOrder
    listeningLevel?: SortOrder
    readingLevel?: SortOrder
    writingLevel?: SortOrder
    overallScore?: SortOrder
    speakingScore?: SortOrder
    listeningScore?: SortOrder
    readingScore?: SortOrder
    writingScore?: SortOrder
    businessCommunication?: SortOrder
    technicalVocabulary?: SortOrder
    presentationSkills?: SortOrder
    negotiationSkills?: SortOrder
    certificationLevel?: SortOrder
    certificationDate?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type LanguageAssessmentAvgOrderByAggregateInput = {
    overallScore?: SortOrder
    speakingScore?: SortOrder
    listeningScore?: SortOrder
    readingScore?: SortOrder
    writingScore?: SortOrder
    businessCommunication?: SortOrder
    technicalVocabulary?: SortOrder
    presentationSkills?: SortOrder
    negotiationSkills?: SortOrder
  }

  export type LanguageAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    language?: SortOrder
    assessmentDate?: SortOrder
    assessmentType?: SortOrder
    speakingLevel?: SortOrder
    listeningLevel?: SortOrder
    readingLevel?: SortOrder
    writingLevel?: SortOrder
    overallScore?: SortOrder
    speakingScore?: SortOrder
    listeningScore?: SortOrder
    readingScore?: SortOrder
    writingScore?: SortOrder
    businessCommunication?: SortOrder
    technicalVocabulary?: SortOrder
    presentationSkills?: SortOrder
    negotiationSkills?: SortOrder
    certificationLevel?: SortOrder
    certificationDate?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type LanguageAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    language?: SortOrder
    assessmentDate?: SortOrder
    assessmentType?: SortOrder
    speakingLevel?: SortOrder
    listeningLevel?: SortOrder
    readingLevel?: SortOrder
    writingLevel?: SortOrder
    overallScore?: SortOrder
    speakingScore?: SortOrder
    listeningScore?: SortOrder
    readingScore?: SortOrder
    writingScore?: SortOrder
    businessCommunication?: SortOrder
    technicalVocabulary?: SortOrder
    presentationSkills?: SortOrder
    negotiationSkills?: SortOrder
    certificationLevel?: SortOrder
    certificationDate?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type LanguageAssessmentSumOrderByAggregateInput = {
    overallScore?: SortOrder
    speakingScore?: SortOrder
    listeningScore?: SortOrder
    readingScore?: SortOrder
    writingScore?: SortOrder
    businessCommunication?: SortOrder
    technicalVocabulary?: SortOrder
    presentationSkills?: SortOrder
    negotiationSkills?: SortOrder
  }

  export type ProfessionalAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    technicalProficiency?: SortOrder
    toolsAndTechnologies?: SortOrder
    industryKnowledge?: SortOrder
    problemSolvingAbility?: SortOrder
    innovationCapability?: SortOrder
    projectManagement?: SortOrder
    teamLeadership?: SortOrder
    clientManagement?: SortOrder
    strategicThinking?: SortOrder
    analyticalSkills?: SortOrder
    domainExpertise?: SortOrder
    regulatoryKnowledge?: SortOrder
    marketUnderstanding?: SortOrder
    competitorAwareness?: SortOrder
    overallScore?: SortOrder
    skillGaps?: SortOrder
    developmentPlan?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type ProfessionalAssessmentAvgOrderByAggregateInput = {
    technicalProficiency?: SortOrder
    industryKnowledge?: SortOrder
    problemSolvingAbility?: SortOrder
    innovationCapability?: SortOrder
    projectManagement?: SortOrder
    teamLeadership?: SortOrder
    clientManagement?: SortOrder
    strategicThinking?: SortOrder
    analyticalSkills?: SortOrder
    domainExpertise?: SortOrder
    regulatoryKnowledge?: SortOrder
    marketUnderstanding?: SortOrder
    competitorAwareness?: SortOrder
    overallScore?: SortOrder
  }

  export type ProfessionalAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    technicalProficiency?: SortOrder
    toolsAndTechnologies?: SortOrder
    industryKnowledge?: SortOrder
    problemSolvingAbility?: SortOrder
    innovationCapability?: SortOrder
    projectManagement?: SortOrder
    teamLeadership?: SortOrder
    clientManagement?: SortOrder
    strategicThinking?: SortOrder
    analyticalSkills?: SortOrder
    domainExpertise?: SortOrder
    regulatoryKnowledge?: SortOrder
    marketUnderstanding?: SortOrder
    competitorAwareness?: SortOrder
    overallScore?: SortOrder
    skillGaps?: SortOrder
    developmentPlan?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type ProfessionalAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    assessmentType?: SortOrder
    assessmentDate?: SortOrder
    technicalProficiency?: SortOrder
    toolsAndTechnologies?: SortOrder
    industryKnowledge?: SortOrder
    problemSolvingAbility?: SortOrder
    innovationCapability?: SortOrder
    projectManagement?: SortOrder
    teamLeadership?: SortOrder
    clientManagement?: SortOrder
    strategicThinking?: SortOrder
    analyticalSkills?: SortOrder
    domainExpertise?: SortOrder
    regulatoryKnowledge?: SortOrder
    marketUnderstanding?: SortOrder
    competitorAwareness?: SortOrder
    overallScore?: SortOrder
    skillGaps?: SortOrder
    developmentPlan?: SortOrder
    assessmentNotes?: SortOrder
  }

  export type ProfessionalAssessmentSumOrderByAggregateInput = {
    technicalProficiency?: SortOrder
    industryKnowledge?: SortOrder
    problemSolvingAbility?: SortOrder
    innovationCapability?: SortOrder
    projectManagement?: SortOrder
    teamLeadership?: SortOrder
    clientManagement?: SortOrder
    strategicThinking?: SortOrder
    analyticalSkills?: SortOrder
    domainExpertise?: SortOrder
    regulatoryKnowledge?: SortOrder
    marketUnderstanding?: SortOrder
    competitorAwareness?: SortOrder
    overallScore?: SortOrder
  }

  export type ApplicationNullableScalarRelationFilter = {
    is?: ApplicationWhereInput | null
    isNot?: ApplicationWhereInput | null
  }

  export type InterviewSessionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    applicationId?: SortOrder
    interviewType?: SortOrder
    interviewRound?: SortOrder
    interviewDate?: SortOrder
    duration?: SortOrder
    technicalScore?: SortOrder
    culturalFitScore?: SortOrder
    communicationScore?: SortOrder
    motivationScore?: SortOrder
    overallScore?: SortOrder
    strengths?: SortOrder
    weaknesses?: SortOrder
    recommendations?: SortOrder
    interviewNotes?: SortOrder
    recommendation?: SortOrder
    interviewerName?: SortOrder
    interviewerRole?: SortOrder
  }

  export type InterviewSessionAvgOrderByAggregateInput = {
    interviewRound?: SortOrder
    duration?: SortOrder
    technicalScore?: SortOrder
    culturalFitScore?: SortOrder
    communicationScore?: SortOrder
    motivationScore?: SortOrder
    overallScore?: SortOrder
  }

  export type InterviewSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    applicationId?: SortOrder
    interviewType?: SortOrder
    interviewRound?: SortOrder
    interviewDate?: SortOrder
    duration?: SortOrder
    technicalScore?: SortOrder
    culturalFitScore?: SortOrder
    communicationScore?: SortOrder
    motivationScore?: SortOrder
    overallScore?: SortOrder
    strengths?: SortOrder
    weaknesses?: SortOrder
    recommendations?: SortOrder
    interviewNotes?: SortOrder
    recommendation?: SortOrder
    interviewerName?: SortOrder
    interviewerRole?: SortOrder
  }

  export type InterviewSessionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    applicationId?: SortOrder
    interviewType?: SortOrder
    interviewRound?: SortOrder
    interviewDate?: SortOrder
    duration?: SortOrder
    technicalScore?: SortOrder
    culturalFitScore?: SortOrder
    communicationScore?: SortOrder
    motivationScore?: SortOrder
    overallScore?: SortOrder
    strengths?: SortOrder
    weaknesses?: SortOrder
    recommendations?: SortOrder
    interviewNotes?: SortOrder
    recommendation?: SortOrder
    interviewerName?: SortOrder
    interviewerRole?: SortOrder
  }

  export type InterviewSessionSumOrderByAggregateInput = {
    interviewRound?: SortOrder
    duration?: SortOrder
    technicalScore?: SortOrder
    culturalFitScore?: SortOrder
    communicationScore?: SortOrder
    motivationScore?: SortOrder
    overallScore?: SortOrder
  }

  export type OnboardingRecordCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    onboardingStatus?: SortOrder
    documentationComplete?: SortOrder
    systemAccessGranted?: SortOrder
    trainingCompleted?: SortOrder
    culturalOrientationDone?: SortOrder
    mentorAssigned?: SortOrder
    culturalAdaptationScore?: SortOrder
    integrationChallenges?: SortOrder
    supportProvided?: SortOrder
    expectedCompletionDate?: SortOrder
    actualCompletionDate?: SortOrder
    onboardingNotes?: SortOrder
  }

  export type OnboardingRecordAvgOrderByAggregateInput = {
    culturalAdaptationScore?: SortOrder
  }

  export type OnboardingRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    onboardingStatus?: SortOrder
    documentationComplete?: SortOrder
    systemAccessGranted?: SortOrder
    trainingCompleted?: SortOrder
    culturalOrientationDone?: SortOrder
    mentorAssigned?: SortOrder
    culturalAdaptationScore?: SortOrder
    integrationChallenges?: SortOrder
    supportProvided?: SortOrder
    expectedCompletionDate?: SortOrder
    actualCompletionDate?: SortOrder
    onboardingNotes?: SortOrder
  }

  export type OnboardingRecordMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    onboardingStatus?: SortOrder
    documentationComplete?: SortOrder
    systemAccessGranted?: SortOrder
    trainingCompleted?: SortOrder
    culturalOrientationDone?: SortOrder
    mentorAssigned?: SortOrder
    culturalAdaptationScore?: SortOrder
    integrationChallenges?: SortOrder
    supportProvided?: SortOrder
    expectedCompletionDate?: SortOrder
    actualCompletionDate?: SortOrder
    onboardingNotes?: SortOrder
  }

  export type OnboardingRecordSumOrderByAggregateInput = {
    culturalAdaptationScore?: SortOrder
  }

  export type PerformanceReviewCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    reviewPeriod?: SortOrder
    reviewDate?: SortOrder
    reviewType?: SortOrder
    technicalPerformance?: SortOrder
    culturalIntegration?: SortOrder
    teamCollaboration?: SortOrder
    communicationSkills?: SortOrder
    goalAchievement?: SortOrder
    overallPerformance?: SortOrder
    culturalFitImprovement?: SortOrder
    japaneseBusinessEtiquette?: SortOrder
    teamHarmonyContribution?: SortOrder
    achievements?: SortOrder
    areasForImprovement?: SortOrder
    developmentGoals?: SortOrder
    reviewerName?: SortOrder
    reviewerRole?: SortOrder
    reviewNotes?: SortOrder
  }

  export type PerformanceReviewAvgOrderByAggregateInput = {
    technicalPerformance?: SortOrder
    culturalIntegration?: SortOrder
    teamCollaboration?: SortOrder
    communicationSkills?: SortOrder
    goalAchievement?: SortOrder
    overallPerformance?: SortOrder
    culturalFitImprovement?: SortOrder
    japaneseBusinessEtiquette?: SortOrder
    teamHarmonyContribution?: SortOrder
  }

  export type PerformanceReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    reviewPeriod?: SortOrder
    reviewDate?: SortOrder
    reviewType?: SortOrder
    technicalPerformance?: SortOrder
    culturalIntegration?: SortOrder
    teamCollaboration?: SortOrder
    communicationSkills?: SortOrder
    goalAchievement?: SortOrder
    overallPerformance?: SortOrder
    culturalFitImprovement?: SortOrder
    japaneseBusinessEtiquette?: SortOrder
    teamHarmonyContribution?: SortOrder
    achievements?: SortOrder
    areasForImprovement?: SortOrder
    developmentGoals?: SortOrder
    reviewerName?: SortOrder
    reviewerRole?: SortOrder
    reviewNotes?: SortOrder
  }

  export type PerformanceReviewMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    reviewPeriod?: SortOrder
    reviewDate?: SortOrder
    reviewType?: SortOrder
    technicalPerformance?: SortOrder
    culturalIntegration?: SortOrder
    teamCollaboration?: SortOrder
    communicationSkills?: SortOrder
    goalAchievement?: SortOrder
    overallPerformance?: SortOrder
    culturalFitImprovement?: SortOrder
    japaneseBusinessEtiquette?: SortOrder
    teamHarmonyContribution?: SortOrder
    achievements?: SortOrder
    areasForImprovement?: SortOrder
    developmentGoals?: SortOrder
    reviewerName?: SortOrder
    reviewerRole?: SortOrder
    reviewNotes?: SortOrder
  }

  export type PerformanceReviewSumOrderByAggregateInput = {
    technicalPerformance?: SortOrder
    culturalIntegration?: SortOrder
    teamCollaboration?: SortOrder
    communicationSkills?: SortOrder
    goalAchievement?: SortOrder
    overallPerformance?: SortOrder
    culturalFitImprovement?: SortOrder
    japaneseBusinessEtiquette?: SortOrder
    teamHarmonyContribution?: SortOrder
  }

  export type CandidateStatusHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    candidateId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changeReason?: SortOrder
    changedBy?: SortOrder
    notes?: SortOrder
  }

  export type CandidateStatusHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    candidateId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changeReason?: SortOrder
    changedBy?: SortOrder
    notes?: SortOrder
  }

  export type CandidateStatusHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    candidateId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changeReason?: SortOrder
    changedBy?: SortOrder
    notes?: SortOrder
  }

  export type EnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type JobPostingScalarRelationFilter = {
    is?: JobPostingWhereInput
    isNot?: JobPostingWhereInput
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    jobPostingId?: SortOrder
    applicationStatus?: SortOrder
    applicationDate?: SortOrder
    overallMatchScore?: SortOrder
    technicalMatchScore?: SortOrder
    culturalFitScore?: SortOrder
    languageMatchScore?: SortOrder
    experienceMatchScore?: SortOrder
    resumeUrl?: SortOrder
    coverLetterUrl?: SortOrder
    portfolioUrl?: SortOrder
    finalDecision?: SortOrder
    decisionDate?: SortOrder
    decisionReason?: SortOrder
    applicationNotes?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    overallMatchScore?: SortOrder
    technicalMatchScore?: SortOrder
    culturalFitScore?: SortOrder
    languageMatchScore?: SortOrder
    experienceMatchScore?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    jobPostingId?: SortOrder
    applicationStatus?: SortOrder
    applicationDate?: SortOrder
    overallMatchScore?: SortOrder
    technicalMatchScore?: SortOrder
    culturalFitScore?: SortOrder
    languageMatchScore?: SortOrder
    experienceMatchScore?: SortOrder
    resumeUrl?: SortOrder
    coverLetterUrl?: SortOrder
    portfolioUrl?: SortOrder
    finalDecision?: SortOrder
    decisionDate?: SortOrder
    decisionReason?: SortOrder
    applicationNotes?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    jobPostingId?: SortOrder
    applicationStatus?: SortOrder
    applicationDate?: SortOrder
    overallMatchScore?: SortOrder
    technicalMatchScore?: SortOrder
    culturalFitScore?: SortOrder
    languageMatchScore?: SortOrder
    experienceMatchScore?: SortOrder
    resumeUrl?: SortOrder
    coverLetterUrl?: SortOrder
    portfolioUrl?: SortOrder
    finalDecision?: SortOrder
    decisionDate?: SortOrder
    decisionReason?: SortOrder
    applicationNotes?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    overallMatchScore?: SortOrder
    technicalMatchScore?: SortOrder
    culturalFitScore?: SortOrder
    languageMatchScore?: SortOrder
    experienceMatchScore?: SortOrder
  }

  export type EnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type MarketIntelligenceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataType?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    timeframe?: SortOrder
    averageSalary?: SortOrder
    salaryRange?: SortOrder
    demandLevel?: SortOrder
    supplyLevel?: SortOrder
    inDemandSkills?: SortOrder
    emergingSkills?: SortOrder
    decliningSkills?: SortOrder
    culturalTrends?: SortOrder
    adaptationChallenges?: SortOrder
    successFactors?: SortOrder
    dataSource?: SortOrder
    reliability?: SortOrder
    marketNotes?: SortOrder
  }

  export type MarketIntelligenceAvgOrderByAggregateInput = {
    averageSalary?: SortOrder
    reliability?: SortOrder
  }

  export type MarketIntelligenceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataType?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    timeframe?: SortOrder
    averageSalary?: SortOrder
    salaryRange?: SortOrder
    demandLevel?: SortOrder
    supplyLevel?: SortOrder
    inDemandSkills?: SortOrder
    emergingSkills?: SortOrder
    decliningSkills?: SortOrder
    culturalTrends?: SortOrder
    adaptationChallenges?: SortOrder
    successFactors?: SortOrder
    dataSource?: SortOrder
    reliability?: SortOrder
    marketNotes?: SortOrder
  }

  export type MarketIntelligenceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataType?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    timeframe?: SortOrder
    averageSalary?: SortOrder
    salaryRange?: SortOrder
    demandLevel?: SortOrder
    supplyLevel?: SortOrder
    inDemandSkills?: SortOrder
    emergingSkills?: SortOrder
    decliningSkills?: SortOrder
    culturalTrends?: SortOrder
    adaptationChallenges?: SortOrder
    successFactors?: SortOrder
    dataSource?: SortOrder
    reliability?: SortOrder
    marketNotes?: SortOrder
  }

  export type MarketIntelligenceSumOrderByAggregateInput = {
    averageSalary?: SortOrder
    reliability?: SortOrder
  }

  export type SystemMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    metricType?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    timeframe?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    calculationMethod?: SortOrder
    dataPoints?: SortOrder
    confidence?: SortOrder
    metricNotes?: SortOrder
  }

  export type SystemMetricsAvgOrderByAggregateInput = {
    metricValue?: SortOrder
    dataPoints?: SortOrder
    confidence?: SortOrder
  }

  export type SystemMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    metricType?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    timeframe?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    calculationMethod?: SortOrder
    dataPoints?: SortOrder
    confidence?: SortOrder
    metricNotes?: SortOrder
  }

  export type SystemMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    metricType?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    timeframe?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    calculationMethod?: SortOrder
    dataPoints?: SortOrder
    confidence?: SortOrder
    metricNotes?: SortOrder
  }

  export type SystemMetricsSumOrderByAggregateInput = {
    metricValue?: SortOrder
    dataPoints?: SortOrder
    confidence?: SortOrder
  }

  export type ReportGenerationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportType?: SortOrder
    reportTitle?: SortOrder
    reportFormat?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    dateRange?: SortOrder
    filters?: SortOrder
    generationStatus?: SortOrder
    generatedAt?: SortOrder
    reportUrl?: SortOrder
    reportSize?: SortOrder
    keyFindings?: SortOrder
    recommendations?: SortOrder
    dataPoints?: SortOrder
    requestedBy?: SortOrder
    reportNotes?: SortOrder
  }

  export type ReportGenerationAvgOrderByAggregateInput = {
    reportSize?: SortOrder
    dataPoints?: SortOrder
  }

  export type ReportGenerationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportType?: SortOrder
    reportTitle?: SortOrder
    reportFormat?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    dateRange?: SortOrder
    filters?: SortOrder
    generationStatus?: SortOrder
    generatedAt?: SortOrder
    reportUrl?: SortOrder
    reportSize?: SortOrder
    keyFindings?: SortOrder
    recommendations?: SortOrder
    dataPoints?: SortOrder
    requestedBy?: SortOrder
    reportNotes?: SortOrder
  }

  export type ReportGenerationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportType?: SortOrder
    reportTitle?: SortOrder
    reportFormat?: SortOrder
    candidateId?: SortOrder
    companyId?: SortOrder
    dateRange?: SortOrder
    filters?: SortOrder
    generationStatus?: SortOrder
    generatedAt?: SortOrder
    reportUrl?: SortOrder
    reportSize?: SortOrder
    keyFindings?: SortOrder
    recommendations?: SortOrder
    dataPoints?: SortOrder
    requestedBy?: SortOrder
    reportNotes?: SortOrder
  }

  export type ReportGenerationSumOrderByAggregateInput = {
    reportSize?: SortOrder
    dataPoints?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ApplicationCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type CulturalAssessmentCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CulturalAssessmentCreateWithoutCandidateInput, CulturalAssessmentUncheckedCreateWithoutCandidateInput> | CulturalAssessmentCreateWithoutCandidateInput[] | CulturalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CulturalAssessmentCreateOrConnectWithoutCandidateInput | CulturalAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: CulturalAssessmentCreateManyCandidateInputEnvelope
    connect?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
  }

  export type PsychologicalAssessmentCreateNestedManyWithoutCandidateInput = {
    create?: XOR<PsychologicalAssessmentCreateWithoutCandidateInput, PsychologicalAssessmentUncheckedCreateWithoutCandidateInput> | PsychologicalAssessmentCreateWithoutCandidateInput[] | PsychologicalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PsychologicalAssessmentCreateOrConnectWithoutCandidateInput | PsychologicalAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: PsychologicalAssessmentCreateManyCandidateInputEnvelope
    connect?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
  }

  export type LanguageAssessmentCreateNestedManyWithoutCandidateInput = {
    create?: XOR<LanguageAssessmentCreateWithoutCandidateInput, LanguageAssessmentUncheckedCreateWithoutCandidateInput> | LanguageAssessmentCreateWithoutCandidateInput[] | LanguageAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguageAssessmentCreateOrConnectWithoutCandidateInput | LanguageAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: LanguageAssessmentCreateManyCandidateInputEnvelope
    connect?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
  }

  export type ProfessionalAssessmentCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ProfessionalAssessmentCreateWithoutCandidateInput, ProfessionalAssessmentUncheckedCreateWithoutCandidateInput> | ProfessionalAssessmentCreateWithoutCandidateInput[] | ProfessionalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ProfessionalAssessmentCreateOrConnectWithoutCandidateInput | ProfessionalAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: ProfessionalAssessmentCreateManyCandidateInputEnvelope
    connect?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
  }

  export type InterviewSessionCreateNestedManyWithoutCandidateInput = {
    create?: XOR<InterviewSessionCreateWithoutCandidateInput, InterviewSessionUncheckedCreateWithoutCandidateInput> | InterviewSessionCreateWithoutCandidateInput[] | InterviewSessionUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutCandidateInput | InterviewSessionCreateOrConnectWithoutCandidateInput[]
    createMany?: InterviewSessionCreateManyCandidateInputEnvelope
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
  }

  export type OnboardingRecordCreateNestedManyWithoutCandidateInput = {
    create?: XOR<OnboardingRecordCreateWithoutCandidateInput, OnboardingRecordUncheckedCreateWithoutCandidateInput> | OnboardingRecordCreateWithoutCandidateInput[] | OnboardingRecordUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCandidateInput | OnboardingRecordCreateOrConnectWithoutCandidateInput[]
    createMany?: OnboardingRecordCreateManyCandidateInputEnvelope
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
  }

  export type PerformanceReviewCreateNestedManyWithoutCandidateInput = {
    create?: XOR<PerformanceReviewCreateWithoutCandidateInput, PerformanceReviewUncheckedCreateWithoutCandidateInput> | PerformanceReviewCreateWithoutCandidateInput[] | PerformanceReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCandidateInput | PerformanceReviewCreateOrConnectWithoutCandidateInput[]
    createMany?: PerformanceReviewCreateManyCandidateInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type CandidateStatusHistoryCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateStatusHistoryCreateWithoutCandidateInput, CandidateStatusHistoryUncheckedCreateWithoutCandidateInput> | CandidateStatusHistoryCreateWithoutCandidateInput[] | CandidateStatusHistoryUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateStatusHistoryCreateOrConnectWithoutCandidateInput | CandidateStatusHistoryCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateStatusHistoryCreateManyCandidateInputEnvelope
    connect?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CulturalAssessmentCreateWithoutCandidateInput, CulturalAssessmentUncheckedCreateWithoutCandidateInput> | CulturalAssessmentCreateWithoutCandidateInput[] | CulturalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CulturalAssessmentCreateOrConnectWithoutCandidateInput | CulturalAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: CulturalAssessmentCreateManyCandidateInputEnvelope
    connect?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
  }

  export type PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<PsychologicalAssessmentCreateWithoutCandidateInput, PsychologicalAssessmentUncheckedCreateWithoutCandidateInput> | PsychologicalAssessmentCreateWithoutCandidateInput[] | PsychologicalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PsychologicalAssessmentCreateOrConnectWithoutCandidateInput | PsychologicalAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: PsychologicalAssessmentCreateManyCandidateInputEnvelope
    connect?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
  }

  export type LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<LanguageAssessmentCreateWithoutCandidateInput, LanguageAssessmentUncheckedCreateWithoutCandidateInput> | LanguageAssessmentCreateWithoutCandidateInput[] | LanguageAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguageAssessmentCreateOrConnectWithoutCandidateInput | LanguageAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: LanguageAssessmentCreateManyCandidateInputEnvelope
    connect?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
  }

  export type ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ProfessionalAssessmentCreateWithoutCandidateInput, ProfessionalAssessmentUncheckedCreateWithoutCandidateInput> | ProfessionalAssessmentCreateWithoutCandidateInput[] | ProfessionalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ProfessionalAssessmentCreateOrConnectWithoutCandidateInput | ProfessionalAssessmentCreateOrConnectWithoutCandidateInput[]
    createMany?: ProfessionalAssessmentCreateManyCandidateInputEnvelope
    connect?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
  }

  export type InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<InterviewSessionCreateWithoutCandidateInput, InterviewSessionUncheckedCreateWithoutCandidateInput> | InterviewSessionCreateWithoutCandidateInput[] | InterviewSessionUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutCandidateInput | InterviewSessionCreateOrConnectWithoutCandidateInput[]
    createMany?: InterviewSessionCreateManyCandidateInputEnvelope
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
  }

  export type OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<OnboardingRecordCreateWithoutCandidateInput, OnboardingRecordUncheckedCreateWithoutCandidateInput> | OnboardingRecordCreateWithoutCandidateInput[] | OnboardingRecordUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCandidateInput | OnboardingRecordCreateOrConnectWithoutCandidateInput[]
    createMany?: OnboardingRecordCreateManyCandidateInputEnvelope
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
  }

  export type PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<PerformanceReviewCreateWithoutCandidateInput, PerformanceReviewUncheckedCreateWithoutCandidateInput> | PerformanceReviewCreateWithoutCandidateInput[] | PerformanceReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCandidateInput | PerformanceReviewCreateOrConnectWithoutCandidateInput[]
    createMany?: PerformanceReviewCreateManyCandidateInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateStatusHistoryCreateWithoutCandidateInput, CandidateStatusHistoryUncheckedCreateWithoutCandidateInput> | CandidateStatusHistoryCreateWithoutCandidateInput[] | CandidateStatusHistoryUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateStatusHistoryCreateOrConnectWithoutCandidateInput | CandidateStatusHistoryCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateStatusHistoryCreateManyCandidateInputEnvelope
    connect?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCandidateStatusFieldUpdateOperationsInput = {
    set?: $Enums.CandidateStatus
  }

  export type ApplicationUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCandidateInput | ApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCandidateInput | ApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCandidateInput | ApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CulturalAssessmentUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CulturalAssessmentCreateWithoutCandidateInput, CulturalAssessmentUncheckedCreateWithoutCandidateInput> | CulturalAssessmentCreateWithoutCandidateInput[] | CulturalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CulturalAssessmentCreateOrConnectWithoutCandidateInput | CulturalAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: CulturalAssessmentUpsertWithWhereUniqueWithoutCandidateInput | CulturalAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CulturalAssessmentCreateManyCandidateInputEnvelope
    set?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    disconnect?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    delete?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    connect?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    update?: CulturalAssessmentUpdateWithWhereUniqueWithoutCandidateInput | CulturalAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CulturalAssessmentUpdateManyWithWhereWithoutCandidateInput | CulturalAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CulturalAssessmentScalarWhereInput | CulturalAssessmentScalarWhereInput[]
  }

  export type PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<PsychologicalAssessmentCreateWithoutCandidateInput, PsychologicalAssessmentUncheckedCreateWithoutCandidateInput> | PsychologicalAssessmentCreateWithoutCandidateInput[] | PsychologicalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PsychologicalAssessmentCreateOrConnectWithoutCandidateInput | PsychologicalAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: PsychologicalAssessmentUpsertWithWhereUniqueWithoutCandidateInput | PsychologicalAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: PsychologicalAssessmentCreateManyCandidateInputEnvelope
    set?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    disconnect?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    delete?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    connect?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    update?: PsychologicalAssessmentUpdateWithWhereUniqueWithoutCandidateInput | PsychologicalAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: PsychologicalAssessmentUpdateManyWithWhereWithoutCandidateInput | PsychologicalAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: PsychologicalAssessmentScalarWhereInput | PsychologicalAssessmentScalarWhereInput[]
  }

  export type LanguageAssessmentUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<LanguageAssessmentCreateWithoutCandidateInput, LanguageAssessmentUncheckedCreateWithoutCandidateInput> | LanguageAssessmentCreateWithoutCandidateInput[] | LanguageAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguageAssessmentCreateOrConnectWithoutCandidateInput | LanguageAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: LanguageAssessmentUpsertWithWhereUniqueWithoutCandidateInput | LanguageAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: LanguageAssessmentCreateManyCandidateInputEnvelope
    set?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    disconnect?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    delete?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    connect?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    update?: LanguageAssessmentUpdateWithWhereUniqueWithoutCandidateInput | LanguageAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: LanguageAssessmentUpdateManyWithWhereWithoutCandidateInput | LanguageAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: LanguageAssessmentScalarWhereInput | LanguageAssessmentScalarWhereInput[]
  }

  export type ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ProfessionalAssessmentCreateWithoutCandidateInput, ProfessionalAssessmentUncheckedCreateWithoutCandidateInput> | ProfessionalAssessmentCreateWithoutCandidateInput[] | ProfessionalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ProfessionalAssessmentCreateOrConnectWithoutCandidateInput | ProfessionalAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: ProfessionalAssessmentUpsertWithWhereUniqueWithoutCandidateInput | ProfessionalAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ProfessionalAssessmentCreateManyCandidateInputEnvelope
    set?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    disconnect?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    delete?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    connect?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    update?: ProfessionalAssessmentUpdateWithWhereUniqueWithoutCandidateInput | ProfessionalAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ProfessionalAssessmentUpdateManyWithWhereWithoutCandidateInput | ProfessionalAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ProfessionalAssessmentScalarWhereInput | ProfessionalAssessmentScalarWhereInput[]
  }

  export type InterviewSessionUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<InterviewSessionCreateWithoutCandidateInput, InterviewSessionUncheckedCreateWithoutCandidateInput> | InterviewSessionCreateWithoutCandidateInput[] | InterviewSessionUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutCandidateInput | InterviewSessionCreateOrConnectWithoutCandidateInput[]
    upsert?: InterviewSessionUpsertWithWhereUniqueWithoutCandidateInput | InterviewSessionUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: InterviewSessionCreateManyCandidateInputEnvelope
    set?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    disconnect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    delete?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    update?: InterviewSessionUpdateWithWhereUniqueWithoutCandidateInput | InterviewSessionUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: InterviewSessionUpdateManyWithWhereWithoutCandidateInput | InterviewSessionUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: InterviewSessionScalarWhereInput | InterviewSessionScalarWhereInput[]
  }

  export type OnboardingRecordUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<OnboardingRecordCreateWithoutCandidateInput, OnboardingRecordUncheckedCreateWithoutCandidateInput> | OnboardingRecordCreateWithoutCandidateInput[] | OnboardingRecordUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCandidateInput | OnboardingRecordCreateOrConnectWithoutCandidateInput[]
    upsert?: OnboardingRecordUpsertWithWhereUniqueWithoutCandidateInput | OnboardingRecordUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: OnboardingRecordCreateManyCandidateInputEnvelope
    set?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    disconnect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    delete?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    update?: OnboardingRecordUpdateWithWhereUniqueWithoutCandidateInput | OnboardingRecordUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: OnboardingRecordUpdateManyWithWhereWithoutCandidateInput | OnboardingRecordUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: OnboardingRecordScalarWhereInput | OnboardingRecordScalarWhereInput[]
  }

  export type PerformanceReviewUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutCandidateInput, PerformanceReviewUncheckedCreateWithoutCandidateInput> | PerformanceReviewCreateWithoutCandidateInput[] | PerformanceReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCandidateInput | PerformanceReviewCreateOrConnectWithoutCandidateInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutCandidateInput | PerformanceReviewUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: PerformanceReviewCreateManyCandidateInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutCandidateInput | PerformanceReviewUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutCandidateInput | PerformanceReviewUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateStatusHistoryCreateWithoutCandidateInput, CandidateStatusHistoryUncheckedCreateWithoutCandidateInput> | CandidateStatusHistoryCreateWithoutCandidateInput[] | CandidateStatusHistoryUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateStatusHistoryCreateOrConnectWithoutCandidateInput | CandidateStatusHistoryCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateStatusHistoryUpsertWithWhereUniqueWithoutCandidateInput | CandidateStatusHistoryUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateStatusHistoryCreateManyCandidateInputEnvelope
    set?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    disconnect?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    delete?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    connect?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    update?: CandidateStatusHistoryUpdateWithWhereUniqueWithoutCandidateInput | CandidateStatusHistoryUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateStatusHistoryUpdateManyWithWhereWithoutCandidateInput | CandidateStatusHistoryUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateStatusHistoryScalarWhereInput | CandidateStatusHistoryScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCandidateInput | ApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCandidateInput | ApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCandidateInput | ApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CulturalAssessmentCreateWithoutCandidateInput, CulturalAssessmentUncheckedCreateWithoutCandidateInput> | CulturalAssessmentCreateWithoutCandidateInput[] | CulturalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CulturalAssessmentCreateOrConnectWithoutCandidateInput | CulturalAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: CulturalAssessmentUpsertWithWhereUniqueWithoutCandidateInput | CulturalAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CulturalAssessmentCreateManyCandidateInputEnvelope
    set?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    disconnect?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    delete?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    connect?: CulturalAssessmentWhereUniqueInput | CulturalAssessmentWhereUniqueInput[]
    update?: CulturalAssessmentUpdateWithWhereUniqueWithoutCandidateInput | CulturalAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CulturalAssessmentUpdateManyWithWhereWithoutCandidateInput | CulturalAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CulturalAssessmentScalarWhereInput | CulturalAssessmentScalarWhereInput[]
  }

  export type PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<PsychologicalAssessmentCreateWithoutCandidateInput, PsychologicalAssessmentUncheckedCreateWithoutCandidateInput> | PsychologicalAssessmentCreateWithoutCandidateInput[] | PsychologicalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PsychologicalAssessmentCreateOrConnectWithoutCandidateInput | PsychologicalAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: PsychologicalAssessmentUpsertWithWhereUniqueWithoutCandidateInput | PsychologicalAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: PsychologicalAssessmentCreateManyCandidateInputEnvelope
    set?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    disconnect?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    delete?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    connect?: PsychologicalAssessmentWhereUniqueInput | PsychologicalAssessmentWhereUniqueInput[]
    update?: PsychologicalAssessmentUpdateWithWhereUniqueWithoutCandidateInput | PsychologicalAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: PsychologicalAssessmentUpdateManyWithWhereWithoutCandidateInput | PsychologicalAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: PsychologicalAssessmentScalarWhereInput | PsychologicalAssessmentScalarWhereInput[]
  }

  export type LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<LanguageAssessmentCreateWithoutCandidateInput, LanguageAssessmentUncheckedCreateWithoutCandidateInput> | LanguageAssessmentCreateWithoutCandidateInput[] | LanguageAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: LanguageAssessmentCreateOrConnectWithoutCandidateInput | LanguageAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: LanguageAssessmentUpsertWithWhereUniqueWithoutCandidateInput | LanguageAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: LanguageAssessmentCreateManyCandidateInputEnvelope
    set?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    disconnect?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    delete?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    connect?: LanguageAssessmentWhereUniqueInput | LanguageAssessmentWhereUniqueInput[]
    update?: LanguageAssessmentUpdateWithWhereUniqueWithoutCandidateInput | LanguageAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: LanguageAssessmentUpdateManyWithWhereWithoutCandidateInput | LanguageAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: LanguageAssessmentScalarWhereInput | LanguageAssessmentScalarWhereInput[]
  }

  export type ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ProfessionalAssessmentCreateWithoutCandidateInput, ProfessionalAssessmentUncheckedCreateWithoutCandidateInput> | ProfessionalAssessmentCreateWithoutCandidateInput[] | ProfessionalAssessmentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ProfessionalAssessmentCreateOrConnectWithoutCandidateInput | ProfessionalAssessmentCreateOrConnectWithoutCandidateInput[]
    upsert?: ProfessionalAssessmentUpsertWithWhereUniqueWithoutCandidateInput | ProfessionalAssessmentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ProfessionalAssessmentCreateManyCandidateInputEnvelope
    set?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    disconnect?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    delete?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    connect?: ProfessionalAssessmentWhereUniqueInput | ProfessionalAssessmentWhereUniqueInput[]
    update?: ProfessionalAssessmentUpdateWithWhereUniqueWithoutCandidateInput | ProfessionalAssessmentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ProfessionalAssessmentUpdateManyWithWhereWithoutCandidateInput | ProfessionalAssessmentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ProfessionalAssessmentScalarWhereInput | ProfessionalAssessmentScalarWhereInput[]
  }

  export type InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<InterviewSessionCreateWithoutCandidateInput, InterviewSessionUncheckedCreateWithoutCandidateInput> | InterviewSessionCreateWithoutCandidateInput[] | InterviewSessionUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutCandidateInput | InterviewSessionCreateOrConnectWithoutCandidateInput[]
    upsert?: InterviewSessionUpsertWithWhereUniqueWithoutCandidateInput | InterviewSessionUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: InterviewSessionCreateManyCandidateInputEnvelope
    set?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    disconnect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    delete?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    update?: InterviewSessionUpdateWithWhereUniqueWithoutCandidateInput | InterviewSessionUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: InterviewSessionUpdateManyWithWhereWithoutCandidateInput | InterviewSessionUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: InterviewSessionScalarWhereInput | InterviewSessionScalarWhereInput[]
  }

  export type OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<OnboardingRecordCreateWithoutCandidateInput, OnboardingRecordUncheckedCreateWithoutCandidateInput> | OnboardingRecordCreateWithoutCandidateInput[] | OnboardingRecordUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCandidateInput | OnboardingRecordCreateOrConnectWithoutCandidateInput[]
    upsert?: OnboardingRecordUpsertWithWhereUniqueWithoutCandidateInput | OnboardingRecordUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: OnboardingRecordCreateManyCandidateInputEnvelope
    set?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    disconnect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    delete?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    update?: OnboardingRecordUpdateWithWhereUniqueWithoutCandidateInput | OnboardingRecordUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: OnboardingRecordUpdateManyWithWhereWithoutCandidateInput | OnboardingRecordUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: OnboardingRecordScalarWhereInput | OnboardingRecordScalarWhereInput[]
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutCandidateInput, PerformanceReviewUncheckedCreateWithoutCandidateInput> | PerformanceReviewCreateWithoutCandidateInput[] | PerformanceReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCandidateInput | PerformanceReviewCreateOrConnectWithoutCandidateInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutCandidateInput | PerformanceReviewUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: PerformanceReviewCreateManyCandidateInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutCandidateInput | PerformanceReviewUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutCandidateInput | PerformanceReviewUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateStatusHistoryCreateWithoutCandidateInput, CandidateStatusHistoryUncheckedCreateWithoutCandidateInput> | CandidateStatusHistoryCreateWithoutCandidateInput[] | CandidateStatusHistoryUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateStatusHistoryCreateOrConnectWithoutCandidateInput | CandidateStatusHistoryCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateStatusHistoryUpsertWithWhereUniqueWithoutCandidateInput | CandidateStatusHistoryUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateStatusHistoryCreateManyCandidateInputEnvelope
    set?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    disconnect?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    delete?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    connect?: CandidateStatusHistoryWhereUniqueInput | CandidateStatusHistoryWhereUniqueInput[]
    update?: CandidateStatusHistoryUpdateWithWhereUniqueWithoutCandidateInput | CandidateStatusHistoryUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateStatusHistoryUpdateManyWithWhereWithoutCandidateInput | CandidateStatusHistoryUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateStatusHistoryScalarWhereInput | CandidateStatusHistoryScalarWhereInput[]
  }

  export type JobPostingCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type ApplicationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ApplicationCreateWithoutCompanyInput, ApplicationUncheckedCreateWithoutCompanyInput> | ApplicationCreateWithoutCompanyInput[] | ApplicationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCompanyInput | ApplicationCreateOrConnectWithoutCompanyInput[]
    createMany?: ApplicationCreateManyCompanyInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type OnboardingRecordCreateNestedManyWithoutCompanyInput = {
    create?: XOR<OnboardingRecordCreateWithoutCompanyInput, OnboardingRecordUncheckedCreateWithoutCompanyInput> | OnboardingRecordCreateWithoutCompanyInput[] | OnboardingRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCompanyInput | OnboardingRecordCreateOrConnectWithoutCompanyInput[]
    createMany?: OnboardingRecordCreateManyCompanyInputEnvelope
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
  }

  export type PerformanceReviewCreateNestedManyWithoutCompanyInput = {
    create?: XOR<PerformanceReviewCreateWithoutCompanyInput, PerformanceReviewUncheckedCreateWithoutCompanyInput> | PerformanceReviewCreateWithoutCompanyInput[] | PerformanceReviewUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCompanyInput | PerformanceReviewCreateOrConnectWithoutCompanyInput[]
    createMany?: PerformanceReviewCreateManyCompanyInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type JobPostingUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ApplicationCreateWithoutCompanyInput, ApplicationUncheckedCreateWithoutCompanyInput> | ApplicationCreateWithoutCompanyInput[] | ApplicationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCompanyInput | ApplicationCreateOrConnectWithoutCompanyInput[]
    createMany?: ApplicationCreateManyCompanyInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type OnboardingRecordUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<OnboardingRecordCreateWithoutCompanyInput, OnboardingRecordUncheckedCreateWithoutCompanyInput> | OnboardingRecordCreateWithoutCompanyInput[] | OnboardingRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCompanyInput | OnboardingRecordCreateOrConnectWithoutCompanyInput[]
    createMany?: OnboardingRecordCreateManyCompanyInputEnvelope
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
  }

  export type PerformanceReviewUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<PerformanceReviewCreateWithoutCompanyInput, PerformanceReviewUncheckedCreateWithoutCompanyInput> | PerformanceReviewCreateWithoutCompanyInput[] | PerformanceReviewUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCompanyInput | PerformanceReviewCreateOrConnectWithoutCompanyInput[]
    createMany?: PerformanceReviewCreateManyCompanyInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type JobPostingUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutCompanyInput | JobPostingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutCompanyInput | JobPostingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutCompanyInput | JobPostingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type ApplicationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ApplicationCreateWithoutCompanyInput, ApplicationUncheckedCreateWithoutCompanyInput> | ApplicationCreateWithoutCompanyInput[] | ApplicationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCompanyInput | ApplicationCreateOrConnectWithoutCompanyInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCompanyInput | ApplicationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ApplicationCreateManyCompanyInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCompanyInput | ApplicationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCompanyInput | ApplicationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type OnboardingRecordUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<OnboardingRecordCreateWithoutCompanyInput, OnboardingRecordUncheckedCreateWithoutCompanyInput> | OnboardingRecordCreateWithoutCompanyInput[] | OnboardingRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCompanyInput | OnboardingRecordCreateOrConnectWithoutCompanyInput[]
    upsert?: OnboardingRecordUpsertWithWhereUniqueWithoutCompanyInput | OnboardingRecordUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: OnboardingRecordCreateManyCompanyInputEnvelope
    set?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    disconnect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    delete?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    update?: OnboardingRecordUpdateWithWhereUniqueWithoutCompanyInput | OnboardingRecordUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: OnboardingRecordUpdateManyWithWhereWithoutCompanyInput | OnboardingRecordUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: OnboardingRecordScalarWhereInput | OnboardingRecordScalarWhereInput[]
  }

  export type PerformanceReviewUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutCompanyInput, PerformanceReviewUncheckedCreateWithoutCompanyInput> | PerformanceReviewCreateWithoutCompanyInput[] | PerformanceReviewUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCompanyInput | PerformanceReviewCreateOrConnectWithoutCompanyInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutCompanyInput | PerformanceReviewUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: PerformanceReviewCreateManyCompanyInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutCompanyInput | PerformanceReviewUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutCompanyInput | PerformanceReviewUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type JobPostingUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput> | JobPostingCreateWithoutCompanyInput[] | JobPostingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobPostingCreateOrConnectWithoutCompanyInput | JobPostingCreateOrConnectWithoutCompanyInput[]
    upsert?: JobPostingUpsertWithWhereUniqueWithoutCompanyInput | JobPostingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobPostingCreateManyCompanyInputEnvelope
    set?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    disconnect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    delete?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    connect?: JobPostingWhereUniqueInput | JobPostingWhereUniqueInput[]
    update?: JobPostingUpdateWithWhereUniqueWithoutCompanyInput | JobPostingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobPostingUpdateManyWithWhereWithoutCompanyInput | JobPostingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ApplicationCreateWithoutCompanyInput, ApplicationUncheckedCreateWithoutCompanyInput> | ApplicationCreateWithoutCompanyInput[] | ApplicationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCompanyInput | ApplicationCreateOrConnectWithoutCompanyInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCompanyInput | ApplicationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ApplicationCreateManyCompanyInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCompanyInput | ApplicationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCompanyInput | ApplicationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type OnboardingRecordUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<OnboardingRecordCreateWithoutCompanyInput, OnboardingRecordUncheckedCreateWithoutCompanyInput> | OnboardingRecordCreateWithoutCompanyInput[] | OnboardingRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OnboardingRecordCreateOrConnectWithoutCompanyInput | OnboardingRecordCreateOrConnectWithoutCompanyInput[]
    upsert?: OnboardingRecordUpsertWithWhereUniqueWithoutCompanyInput | OnboardingRecordUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: OnboardingRecordCreateManyCompanyInputEnvelope
    set?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    disconnect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    delete?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    connect?: OnboardingRecordWhereUniqueInput | OnboardingRecordWhereUniqueInput[]
    update?: OnboardingRecordUpdateWithWhereUniqueWithoutCompanyInput | OnboardingRecordUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: OnboardingRecordUpdateManyWithWhereWithoutCompanyInput | OnboardingRecordUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: OnboardingRecordScalarWhereInput | OnboardingRecordScalarWhereInput[]
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutCompanyInput, PerformanceReviewUncheckedCreateWithoutCompanyInput> | PerformanceReviewCreateWithoutCompanyInput[] | PerformanceReviewUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutCompanyInput | PerformanceReviewCreateOrConnectWithoutCompanyInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutCompanyInput | PerformanceReviewUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: PerformanceReviewCreateManyCompanyInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutCompanyInput | PerformanceReviewUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutCompanyInput | PerformanceReviewUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutJobPostingsInput = {
    create?: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobPostingsInput
    connect?: CompanyWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutJobPostingInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingInput, ApplicationUncheckedCreateWithoutJobPostingInput> | ApplicationCreateWithoutJobPostingInput[] | ApplicationUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingInput | ApplicationCreateOrConnectWithoutJobPostingInput[]
    createMany?: ApplicationCreateManyJobPostingInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobPostingInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingInput, ApplicationUncheckedCreateWithoutJobPostingInput> | ApplicationCreateWithoutJobPostingInput[] | ApplicationUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingInput | ApplicationCreateOrConnectWithoutJobPostingInput[]
    createMany?: ApplicationCreateManyJobPostingInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type EnumPostingStatusFieldUpdateOperationsInput = {
    set?: $Enums.PostingStatus
  }

  export type CompanyUpdateOneRequiredWithoutJobPostingsNestedInput = {
    create?: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobPostingsInput
    upsert?: CompanyUpsertWithoutJobPostingsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutJobPostingsInput, CompanyUpdateWithoutJobPostingsInput>, CompanyUncheckedUpdateWithoutJobPostingsInput>
  }

  export type ApplicationUpdateManyWithoutJobPostingNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingInput, ApplicationUncheckedCreateWithoutJobPostingInput> | ApplicationCreateWithoutJobPostingInput[] | ApplicationUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingInput | ApplicationCreateOrConnectWithoutJobPostingInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobPostingInput | ApplicationUpsertWithWhereUniqueWithoutJobPostingInput[]
    createMany?: ApplicationCreateManyJobPostingInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobPostingInput | ApplicationUpdateWithWhereUniqueWithoutJobPostingInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobPostingInput | ApplicationUpdateManyWithWhereWithoutJobPostingInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutJobPostingNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobPostingInput, ApplicationUncheckedCreateWithoutJobPostingInput> | ApplicationCreateWithoutJobPostingInput[] | ApplicationUncheckedCreateWithoutJobPostingInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobPostingInput | ApplicationCreateOrConnectWithoutJobPostingInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobPostingInput | ApplicationUpsertWithWhereUniqueWithoutJobPostingInput[]
    createMany?: ApplicationCreateManyJobPostingInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobPostingInput | ApplicationUpdateWithWhereUniqueWithoutJobPostingInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobPostingInput | ApplicationUpdateManyWithWhereWithoutJobPostingInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CandidateCreateNestedOneWithoutCulturalAssessmentsInput = {
    create?: XOR<CandidateCreateWithoutCulturalAssessmentsInput, CandidateUncheckedCreateWithoutCulturalAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCulturalAssessmentsInput
    connect?: CandidateWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CandidateUpdateOneRequiredWithoutCulturalAssessmentsNestedInput = {
    create?: XOR<CandidateCreateWithoutCulturalAssessmentsInput, CandidateUncheckedCreateWithoutCulturalAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCulturalAssessmentsInput
    upsert?: CandidateUpsertWithoutCulturalAssessmentsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutCulturalAssessmentsInput, CandidateUpdateWithoutCulturalAssessmentsInput>, CandidateUncheckedUpdateWithoutCulturalAssessmentsInput>
  }

  export type CandidateCreateNestedOneWithoutPsychologicalAssessmentsInput = {
    create?: XOR<CandidateCreateWithoutPsychologicalAssessmentsInput, CandidateUncheckedCreateWithoutPsychologicalAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutPsychologicalAssessmentsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutPsychologicalAssessmentsNestedInput = {
    create?: XOR<CandidateCreateWithoutPsychologicalAssessmentsInput, CandidateUncheckedCreateWithoutPsychologicalAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutPsychologicalAssessmentsInput
    upsert?: CandidateUpsertWithoutPsychologicalAssessmentsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutPsychologicalAssessmentsInput, CandidateUpdateWithoutPsychologicalAssessmentsInput>, CandidateUncheckedUpdateWithoutPsychologicalAssessmentsInput>
  }

  export type CandidateCreateNestedOneWithoutLanguageAssessmentsInput = {
    create?: XOR<CandidateCreateWithoutLanguageAssessmentsInput, CandidateUncheckedCreateWithoutLanguageAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutLanguageAssessmentsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutLanguageAssessmentsNestedInput = {
    create?: XOR<CandidateCreateWithoutLanguageAssessmentsInput, CandidateUncheckedCreateWithoutLanguageAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutLanguageAssessmentsInput
    upsert?: CandidateUpsertWithoutLanguageAssessmentsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutLanguageAssessmentsInput, CandidateUpdateWithoutLanguageAssessmentsInput>, CandidateUncheckedUpdateWithoutLanguageAssessmentsInput>
  }

  export type CandidateCreateNestedOneWithoutProfessionalAssessmentsInput = {
    create?: XOR<CandidateCreateWithoutProfessionalAssessmentsInput, CandidateUncheckedCreateWithoutProfessionalAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutProfessionalAssessmentsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutProfessionalAssessmentsNestedInput = {
    create?: XOR<CandidateCreateWithoutProfessionalAssessmentsInput, CandidateUncheckedCreateWithoutProfessionalAssessmentsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutProfessionalAssessmentsInput
    upsert?: CandidateUpsertWithoutProfessionalAssessmentsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutProfessionalAssessmentsInput, CandidateUpdateWithoutProfessionalAssessmentsInput>, CandidateUncheckedUpdateWithoutProfessionalAssessmentsInput>
  }

  export type CandidateCreateNestedOneWithoutInterviewSessionsInput = {
    create?: XOR<CandidateCreateWithoutInterviewSessionsInput, CandidateUncheckedCreateWithoutInterviewSessionsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutInterviewSessionsInput
    connect?: CandidateWhereUniqueInput
  }

  export type ApplicationCreateNestedOneWithoutInterviewSessionsInput = {
    create?: XOR<ApplicationCreateWithoutInterviewSessionsInput, ApplicationUncheckedCreateWithoutInterviewSessionsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInterviewSessionsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutInterviewSessionsNestedInput = {
    create?: XOR<CandidateCreateWithoutInterviewSessionsInput, CandidateUncheckedCreateWithoutInterviewSessionsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutInterviewSessionsInput
    upsert?: CandidateUpsertWithoutInterviewSessionsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutInterviewSessionsInput, CandidateUpdateWithoutInterviewSessionsInput>, CandidateUncheckedUpdateWithoutInterviewSessionsInput>
  }

  export type ApplicationUpdateOneWithoutInterviewSessionsNestedInput = {
    create?: XOR<ApplicationCreateWithoutInterviewSessionsInput, ApplicationUncheckedCreateWithoutInterviewSessionsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInterviewSessionsInput
    upsert?: ApplicationUpsertWithoutInterviewSessionsInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutInterviewSessionsInput, ApplicationUpdateWithoutInterviewSessionsInput>, ApplicationUncheckedUpdateWithoutInterviewSessionsInput>
  }

  export type CandidateCreateNestedOneWithoutOnboardingRecordsInput = {
    create?: XOR<CandidateCreateWithoutOnboardingRecordsInput, CandidateUncheckedCreateWithoutOnboardingRecordsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutOnboardingRecordsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutOnboardingRecordsInput = {
    create?: XOR<CompanyCreateWithoutOnboardingRecordsInput, CompanyUncheckedCreateWithoutOnboardingRecordsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOnboardingRecordsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutOnboardingRecordsNestedInput = {
    create?: XOR<CandidateCreateWithoutOnboardingRecordsInput, CandidateUncheckedCreateWithoutOnboardingRecordsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutOnboardingRecordsInput
    upsert?: CandidateUpsertWithoutOnboardingRecordsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutOnboardingRecordsInput, CandidateUpdateWithoutOnboardingRecordsInput>, CandidateUncheckedUpdateWithoutOnboardingRecordsInput>
  }

  export type CompanyUpdateOneRequiredWithoutOnboardingRecordsNestedInput = {
    create?: XOR<CompanyCreateWithoutOnboardingRecordsInput, CompanyUncheckedCreateWithoutOnboardingRecordsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOnboardingRecordsInput
    upsert?: CompanyUpsertWithoutOnboardingRecordsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutOnboardingRecordsInput, CompanyUpdateWithoutOnboardingRecordsInput>, CompanyUncheckedUpdateWithoutOnboardingRecordsInput>
  }

  export type CandidateCreateNestedOneWithoutPerformanceReviewsInput = {
    create?: XOR<CandidateCreateWithoutPerformanceReviewsInput, CandidateUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutPerformanceReviewsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutPerformanceReviewsInput = {
    create?: XOR<CompanyCreateWithoutPerformanceReviewsInput, CompanyUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPerformanceReviewsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutPerformanceReviewsNestedInput = {
    create?: XOR<CandidateCreateWithoutPerformanceReviewsInput, CandidateUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutPerformanceReviewsInput
    upsert?: CandidateUpsertWithoutPerformanceReviewsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutPerformanceReviewsInput, CandidateUpdateWithoutPerformanceReviewsInput>, CandidateUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type CompanyUpdateOneRequiredWithoutPerformanceReviewsNestedInput = {
    create?: XOR<CompanyCreateWithoutPerformanceReviewsInput, CompanyUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPerformanceReviewsInput
    upsert?: CompanyUpsertWithoutPerformanceReviewsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutPerformanceReviewsInput, CompanyUpdateWithoutPerformanceReviewsInput>, CompanyUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type CandidateCreateNestedOneWithoutStatusHistoryInput = {
    create?: XOR<CandidateCreateWithoutStatusHistoryInput, CandidateUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutStatusHistoryInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutStatusHistoryNestedInput = {
    create?: XOR<CandidateCreateWithoutStatusHistoryInput, CandidateUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutStatusHistoryInput
    upsert?: CandidateUpsertWithoutStatusHistoryInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutStatusHistoryInput, CandidateUpdateWithoutStatusHistoryInput>, CandidateUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type CandidateCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<CompanyCreateWithoutApplicationsInput, CompanyUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutApplicationsInput
    connect?: CompanyWhereUniqueInput
  }

  export type JobPostingCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutApplicationsInput
    connect?: JobPostingWhereUniqueInput
  }

  export type InterviewSessionCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewSessionCreateWithoutApplicationInput, InterviewSessionUncheckedCreateWithoutApplicationInput> | InterviewSessionCreateWithoutApplicationInput[] | InterviewSessionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutApplicationInput | InterviewSessionCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewSessionCreateManyApplicationInputEnvelope
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
  }

  export type InterviewSessionUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewSessionCreateWithoutApplicationInput, InterviewSessionUncheckedCreateWithoutApplicationInput> | InterviewSessionCreateWithoutApplicationInput[] | InterviewSessionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutApplicationInput | InterviewSessionCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewSessionCreateManyApplicationInputEnvelope
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
  }

  export type EnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus
  }

  export type CandidateUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    upsert?: CandidateUpsertWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutApplicationsInput, CandidateUpdateWithoutApplicationsInput>, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type CompanyUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<CompanyCreateWithoutApplicationsInput, CompanyUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutApplicationsInput
    upsert?: CompanyUpsertWithoutApplicationsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutApplicationsInput, CompanyUpdateWithoutApplicationsInput>, CompanyUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobPostingUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobPostingCreateOrConnectWithoutApplicationsInput
    upsert?: JobPostingUpsertWithoutApplicationsInput
    connect?: JobPostingWhereUniqueInput
    update?: XOR<XOR<JobPostingUpdateToOneWithWhereWithoutApplicationsInput, JobPostingUpdateWithoutApplicationsInput>, JobPostingUncheckedUpdateWithoutApplicationsInput>
  }

  export type InterviewSessionUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewSessionCreateWithoutApplicationInput, InterviewSessionUncheckedCreateWithoutApplicationInput> | InterviewSessionCreateWithoutApplicationInput[] | InterviewSessionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutApplicationInput | InterviewSessionCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewSessionUpsertWithWhereUniqueWithoutApplicationInput | InterviewSessionUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewSessionCreateManyApplicationInputEnvelope
    set?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    disconnect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    delete?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    update?: InterviewSessionUpdateWithWhereUniqueWithoutApplicationInput | InterviewSessionUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewSessionUpdateManyWithWhereWithoutApplicationInput | InterviewSessionUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewSessionScalarWhereInput | InterviewSessionScalarWhereInput[]
  }

  export type InterviewSessionUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewSessionCreateWithoutApplicationInput, InterviewSessionUncheckedCreateWithoutApplicationInput> | InterviewSessionCreateWithoutApplicationInput[] | InterviewSessionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewSessionCreateOrConnectWithoutApplicationInput | InterviewSessionCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewSessionUpsertWithWhereUniqueWithoutApplicationInput | InterviewSessionUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewSessionCreateManyApplicationInputEnvelope
    set?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    disconnect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    delete?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    connect?: InterviewSessionWhereUniqueInput | InterviewSessionWhereUniqueInput[]
    update?: InterviewSessionUpdateWithWhereUniqueWithoutApplicationInput | InterviewSessionUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewSessionUpdateManyWithWhereWithoutApplicationInput | InterviewSessionUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewSessionScalarWhereInput | InterviewSessionScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCandidateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusFilter<$PrismaModel> | $Enums.CandidateStatus
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel> | $Enums.CandidateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCandidateStatusFilter<$PrismaModel>
    _max?: NestedEnumCandidateStatusFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumPostingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostingStatus | EnumPostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostingStatusFilter<$PrismaModel> | $Enums.PostingStatus
  }

  export type NestedEnumPostingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostingStatus | EnumPostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostingStatus[] | ListEnumPostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostingStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostingStatusFilter<$PrismaModel>
    _max?: NestedEnumPostingStatusFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type ApplicationCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    company: CompanyCreateNestedOneWithoutApplicationsInput
    jobPosting: JobPostingCreateNestedOneWithoutApplicationsInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    jobPostingId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationCreateManyCandidateInputEnvelope = {
    data: ApplicationCreateManyCandidateInput | ApplicationCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type CulturalAssessmentCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore?: number
    kaizenImprovementScore?: number
    omotenashiServiceScore?: number
    bushidoDedicationScore?: number
    nemawashiConsensusScore?: number
    honneTatemaeBalance?: number
    indirectCommunication?: number
    nonverbalAwareness?: number
    silenceComfort?: number
    contextualUnderstanding?: number
    senpaiKohaiRespect?: number
    authorityRecognition?: number
    formalityAdherence?: number
    statusAwareness?: number
    hierarchyNavigation?: number
    groupHarmonyPriority?: number
    collectiveDecisionMaking?: number
    consensusBuilding?: number
    teamLoyalty?: number
    groupAccountability?: number
    dedicationToWork?: number
    qualityFocus?: number
    continuousImprovement?: number
    attentionToDetail?: number
    processAdherence?: number
    punctualityImportance?: number
    timeRespect?: number
    scheduleAdherence?: number
    planningOrientation?: number
    deadlineCommitment?: number
    relationshipInvestment?: number
    trustBuilding?: number
    longTermOrientation?: number
    loyaltyDemonstration?: number
    networkMaintenance?: number
    changeAcceptance?: number
    flexibilityInApproach?: number
    learningOrientation?: number
    culturalAdaptability?: number
    resilienceInChallenges?: number
    professionalEtiquette?: number
    businessCardProtocol?: number
    meetingParticipation?: number
    presentationSkills?: number
    clientServiceOrientation?: number
    creativeThinking?: number
    innovationBalance?: number
    riskAssessment?: number
    dimensionScores?: string | null
    culturalTrainingNeeded?: string | null
    assessmentNotes?: string | null
  }

  export type CulturalAssessmentUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore?: number
    kaizenImprovementScore?: number
    omotenashiServiceScore?: number
    bushidoDedicationScore?: number
    nemawashiConsensusScore?: number
    honneTatemaeBalance?: number
    indirectCommunication?: number
    nonverbalAwareness?: number
    silenceComfort?: number
    contextualUnderstanding?: number
    senpaiKohaiRespect?: number
    authorityRecognition?: number
    formalityAdherence?: number
    statusAwareness?: number
    hierarchyNavigation?: number
    groupHarmonyPriority?: number
    collectiveDecisionMaking?: number
    consensusBuilding?: number
    teamLoyalty?: number
    groupAccountability?: number
    dedicationToWork?: number
    qualityFocus?: number
    continuousImprovement?: number
    attentionToDetail?: number
    processAdherence?: number
    punctualityImportance?: number
    timeRespect?: number
    scheduleAdherence?: number
    planningOrientation?: number
    deadlineCommitment?: number
    relationshipInvestment?: number
    trustBuilding?: number
    longTermOrientation?: number
    loyaltyDemonstration?: number
    networkMaintenance?: number
    changeAcceptance?: number
    flexibilityInApproach?: number
    learningOrientation?: number
    culturalAdaptability?: number
    resilienceInChallenges?: number
    professionalEtiquette?: number
    businessCardProtocol?: number
    meetingParticipation?: number
    presentationSkills?: number
    clientServiceOrientation?: number
    creativeThinking?: number
    innovationBalance?: number
    riskAssessment?: number
    dimensionScores?: string | null
    culturalTrainingNeeded?: string | null
    assessmentNotes?: string | null
  }

  export type CulturalAssessmentCreateOrConnectWithoutCandidateInput = {
    where: CulturalAssessmentWhereUniqueInput
    create: XOR<CulturalAssessmentCreateWithoutCandidateInput, CulturalAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type CulturalAssessmentCreateManyCandidateInputEnvelope = {
    data: CulturalAssessmentCreateManyCandidateInput | CulturalAssessmentCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type PsychologicalAssessmentCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    openness?: number | null
    conscientiousness?: number | null
    extraversion?: number | null
    agreeableness?: number | null
    neuroticism?: number | null
    logicalReasoning?: number | null
    numericalAbility?: number | null
    verbalAbility?: number | null
    spatialAbility?: number | null
    memoryCapacity?: number | null
    selfAwareness?: number | null
    selfRegulation?: number | null
    motivation?: number | null
    empathy?: number | null
    socialSkills?: number | null
    stressResilience?: number | null
    teamworkAbility?: number | null
    leadershipPotential?: number | null
    adaptability?: number | null
    problemSolving?: number | null
    overallScore: number
    recommendations?: string | null
    assessmentNotes?: string | null
  }

  export type PsychologicalAssessmentUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    openness?: number | null
    conscientiousness?: number | null
    extraversion?: number | null
    agreeableness?: number | null
    neuroticism?: number | null
    logicalReasoning?: number | null
    numericalAbility?: number | null
    verbalAbility?: number | null
    spatialAbility?: number | null
    memoryCapacity?: number | null
    selfAwareness?: number | null
    selfRegulation?: number | null
    motivation?: number | null
    empathy?: number | null
    socialSkills?: number | null
    stressResilience?: number | null
    teamworkAbility?: number | null
    leadershipPotential?: number | null
    adaptability?: number | null
    problemSolving?: number | null
    overallScore: number
    recommendations?: string | null
    assessmentNotes?: string | null
  }

  export type PsychologicalAssessmentCreateOrConnectWithoutCandidateInput = {
    where: PsychologicalAssessmentWhereUniqueInput
    create: XOR<PsychologicalAssessmentCreateWithoutCandidateInput, PsychologicalAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type PsychologicalAssessmentCreateManyCandidateInputEnvelope = {
    data: PsychologicalAssessmentCreateManyCandidateInput | PsychologicalAssessmentCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type LanguageAssessmentCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language: string
    assessmentDate?: Date | string
    assessmentType: string
    speakingLevel: string
    listeningLevel: string
    readingLevel: string
    writingLevel: string
    overallScore: number
    speakingScore?: number | null
    listeningScore?: number | null
    readingScore?: number | null
    writingScore?: number | null
    businessCommunication?: number | null
    technicalVocabulary?: number | null
    presentationSkills?: number | null
    negotiationSkills?: number | null
    certificationLevel?: string | null
    certificationDate?: Date | string | null
    assessmentNotes?: string | null
  }

  export type LanguageAssessmentUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language: string
    assessmentDate?: Date | string
    assessmentType: string
    speakingLevel: string
    listeningLevel: string
    readingLevel: string
    writingLevel: string
    overallScore: number
    speakingScore?: number | null
    listeningScore?: number | null
    readingScore?: number | null
    writingScore?: number | null
    businessCommunication?: number | null
    technicalVocabulary?: number | null
    presentationSkills?: number | null
    negotiationSkills?: number | null
    certificationLevel?: string | null
    certificationDate?: Date | string | null
    assessmentNotes?: string | null
  }

  export type LanguageAssessmentCreateOrConnectWithoutCandidateInput = {
    where: LanguageAssessmentWhereUniqueInput
    create: XOR<LanguageAssessmentCreateWithoutCandidateInput, LanguageAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type LanguageAssessmentCreateManyCandidateInputEnvelope = {
    data: LanguageAssessmentCreateManyCandidateInput | LanguageAssessmentCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalAssessmentCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    technicalProficiency?: number | null
    toolsAndTechnologies?: string | null
    industryKnowledge?: number | null
    problemSolvingAbility?: number | null
    innovationCapability?: number | null
    projectManagement?: number | null
    teamLeadership?: number | null
    clientManagement?: number | null
    strategicThinking?: number | null
    analyticalSkills?: number | null
    domainExpertise?: number | null
    regulatoryKnowledge?: number | null
    marketUnderstanding?: number | null
    competitorAwareness?: number | null
    overallScore: number
    skillGaps?: string | null
    developmentPlan?: string | null
    assessmentNotes?: string | null
  }

  export type ProfessionalAssessmentUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    technicalProficiency?: number | null
    toolsAndTechnologies?: string | null
    industryKnowledge?: number | null
    problemSolvingAbility?: number | null
    innovationCapability?: number | null
    projectManagement?: number | null
    teamLeadership?: number | null
    clientManagement?: number | null
    strategicThinking?: number | null
    analyticalSkills?: number | null
    domainExpertise?: number | null
    regulatoryKnowledge?: number | null
    marketUnderstanding?: number | null
    competitorAwareness?: number | null
    overallScore: number
    skillGaps?: string | null
    developmentPlan?: string | null
    assessmentNotes?: string | null
  }

  export type ProfessionalAssessmentCreateOrConnectWithoutCandidateInput = {
    where: ProfessionalAssessmentWhereUniqueInput
    create: XOR<ProfessionalAssessmentCreateWithoutCandidateInput, ProfessionalAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type ProfessionalAssessmentCreateManyCandidateInputEnvelope = {
    data: ProfessionalAssessmentCreateManyCandidateInput | ProfessionalAssessmentCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type InterviewSessionCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
    application?: ApplicationCreateNestedOneWithoutInterviewSessionsInput
  }

  export type InterviewSessionUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationId?: string | null
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
  }

  export type InterviewSessionCreateOrConnectWithoutCandidateInput = {
    where: InterviewSessionWhereUniqueInput
    create: XOR<InterviewSessionCreateWithoutCandidateInput, InterviewSessionUncheckedCreateWithoutCandidateInput>
  }

  export type InterviewSessionCreateManyCandidateInputEnvelope = {
    data: InterviewSessionCreateManyCandidateInput | InterviewSessionCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type OnboardingRecordCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
    company: CompanyCreateNestedOneWithoutOnboardingRecordsInput
  }

  export type OnboardingRecordUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
  }

  export type OnboardingRecordCreateOrConnectWithoutCandidateInput = {
    where: OnboardingRecordWhereUniqueInput
    create: XOR<OnboardingRecordCreateWithoutCandidateInput, OnboardingRecordUncheckedCreateWithoutCandidateInput>
  }

  export type OnboardingRecordCreateManyCandidateInputEnvelope = {
    data: OnboardingRecordCreateManyCandidateInput | OnboardingRecordCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceReviewCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
    company: CompanyCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
  }

  export type PerformanceReviewCreateOrConnectWithoutCandidateInput = {
    where: PerformanceReviewWhereUniqueInput
    create: XOR<PerformanceReviewCreateWithoutCandidateInput, PerformanceReviewUncheckedCreateWithoutCandidateInput>
  }

  export type PerformanceReviewCreateManyCandidateInputEnvelope = {
    data: PerformanceReviewCreateManyCandidateInput | PerformanceReviewCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type CandidateStatusHistoryCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    previousStatus: $Enums.CandidateStatus
    newStatus: $Enums.CandidateStatus
    changeReason?: string | null
    changedBy?: string | null
    notes?: string | null
  }

  export type CandidateStatusHistoryUncheckedCreateWithoutCandidateInput = {
    id?: string
    createdAt?: Date | string
    previousStatus: $Enums.CandidateStatus
    newStatus: $Enums.CandidateStatus
    changeReason?: string | null
    changedBy?: string | null
    notes?: string | null
  }

  export type CandidateStatusHistoryCreateOrConnectWithoutCandidateInput = {
    where: CandidateStatusHistoryWhereUniqueInput
    create: XOR<CandidateStatusHistoryCreateWithoutCandidateInput, CandidateStatusHistoryUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateStatusHistoryCreateManyCandidateInputEnvelope = {
    data: CandidateStatusHistoryCreateManyCandidateInput | CandidateStatusHistoryCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutCandidateInput, ApplicationUncheckedUpdateWithoutCandidateInput>
    create: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutCandidateInput, ApplicationUncheckedUpdateWithoutCandidateInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutCandidateInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutCandidateInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: StringFilter<"Application"> | string
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    candidateId?: StringFilter<"Application"> | string
    companyId?: StringFilter<"Application"> | string
    jobPostingId?: StringFilter<"Application"> | string
    applicationStatus?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    applicationDate?: DateTimeFilter<"Application"> | Date | string
    overallMatchScore?: FloatNullableFilter<"Application"> | number | null
    technicalMatchScore?: FloatNullableFilter<"Application"> | number | null
    culturalFitScore?: FloatNullableFilter<"Application"> | number | null
    languageMatchScore?: FloatNullableFilter<"Application"> | number | null
    experienceMatchScore?: FloatNullableFilter<"Application"> | number | null
    resumeUrl?: StringNullableFilter<"Application"> | string | null
    coverLetterUrl?: StringNullableFilter<"Application"> | string | null
    portfolioUrl?: StringNullableFilter<"Application"> | string | null
    finalDecision?: StringNullableFilter<"Application"> | string | null
    decisionDate?: DateTimeNullableFilter<"Application"> | Date | string | null
    decisionReason?: StringNullableFilter<"Application"> | string | null
    applicationNotes?: StringNullableFilter<"Application"> | string | null
  }

  export type CulturalAssessmentUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CulturalAssessmentWhereUniqueInput
    update: XOR<CulturalAssessmentUpdateWithoutCandidateInput, CulturalAssessmentUncheckedUpdateWithoutCandidateInput>
    create: XOR<CulturalAssessmentCreateWithoutCandidateInput, CulturalAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type CulturalAssessmentUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CulturalAssessmentWhereUniqueInput
    data: XOR<CulturalAssessmentUpdateWithoutCandidateInput, CulturalAssessmentUncheckedUpdateWithoutCandidateInput>
  }

  export type CulturalAssessmentUpdateManyWithWhereWithoutCandidateInput = {
    where: CulturalAssessmentScalarWhereInput
    data: XOR<CulturalAssessmentUpdateManyMutationInput, CulturalAssessmentUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CulturalAssessmentScalarWhereInput = {
    AND?: CulturalAssessmentScalarWhereInput | CulturalAssessmentScalarWhereInput[]
    OR?: CulturalAssessmentScalarWhereInput[]
    NOT?: CulturalAssessmentScalarWhereInput | CulturalAssessmentScalarWhereInput[]
    id?: StringFilter<"CulturalAssessment"> | string
    createdAt?: DateTimeFilter<"CulturalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"CulturalAssessment"> | Date | string
    candidateId?: StringFilter<"CulturalAssessment"> | string
    assessmentType?: StringFilter<"CulturalAssessment"> | string
    assessmentDate?: DateTimeFilter<"CulturalAssessment"> | Date | string
    overallScore?: FloatFilter<"CulturalAssessment"> | number
    culturalFitPrediction?: FloatFilter<"CulturalAssessment"> | number
    integrationTimelineDays?: IntFilter<"CulturalAssessment"> | number
    waHarmonyScore?: FloatFilter<"CulturalAssessment"> | number
    kaizenImprovementScore?: FloatFilter<"CulturalAssessment"> | number
    omotenashiServiceScore?: FloatFilter<"CulturalAssessment"> | number
    bushidoDedicationScore?: FloatFilter<"CulturalAssessment"> | number
    nemawashiConsensusScore?: FloatFilter<"CulturalAssessment"> | number
    honneTatemaeBalance?: FloatFilter<"CulturalAssessment"> | number
    indirectCommunication?: FloatFilter<"CulturalAssessment"> | number
    nonverbalAwareness?: FloatFilter<"CulturalAssessment"> | number
    silenceComfort?: FloatFilter<"CulturalAssessment"> | number
    contextualUnderstanding?: FloatFilter<"CulturalAssessment"> | number
    senpaiKohaiRespect?: FloatFilter<"CulturalAssessment"> | number
    authorityRecognition?: FloatFilter<"CulturalAssessment"> | number
    formalityAdherence?: FloatFilter<"CulturalAssessment"> | number
    statusAwareness?: FloatFilter<"CulturalAssessment"> | number
    hierarchyNavigation?: FloatFilter<"CulturalAssessment"> | number
    groupHarmonyPriority?: FloatFilter<"CulturalAssessment"> | number
    collectiveDecisionMaking?: FloatFilter<"CulturalAssessment"> | number
    consensusBuilding?: FloatFilter<"CulturalAssessment"> | number
    teamLoyalty?: FloatFilter<"CulturalAssessment"> | number
    groupAccountability?: FloatFilter<"CulturalAssessment"> | number
    dedicationToWork?: FloatFilter<"CulturalAssessment"> | number
    qualityFocus?: FloatFilter<"CulturalAssessment"> | number
    continuousImprovement?: FloatFilter<"CulturalAssessment"> | number
    attentionToDetail?: FloatFilter<"CulturalAssessment"> | number
    processAdherence?: FloatFilter<"CulturalAssessment"> | number
    punctualityImportance?: FloatFilter<"CulturalAssessment"> | number
    timeRespect?: FloatFilter<"CulturalAssessment"> | number
    scheduleAdherence?: FloatFilter<"CulturalAssessment"> | number
    planningOrientation?: FloatFilter<"CulturalAssessment"> | number
    deadlineCommitment?: FloatFilter<"CulturalAssessment"> | number
    relationshipInvestment?: FloatFilter<"CulturalAssessment"> | number
    trustBuilding?: FloatFilter<"CulturalAssessment"> | number
    longTermOrientation?: FloatFilter<"CulturalAssessment"> | number
    loyaltyDemonstration?: FloatFilter<"CulturalAssessment"> | number
    networkMaintenance?: FloatFilter<"CulturalAssessment"> | number
    changeAcceptance?: FloatFilter<"CulturalAssessment"> | number
    flexibilityInApproach?: FloatFilter<"CulturalAssessment"> | number
    learningOrientation?: FloatFilter<"CulturalAssessment"> | number
    culturalAdaptability?: FloatFilter<"CulturalAssessment"> | number
    resilienceInChallenges?: FloatFilter<"CulturalAssessment"> | number
    professionalEtiquette?: FloatFilter<"CulturalAssessment"> | number
    businessCardProtocol?: FloatFilter<"CulturalAssessment"> | number
    meetingParticipation?: FloatFilter<"CulturalAssessment"> | number
    presentationSkills?: FloatFilter<"CulturalAssessment"> | number
    clientServiceOrientation?: FloatFilter<"CulturalAssessment"> | number
    creativeThinking?: FloatFilter<"CulturalAssessment"> | number
    innovationBalance?: FloatFilter<"CulturalAssessment"> | number
    riskAssessment?: FloatFilter<"CulturalAssessment"> | number
    dimensionScores?: StringNullableFilter<"CulturalAssessment"> | string | null
    culturalTrainingNeeded?: StringNullableFilter<"CulturalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"CulturalAssessment"> | string | null
  }

  export type PsychologicalAssessmentUpsertWithWhereUniqueWithoutCandidateInput = {
    where: PsychologicalAssessmentWhereUniqueInput
    update: XOR<PsychologicalAssessmentUpdateWithoutCandidateInput, PsychologicalAssessmentUncheckedUpdateWithoutCandidateInput>
    create: XOR<PsychologicalAssessmentCreateWithoutCandidateInput, PsychologicalAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type PsychologicalAssessmentUpdateWithWhereUniqueWithoutCandidateInput = {
    where: PsychologicalAssessmentWhereUniqueInput
    data: XOR<PsychologicalAssessmentUpdateWithoutCandidateInput, PsychologicalAssessmentUncheckedUpdateWithoutCandidateInput>
  }

  export type PsychologicalAssessmentUpdateManyWithWhereWithoutCandidateInput = {
    where: PsychologicalAssessmentScalarWhereInput
    data: XOR<PsychologicalAssessmentUpdateManyMutationInput, PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateInput>
  }

  export type PsychologicalAssessmentScalarWhereInput = {
    AND?: PsychologicalAssessmentScalarWhereInput | PsychologicalAssessmentScalarWhereInput[]
    OR?: PsychologicalAssessmentScalarWhereInput[]
    NOT?: PsychologicalAssessmentScalarWhereInput | PsychologicalAssessmentScalarWhereInput[]
    id?: StringFilter<"PsychologicalAssessment"> | string
    createdAt?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    candidateId?: StringFilter<"PsychologicalAssessment"> | string
    assessmentType?: StringFilter<"PsychologicalAssessment"> | string
    assessmentDate?: DateTimeFilter<"PsychologicalAssessment"> | Date | string
    openness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    conscientiousness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    extraversion?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    agreeableness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    neuroticism?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    logicalReasoning?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    numericalAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    verbalAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    spatialAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    memoryCapacity?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    selfAwareness?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    selfRegulation?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    motivation?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    empathy?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    socialSkills?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    stressResilience?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    teamworkAbility?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    leadershipPotential?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    adaptability?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    problemSolving?: FloatNullableFilter<"PsychologicalAssessment"> | number | null
    overallScore?: FloatFilter<"PsychologicalAssessment"> | number
    recommendations?: StringNullableFilter<"PsychologicalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"PsychologicalAssessment"> | string | null
  }

  export type LanguageAssessmentUpsertWithWhereUniqueWithoutCandidateInput = {
    where: LanguageAssessmentWhereUniqueInput
    update: XOR<LanguageAssessmentUpdateWithoutCandidateInput, LanguageAssessmentUncheckedUpdateWithoutCandidateInput>
    create: XOR<LanguageAssessmentCreateWithoutCandidateInput, LanguageAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type LanguageAssessmentUpdateWithWhereUniqueWithoutCandidateInput = {
    where: LanguageAssessmentWhereUniqueInput
    data: XOR<LanguageAssessmentUpdateWithoutCandidateInput, LanguageAssessmentUncheckedUpdateWithoutCandidateInput>
  }

  export type LanguageAssessmentUpdateManyWithWhereWithoutCandidateInput = {
    where: LanguageAssessmentScalarWhereInput
    data: XOR<LanguageAssessmentUpdateManyMutationInput, LanguageAssessmentUncheckedUpdateManyWithoutCandidateInput>
  }

  export type LanguageAssessmentScalarWhereInput = {
    AND?: LanguageAssessmentScalarWhereInput | LanguageAssessmentScalarWhereInput[]
    OR?: LanguageAssessmentScalarWhereInput[]
    NOT?: LanguageAssessmentScalarWhereInput | LanguageAssessmentScalarWhereInput[]
    id?: StringFilter<"LanguageAssessment"> | string
    createdAt?: DateTimeFilter<"LanguageAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"LanguageAssessment"> | Date | string
    candidateId?: StringFilter<"LanguageAssessment"> | string
    language?: StringFilter<"LanguageAssessment"> | string
    assessmentDate?: DateTimeFilter<"LanguageAssessment"> | Date | string
    assessmentType?: StringFilter<"LanguageAssessment"> | string
    speakingLevel?: StringFilter<"LanguageAssessment"> | string
    listeningLevel?: StringFilter<"LanguageAssessment"> | string
    readingLevel?: StringFilter<"LanguageAssessment"> | string
    writingLevel?: StringFilter<"LanguageAssessment"> | string
    overallScore?: FloatFilter<"LanguageAssessment"> | number
    speakingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    listeningScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    readingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    writingScore?: FloatNullableFilter<"LanguageAssessment"> | number | null
    businessCommunication?: FloatNullableFilter<"LanguageAssessment"> | number | null
    technicalVocabulary?: FloatNullableFilter<"LanguageAssessment"> | number | null
    presentationSkills?: FloatNullableFilter<"LanguageAssessment"> | number | null
    negotiationSkills?: FloatNullableFilter<"LanguageAssessment"> | number | null
    certificationLevel?: StringNullableFilter<"LanguageAssessment"> | string | null
    certificationDate?: DateTimeNullableFilter<"LanguageAssessment"> | Date | string | null
    assessmentNotes?: StringNullableFilter<"LanguageAssessment"> | string | null
  }

  export type ProfessionalAssessmentUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ProfessionalAssessmentWhereUniqueInput
    update: XOR<ProfessionalAssessmentUpdateWithoutCandidateInput, ProfessionalAssessmentUncheckedUpdateWithoutCandidateInput>
    create: XOR<ProfessionalAssessmentCreateWithoutCandidateInput, ProfessionalAssessmentUncheckedCreateWithoutCandidateInput>
  }

  export type ProfessionalAssessmentUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ProfessionalAssessmentWhereUniqueInput
    data: XOR<ProfessionalAssessmentUpdateWithoutCandidateInput, ProfessionalAssessmentUncheckedUpdateWithoutCandidateInput>
  }

  export type ProfessionalAssessmentUpdateManyWithWhereWithoutCandidateInput = {
    where: ProfessionalAssessmentScalarWhereInput
    data: XOR<ProfessionalAssessmentUpdateManyMutationInput, ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateInput>
  }

  export type ProfessionalAssessmentScalarWhereInput = {
    AND?: ProfessionalAssessmentScalarWhereInput | ProfessionalAssessmentScalarWhereInput[]
    OR?: ProfessionalAssessmentScalarWhereInput[]
    NOT?: ProfessionalAssessmentScalarWhereInput | ProfessionalAssessmentScalarWhereInput[]
    id?: StringFilter<"ProfessionalAssessment"> | string
    createdAt?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    candidateId?: StringFilter<"ProfessionalAssessment"> | string
    assessmentType?: StringFilter<"ProfessionalAssessment"> | string
    assessmentDate?: DateTimeFilter<"ProfessionalAssessment"> | Date | string
    technicalProficiency?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    toolsAndTechnologies?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    industryKnowledge?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    problemSolvingAbility?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    innovationCapability?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    projectManagement?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    teamLeadership?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    clientManagement?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    strategicThinking?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    analyticalSkills?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    domainExpertise?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    regulatoryKnowledge?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    marketUnderstanding?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    competitorAwareness?: FloatNullableFilter<"ProfessionalAssessment"> | number | null
    overallScore?: FloatFilter<"ProfessionalAssessment"> | number
    skillGaps?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    developmentPlan?: StringNullableFilter<"ProfessionalAssessment"> | string | null
    assessmentNotes?: StringNullableFilter<"ProfessionalAssessment"> | string | null
  }

  export type InterviewSessionUpsertWithWhereUniqueWithoutCandidateInput = {
    where: InterviewSessionWhereUniqueInput
    update: XOR<InterviewSessionUpdateWithoutCandidateInput, InterviewSessionUncheckedUpdateWithoutCandidateInput>
    create: XOR<InterviewSessionCreateWithoutCandidateInput, InterviewSessionUncheckedCreateWithoutCandidateInput>
  }

  export type InterviewSessionUpdateWithWhereUniqueWithoutCandidateInput = {
    where: InterviewSessionWhereUniqueInput
    data: XOR<InterviewSessionUpdateWithoutCandidateInput, InterviewSessionUncheckedUpdateWithoutCandidateInput>
  }

  export type InterviewSessionUpdateManyWithWhereWithoutCandidateInput = {
    where: InterviewSessionScalarWhereInput
    data: XOR<InterviewSessionUpdateManyMutationInput, InterviewSessionUncheckedUpdateManyWithoutCandidateInput>
  }

  export type InterviewSessionScalarWhereInput = {
    AND?: InterviewSessionScalarWhereInput | InterviewSessionScalarWhereInput[]
    OR?: InterviewSessionScalarWhereInput[]
    NOT?: InterviewSessionScalarWhereInput | InterviewSessionScalarWhereInput[]
    id?: StringFilter<"InterviewSession"> | string
    createdAt?: DateTimeFilter<"InterviewSession"> | Date | string
    updatedAt?: DateTimeFilter<"InterviewSession"> | Date | string
    candidateId?: StringFilter<"InterviewSession"> | string
    applicationId?: StringNullableFilter<"InterviewSession"> | string | null
    interviewType?: StringFilter<"InterviewSession"> | string
    interviewRound?: IntFilter<"InterviewSession"> | number
    interviewDate?: DateTimeFilter<"InterviewSession"> | Date | string
    duration?: IntNullableFilter<"InterviewSession"> | number | null
    technicalScore?: FloatNullableFilter<"InterviewSession"> | number | null
    culturalFitScore?: FloatNullableFilter<"InterviewSession"> | number | null
    communicationScore?: FloatNullableFilter<"InterviewSession"> | number | null
    motivationScore?: FloatNullableFilter<"InterviewSession"> | number | null
    overallScore?: FloatFilter<"InterviewSession"> | number
    strengths?: StringNullableFilter<"InterviewSession"> | string | null
    weaknesses?: StringNullableFilter<"InterviewSession"> | string | null
    recommendations?: StringNullableFilter<"InterviewSession"> | string | null
    interviewNotes?: StringNullableFilter<"InterviewSession"> | string | null
    recommendation?: StringFilter<"InterviewSession"> | string
    interviewerName?: StringNullableFilter<"InterviewSession"> | string | null
    interviewerRole?: StringNullableFilter<"InterviewSession"> | string | null
  }

  export type OnboardingRecordUpsertWithWhereUniqueWithoutCandidateInput = {
    where: OnboardingRecordWhereUniqueInput
    update: XOR<OnboardingRecordUpdateWithoutCandidateInput, OnboardingRecordUncheckedUpdateWithoutCandidateInput>
    create: XOR<OnboardingRecordCreateWithoutCandidateInput, OnboardingRecordUncheckedCreateWithoutCandidateInput>
  }

  export type OnboardingRecordUpdateWithWhereUniqueWithoutCandidateInput = {
    where: OnboardingRecordWhereUniqueInput
    data: XOR<OnboardingRecordUpdateWithoutCandidateInput, OnboardingRecordUncheckedUpdateWithoutCandidateInput>
  }

  export type OnboardingRecordUpdateManyWithWhereWithoutCandidateInput = {
    where: OnboardingRecordScalarWhereInput
    data: XOR<OnboardingRecordUpdateManyMutationInput, OnboardingRecordUncheckedUpdateManyWithoutCandidateInput>
  }

  export type OnboardingRecordScalarWhereInput = {
    AND?: OnboardingRecordScalarWhereInput | OnboardingRecordScalarWhereInput[]
    OR?: OnboardingRecordScalarWhereInput[]
    NOT?: OnboardingRecordScalarWhereInput | OnboardingRecordScalarWhereInput[]
    id?: StringFilter<"OnboardingRecord"> | string
    createdAt?: DateTimeFilter<"OnboardingRecord"> | Date | string
    updatedAt?: DateTimeFilter<"OnboardingRecord"> | Date | string
    candidateId?: StringFilter<"OnboardingRecord"> | string
    companyId?: StringFilter<"OnboardingRecord"> | string
    startDate?: DateTimeFilter<"OnboardingRecord"> | Date | string
    onboardingStatus?: StringFilter<"OnboardingRecord"> | string
    documentationComplete?: BoolFilter<"OnboardingRecord"> | boolean
    systemAccessGranted?: BoolFilter<"OnboardingRecord"> | boolean
    trainingCompleted?: BoolFilter<"OnboardingRecord"> | boolean
    culturalOrientationDone?: BoolFilter<"OnboardingRecord"> | boolean
    mentorAssigned?: BoolFilter<"OnboardingRecord"> | boolean
    culturalAdaptationScore?: FloatNullableFilter<"OnboardingRecord"> | number | null
    integrationChallenges?: StringNullableFilter<"OnboardingRecord"> | string | null
    supportProvided?: StringNullableFilter<"OnboardingRecord"> | string | null
    expectedCompletionDate?: DateTimeNullableFilter<"OnboardingRecord"> | Date | string | null
    actualCompletionDate?: DateTimeNullableFilter<"OnboardingRecord"> | Date | string | null
    onboardingNotes?: StringNullableFilter<"OnboardingRecord"> | string | null
  }

  export type PerformanceReviewUpsertWithWhereUniqueWithoutCandidateInput = {
    where: PerformanceReviewWhereUniqueInput
    update: XOR<PerformanceReviewUpdateWithoutCandidateInput, PerformanceReviewUncheckedUpdateWithoutCandidateInput>
    create: XOR<PerformanceReviewCreateWithoutCandidateInput, PerformanceReviewUncheckedCreateWithoutCandidateInput>
  }

  export type PerformanceReviewUpdateWithWhereUniqueWithoutCandidateInput = {
    where: PerformanceReviewWhereUniqueInput
    data: XOR<PerformanceReviewUpdateWithoutCandidateInput, PerformanceReviewUncheckedUpdateWithoutCandidateInput>
  }

  export type PerformanceReviewUpdateManyWithWhereWithoutCandidateInput = {
    where: PerformanceReviewScalarWhereInput
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyWithoutCandidateInput>
  }

  export type PerformanceReviewScalarWhereInput = {
    AND?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
    OR?: PerformanceReviewScalarWhereInput[]
    NOT?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
    id?: StringFilter<"PerformanceReview"> | string
    createdAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    candidateId?: StringFilter<"PerformanceReview"> | string
    companyId?: StringFilter<"PerformanceReview"> | string
    reviewPeriod?: StringFilter<"PerformanceReview"> | string
    reviewDate?: DateTimeFilter<"PerformanceReview"> | Date | string
    reviewType?: StringFilter<"PerformanceReview"> | string
    technicalPerformance?: FloatNullableFilter<"PerformanceReview"> | number | null
    culturalIntegration?: FloatNullableFilter<"PerformanceReview"> | number | null
    teamCollaboration?: FloatNullableFilter<"PerformanceReview"> | number | null
    communicationSkills?: FloatNullableFilter<"PerformanceReview"> | number | null
    goalAchievement?: FloatNullableFilter<"PerformanceReview"> | number | null
    overallPerformance?: FloatFilter<"PerformanceReview"> | number
    culturalFitImprovement?: FloatNullableFilter<"PerformanceReview"> | number | null
    japaneseBusinessEtiquette?: FloatNullableFilter<"PerformanceReview"> | number | null
    teamHarmonyContribution?: FloatNullableFilter<"PerformanceReview"> | number | null
    achievements?: StringNullableFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableFilter<"PerformanceReview"> | string | null
    developmentGoals?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewerName?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewerRole?: StringNullableFilter<"PerformanceReview"> | string | null
    reviewNotes?: StringNullableFilter<"PerformanceReview"> | string | null
  }

  export type CandidateStatusHistoryUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CandidateStatusHistoryWhereUniqueInput
    update: XOR<CandidateStatusHistoryUpdateWithoutCandidateInput, CandidateStatusHistoryUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidateStatusHistoryCreateWithoutCandidateInput, CandidateStatusHistoryUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateStatusHistoryUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CandidateStatusHistoryWhereUniqueInput
    data: XOR<CandidateStatusHistoryUpdateWithoutCandidateInput, CandidateStatusHistoryUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidateStatusHistoryUpdateManyWithWhereWithoutCandidateInput = {
    where: CandidateStatusHistoryScalarWhereInput
    data: XOR<CandidateStatusHistoryUpdateManyMutationInput, CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CandidateStatusHistoryScalarWhereInput = {
    AND?: CandidateStatusHistoryScalarWhereInput | CandidateStatusHistoryScalarWhereInput[]
    OR?: CandidateStatusHistoryScalarWhereInput[]
    NOT?: CandidateStatusHistoryScalarWhereInput | CandidateStatusHistoryScalarWhereInput[]
    id?: StringFilter<"CandidateStatusHistory"> | string
    createdAt?: DateTimeFilter<"CandidateStatusHistory"> | Date | string
    candidateId?: StringFilter<"CandidateStatusHistory"> | string
    previousStatus?: EnumCandidateStatusFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFilter<"CandidateStatusHistory"> | $Enums.CandidateStatus
    changeReason?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    changedBy?: StringNullableFilter<"CandidateStatusHistory"> | string | null
    notes?: StringNullableFilter<"CandidateStatusHistory"> | string | null
  }

  export type JobPostingCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
    applications?: ApplicationCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingUncheckedCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobPostingInput
  }

  export type JobPostingCreateOrConnectWithoutCompanyInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput>
  }

  export type JobPostingCreateManyCompanyInputEnvelope = {
    data: JobPostingCreateManyCompanyInput | JobPostingCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    jobPosting: JobPostingCreateNestedOneWithoutApplicationsInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    jobPostingId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutCompanyInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCompanyInput, ApplicationUncheckedCreateWithoutCompanyInput>
  }

  export type ApplicationCreateManyCompanyInputEnvelope = {
    data: ApplicationCreateManyCompanyInput | ApplicationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type OnboardingRecordCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutOnboardingRecordsInput
  }

  export type OnboardingRecordUncheckedCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
  }

  export type OnboardingRecordCreateOrConnectWithoutCompanyInput = {
    where: OnboardingRecordWhereUniqueInput
    create: XOR<OnboardingRecordCreateWithoutCompanyInput, OnboardingRecordUncheckedCreateWithoutCompanyInput>
  }

  export type OnboardingRecordCreateManyCompanyInputEnvelope = {
    data: OnboardingRecordCreateManyCompanyInput | OnboardingRecordCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceReviewCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
  }

  export type PerformanceReviewCreateOrConnectWithoutCompanyInput = {
    where: PerformanceReviewWhereUniqueInput
    create: XOR<PerformanceReviewCreateWithoutCompanyInput, PerformanceReviewUncheckedCreateWithoutCompanyInput>
  }

  export type PerformanceReviewCreateManyCompanyInputEnvelope = {
    data: PerformanceReviewCreateManyCompanyInput | PerformanceReviewCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type JobPostingUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobPostingWhereUniqueInput
    update: XOR<JobPostingUpdateWithoutCompanyInput, JobPostingUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobPostingCreateWithoutCompanyInput, JobPostingUncheckedCreateWithoutCompanyInput>
  }

  export type JobPostingUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobPostingWhereUniqueInput
    data: XOR<JobPostingUpdateWithoutCompanyInput, JobPostingUncheckedUpdateWithoutCompanyInput>
  }

  export type JobPostingUpdateManyWithWhereWithoutCompanyInput = {
    where: JobPostingScalarWhereInput
    data: XOR<JobPostingUpdateManyMutationInput, JobPostingUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobPostingScalarWhereInput = {
    AND?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
    OR?: JobPostingScalarWhereInput[]
    NOT?: JobPostingScalarWhereInput | JobPostingScalarWhereInput[]
    id?: StringFilter<"JobPosting"> | string
    createdAt?: DateTimeFilter<"JobPosting"> | Date | string
    updatedAt?: DateTimeFilter<"JobPosting"> | Date | string
    jobTitle?: StringFilter<"JobPosting"> | string
    department?: StringNullableFilter<"JobPosting"> | string | null
    location?: StringFilter<"JobPosting"> | string
    employmentType?: StringFilter<"JobPosting"> | string
    experienceLevel?: StringFilter<"JobPosting"> | string
    jobDescription?: StringFilter<"JobPosting"> | string
    responsibilities?: StringNullableFilter<"JobPosting"> | string | null
    requirements?: StringNullableFilter<"JobPosting"> | string | null
    qualifications?: StringNullableFilter<"JobPosting"> | string | null
    technicalSkills?: StringNullableFilter<"JobPosting"> | string | null
    salaryRangeMinimum?: IntNullableFilter<"JobPosting"> | number | null
    salaryRangeMaximum?: IntNullableFilter<"JobPosting"> | number | null
    benefits?: StringNullableFilter<"JobPosting"> | string | null
    bonusStructure?: StringNullableFilter<"JobPosting"> | string | null
    culturalFitRequirements?: StringNullableFilter<"JobPosting"> | string | null
    languageRequirements?: StringNullableFilter<"JobPosting"> | string | null
    communicationStyle?: StringNullableFilter<"JobPosting"> | string | null
    teamworkExpectation?: StringNullableFilter<"JobPosting"> | string | null
    leadershipExpectation?: StringNullableFilter<"JobPosting"> | string | null
    waHarmonyRequired?: FloatNullableFilter<"JobPosting"> | number | null
    kaizenParticipation?: FloatNullableFilter<"JobPosting"> | number | null
    omotenashiExpectation?: FloatNullableFilter<"JobPosting"> | number | null
    hierarchyRespect?: FloatNullableFilter<"JobPosting"> | number | null
    consensusBuilding?: FloatNullableFilter<"JobPosting"> | number | null
    postingStatus?: EnumPostingStatusFilter<"JobPosting"> | $Enums.PostingStatus
    applicationDeadline?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    startDate?: DateTimeNullableFilter<"JobPosting"> | Date | string | null
    urgencyLevel?: StringNullableFilter<"JobPosting"> | string | null
    companyId?: StringFilter<"JobPosting"> | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutCompanyInput, ApplicationUncheckedUpdateWithoutCompanyInput>
    create: XOR<ApplicationCreateWithoutCompanyInput, ApplicationUncheckedCreateWithoutCompanyInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutCompanyInput, ApplicationUncheckedUpdateWithoutCompanyInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutCompanyInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type OnboardingRecordUpsertWithWhereUniqueWithoutCompanyInput = {
    where: OnboardingRecordWhereUniqueInput
    update: XOR<OnboardingRecordUpdateWithoutCompanyInput, OnboardingRecordUncheckedUpdateWithoutCompanyInput>
    create: XOR<OnboardingRecordCreateWithoutCompanyInput, OnboardingRecordUncheckedCreateWithoutCompanyInput>
  }

  export type OnboardingRecordUpdateWithWhereUniqueWithoutCompanyInput = {
    where: OnboardingRecordWhereUniqueInput
    data: XOR<OnboardingRecordUpdateWithoutCompanyInput, OnboardingRecordUncheckedUpdateWithoutCompanyInput>
  }

  export type OnboardingRecordUpdateManyWithWhereWithoutCompanyInput = {
    where: OnboardingRecordScalarWhereInput
    data: XOR<OnboardingRecordUpdateManyMutationInput, OnboardingRecordUncheckedUpdateManyWithoutCompanyInput>
  }

  export type PerformanceReviewUpsertWithWhereUniqueWithoutCompanyInput = {
    where: PerformanceReviewWhereUniqueInput
    update: XOR<PerformanceReviewUpdateWithoutCompanyInput, PerformanceReviewUncheckedUpdateWithoutCompanyInput>
    create: XOR<PerformanceReviewCreateWithoutCompanyInput, PerformanceReviewUncheckedCreateWithoutCompanyInput>
  }

  export type PerformanceReviewUpdateWithWhereUniqueWithoutCompanyInput = {
    where: PerformanceReviewWhereUniqueInput
    data: XOR<PerformanceReviewUpdateWithoutCompanyInput, PerformanceReviewUncheckedUpdateWithoutCompanyInput>
  }

  export type PerformanceReviewUpdateManyWithWhereWithoutCompanyInput = {
    where: PerformanceReviewScalarWhereInput
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyCreateWithoutJobPostingsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    applications?: ApplicationCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutJobPostingsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutJobPostingsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
  }

  export type ApplicationCreateWithoutJobPostingInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    company: CompanyCreateNestedOneWithoutApplicationsInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutJobPostingInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutJobPostingInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobPostingInput, ApplicationUncheckedCreateWithoutJobPostingInput>
  }

  export type ApplicationCreateManyJobPostingInputEnvelope = {
    data: ApplicationCreateManyJobPostingInput | ApplicationCreateManyJobPostingInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutJobPostingsInput = {
    update: XOR<CompanyUpdateWithoutJobPostingsInput, CompanyUncheckedUpdateWithoutJobPostingsInput>
    create: XOR<CompanyCreateWithoutJobPostingsInput, CompanyUncheckedCreateWithoutJobPostingsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutJobPostingsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutJobPostingsInput, CompanyUncheckedUpdateWithoutJobPostingsInput>
  }

  export type CompanyUpdateWithoutJobPostingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutJobPostingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobPostingInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobPostingInput, ApplicationUncheckedUpdateWithoutJobPostingInput>
    create: XOR<ApplicationCreateWithoutJobPostingInput, ApplicationUncheckedCreateWithoutJobPostingInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobPostingInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobPostingInput, ApplicationUncheckedUpdateWithoutJobPostingInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobPostingInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutJobPostingInput>
  }

  export type CandidateCreateWithoutCulturalAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutCulturalAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutCulturalAssessmentsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutCulturalAssessmentsInput, CandidateUncheckedCreateWithoutCulturalAssessmentsInput>
  }

  export type CandidateUpsertWithoutCulturalAssessmentsInput = {
    update: XOR<CandidateUpdateWithoutCulturalAssessmentsInput, CandidateUncheckedUpdateWithoutCulturalAssessmentsInput>
    create: XOR<CandidateCreateWithoutCulturalAssessmentsInput, CandidateUncheckedCreateWithoutCulturalAssessmentsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutCulturalAssessmentsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutCulturalAssessmentsInput, CandidateUncheckedUpdateWithoutCulturalAssessmentsInput>
  }

  export type CandidateUpdateWithoutCulturalAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutCulturalAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutPsychologicalAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutPsychologicalAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutPsychologicalAssessmentsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutPsychologicalAssessmentsInput, CandidateUncheckedCreateWithoutPsychologicalAssessmentsInput>
  }

  export type CandidateUpsertWithoutPsychologicalAssessmentsInput = {
    update: XOR<CandidateUpdateWithoutPsychologicalAssessmentsInput, CandidateUncheckedUpdateWithoutPsychologicalAssessmentsInput>
    create: XOR<CandidateCreateWithoutPsychologicalAssessmentsInput, CandidateUncheckedCreateWithoutPsychologicalAssessmentsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutPsychologicalAssessmentsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutPsychologicalAssessmentsInput, CandidateUncheckedUpdateWithoutPsychologicalAssessmentsInput>
  }

  export type CandidateUpdateWithoutPsychologicalAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutPsychologicalAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutLanguageAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutLanguageAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutLanguageAssessmentsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutLanguageAssessmentsInput, CandidateUncheckedCreateWithoutLanguageAssessmentsInput>
  }

  export type CandidateUpsertWithoutLanguageAssessmentsInput = {
    update: XOR<CandidateUpdateWithoutLanguageAssessmentsInput, CandidateUncheckedUpdateWithoutLanguageAssessmentsInput>
    create: XOR<CandidateCreateWithoutLanguageAssessmentsInput, CandidateUncheckedCreateWithoutLanguageAssessmentsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutLanguageAssessmentsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutLanguageAssessmentsInput, CandidateUncheckedUpdateWithoutLanguageAssessmentsInput>
  }

  export type CandidateUpdateWithoutLanguageAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutLanguageAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutProfessionalAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutProfessionalAssessmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutProfessionalAssessmentsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutProfessionalAssessmentsInput, CandidateUncheckedCreateWithoutProfessionalAssessmentsInput>
  }

  export type CandidateUpsertWithoutProfessionalAssessmentsInput = {
    update: XOR<CandidateUpdateWithoutProfessionalAssessmentsInput, CandidateUncheckedUpdateWithoutProfessionalAssessmentsInput>
    create: XOR<CandidateCreateWithoutProfessionalAssessmentsInput, CandidateUncheckedCreateWithoutProfessionalAssessmentsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutProfessionalAssessmentsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutProfessionalAssessmentsInput, CandidateUncheckedUpdateWithoutProfessionalAssessmentsInput>
  }

  export type CandidateUpdateWithoutProfessionalAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutProfessionalAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutInterviewSessionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutInterviewSessionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutInterviewSessionsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutInterviewSessionsInput, CandidateUncheckedCreateWithoutInterviewSessionsInput>
  }

  export type ApplicationCreateWithoutInterviewSessionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    company: CompanyCreateNestedOneWithoutApplicationsInput
    jobPosting: JobPostingCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutInterviewSessionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    jobPostingId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
  }

  export type ApplicationCreateOrConnectWithoutInterviewSessionsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutInterviewSessionsInput, ApplicationUncheckedCreateWithoutInterviewSessionsInput>
  }

  export type CandidateUpsertWithoutInterviewSessionsInput = {
    update: XOR<CandidateUpdateWithoutInterviewSessionsInput, CandidateUncheckedUpdateWithoutInterviewSessionsInput>
    create: XOR<CandidateCreateWithoutInterviewSessionsInput, CandidateUncheckedCreateWithoutInterviewSessionsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutInterviewSessionsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutInterviewSessionsInput, CandidateUncheckedUpdateWithoutInterviewSessionsInput>
  }

  export type CandidateUpdateWithoutInterviewSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutInterviewSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type ApplicationUpsertWithoutInterviewSessionsInput = {
    update: XOR<ApplicationUpdateWithoutInterviewSessionsInput, ApplicationUncheckedUpdateWithoutInterviewSessionsInput>
    create: XOR<ApplicationCreateWithoutInterviewSessionsInput, ApplicationUncheckedCreateWithoutInterviewSessionsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutInterviewSessionsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutInterviewSessionsInput, ApplicationUncheckedUpdateWithoutInterviewSessionsInput>
  }

  export type ApplicationUpdateWithoutInterviewSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    company?: CompanyUpdateOneRequiredWithoutApplicationsNestedInput
    jobPosting?: JobPostingUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutInterviewSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    jobPostingId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateCreateWithoutOnboardingRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutOnboardingRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutOnboardingRecordsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutOnboardingRecordsInput, CandidateUncheckedCreateWithoutOnboardingRecordsInput>
  }

  export type CompanyCreateWithoutOnboardingRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingCreateNestedManyWithoutCompanyInput
    applications?: ApplicationCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutOnboardingRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutOnboardingRecordsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOnboardingRecordsInput, CompanyUncheckedCreateWithoutOnboardingRecordsInput>
  }

  export type CandidateUpsertWithoutOnboardingRecordsInput = {
    update: XOR<CandidateUpdateWithoutOnboardingRecordsInput, CandidateUncheckedUpdateWithoutOnboardingRecordsInput>
    create: XOR<CandidateCreateWithoutOnboardingRecordsInput, CandidateUncheckedCreateWithoutOnboardingRecordsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutOnboardingRecordsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutOnboardingRecordsInput, CandidateUncheckedUpdateWithoutOnboardingRecordsInput>
  }

  export type CandidateUpdateWithoutOnboardingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutOnboardingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CompanyUpsertWithoutOnboardingRecordsInput = {
    update: XOR<CompanyUpdateWithoutOnboardingRecordsInput, CompanyUncheckedUpdateWithoutOnboardingRecordsInput>
    create: XOR<CompanyCreateWithoutOnboardingRecordsInput, CompanyUncheckedCreateWithoutOnboardingRecordsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutOnboardingRecordsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutOnboardingRecordsInput, CompanyUncheckedUpdateWithoutOnboardingRecordsInput>
  }

  export type CompanyUpdateWithoutOnboardingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUpdateManyWithoutCompanyNestedInput
    applications?: ApplicationUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutOnboardingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CandidateCreateWithoutPerformanceReviewsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutPerformanceReviewsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutPerformanceReviewsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutPerformanceReviewsInput, CandidateUncheckedCreateWithoutPerformanceReviewsInput>
  }

  export type CompanyCreateWithoutPerformanceReviewsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingCreateNestedManyWithoutCompanyInput
    applications?: ApplicationCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutPerformanceReviewsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutPerformanceReviewsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutPerformanceReviewsInput, CompanyUncheckedCreateWithoutPerformanceReviewsInput>
  }

  export type CandidateUpsertWithoutPerformanceReviewsInput = {
    update: XOR<CandidateUpdateWithoutPerformanceReviewsInput, CandidateUncheckedUpdateWithoutPerformanceReviewsInput>
    create: XOR<CandidateCreateWithoutPerformanceReviewsInput, CandidateUncheckedCreateWithoutPerformanceReviewsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutPerformanceReviewsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutPerformanceReviewsInput, CandidateUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type CandidateUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CompanyUpsertWithoutPerformanceReviewsInput = {
    update: XOR<CompanyUpdateWithoutPerformanceReviewsInput, CompanyUncheckedUpdateWithoutPerformanceReviewsInput>
    create: XOR<CompanyCreateWithoutPerformanceReviewsInput, CompanyUncheckedCreateWithoutPerformanceReviewsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutPerformanceReviewsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutPerformanceReviewsInput, CompanyUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type CompanyUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUpdateManyWithoutCompanyNestedInput
    applications?: ApplicationUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CandidateCreateWithoutStatusHistoryInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutStatusHistoryInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutStatusHistoryInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutStatusHistoryInput, CandidateUncheckedCreateWithoutStatusHistoryInput>
  }

  export type CandidateUpsertWithoutStatusHistoryInput = {
    update: XOR<CandidateUpdateWithoutStatusHistoryInput, CandidateUncheckedUpdateWithoutStatusHistoryInput>
    create: XOR<CandidateCreateWithoutStatusHistoryInput, CandidateUncheckedCreateWithoutStatusHistoryInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutStatusHistoryInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutStatusHistoryInput, CandidateUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type CandidateUpdateWithoutStatusHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutStatusHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutApplicationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    culturalAssessments?: CulturalAssessmentCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutApplicationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    cellPhone?: string | null
    nationality: string
    currentLocation: string
    dateOfBirth?: Date | string | null
    gender?: string | null
    maritalStatus?: string | null
    currentPosition?: string | null
    experience?: number | null
    education?: string | null
    technicalSkills?: string | null
    languageProficiency?: string | null
    certifications?: string | null
    culturalBackground?: string | null
    workStylePreference?: string | null
    communicationStyle?: string | null
    adaptabilityScore?: number | null
    teamworkOrientation?: string | null
    leadershipStyle?: string | null
    conflictResolution?: string | null
    timeManagement?: string | null
    waHarmonyAlignment?: number | null
    kaizenMindset?: number | null
    omotenashiService?: number | null
    bushidoDedication?: number | null
    nemawashiConsensus?: number | null
    candidateStatus?: $Enums.CandidateStatus
    availabilityDate?: Date | string | null
    salaryExpectation?: number | null
    preferredLocation?: string | null
    visaStatus?: string | null
    culturalAssessments?: CulturalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    languageAssessments?: LanguageAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    professionalAssessments?: ProfessionalAssessmentUncheckedCreateNestedManyWithoutCandidateInput
    interviewSessions?: InterviewSessionUncheckedCreateNestedManyWithoutCandidateInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCandidateInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCandidateInput
    statusHistory?: CandidateStatusHistoryUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutApplicationsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
  }

  export type CompanyCreateWithoutApplicationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutApplicationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyName: string
    industry: string
    companySize: string
    headquarters: string
    website?: string | null
    description?: string | null
    corporateCulture?: string | null
    workEnvironment?: string | null
    managementStyle?: string | null
    communicationStyle?: string | null
    diversityPolicy?: string | null
    waHarmonyImportance?: number | null
    kaizenImplementation?: number | null
    omotenashiStandards?: number | null
    hierarchyStructure?: string | null
    consensusDecisionMaking?: number | null
    revenue?: bigint | number | null
    foundedYear?: number | null
    employeeCount?: number | null
    businessModel?: string | null
    competitiveAdvantage?: string | null
    preferredCandidateProfile?: string | null
    culturalRequirements?: string | null
    languageRequirements?: string | null
    jobPostings?: JobPostingUncheckedCreateNestedManyWithoutCompanyInput
    onboardingRecords?: OnboardingRecordUncheckedCreateNestedManyWithoutCompanyInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutApplicationsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutApplicationsInput, CompanyUncheckedCreateWithoutApplicationsInput>
  }

  export type JobPostingCreateWithoutApplicationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
    company: CompanyCreateNestedOneWithoutJobPostingsInput
  }

  export type JobPostingUncheckedCreateWithoutApplicationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
    companyId: string
  }

  export type JobPostingCreateOrConnectWithoutApplicationsInput = {
    where: JobPostingWhereUniqueInput
    create: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
  }

  export type InterviewSessionCreateWithoutApplicationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
    candidate: CandidateCreateNestedOneWithoutInterviewSessionsInput
  }

  export type InterviewSessionUncheckedCreateWithoutApplicationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
  }

  export type InterviewSessionCreateOrConnectWithoutApplicationInput = {
    where: InterviewSessionWhereUniqueInput
    create: XOR<InterviewSessionCreateWithoutApplicationInput, InterviewSessionUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewSessionCreateManyApplicationInputEnvelope = {
    data: InterviewSessionCreateManyApplicationInput | InterviewSessionCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type CandidateUpsertWithoutApplicationsInput = {
    update: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type CandidateUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    culturalAssessments?: CulturalAssessmentUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cellPhone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    currentLocation?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    currentPosition?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    languageProficiency?: NullableStringFieldUpdateOperationsInput | string | null
    certifications?: NullableStringFieldUpdateOperationsInput | string | null
    culturalBackground?: NullableStringFieldUpdateOperationsInput | string | null
    workStylePreference?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    adaptabilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipStyle?: NullableStringFieldUpdateOperationsInput | string | null
    conflictResolution?: NullableStringFieldUpdateOperationsInput | string | null
    timeManagement?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyAlignment?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenMindset?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiService?: NullableFloatFieldUpdateOperationsInput | number | null
    bushidoDedication?: NullableFloatFieldUpdateOperationsInput | number | null
    nemawashiConsensus?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    availabilityDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryExpectation?: NullableIntFieldUpdateOperationsInput | number | null
    preferredLocation?: NullableStringFieldUpdateOperationsInput | string | null
    visaStatus?: NullableStringFieldUpdateOperationsInput | string | null
    culturalAssessments?: CulturalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    psychologicalAssessments?: PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    languageAssessments?: LanguageAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    professionalAssessments?: ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateNestedInput
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutCandidateNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCandidateNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCandidateNestedInput
    statusHistory?: CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CompanyUpsertWithoutApplicationsInput = {
    update: XOR<CompanyUpdateWithoutApplicationsInput, CompanyUncheckedUpdateWithoutApplicationsInput>
    create: XOR<CompanyCreateWithoutApplicationsInput, CompanyUncheckedCreateWithoutApplicationsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutApplicationsInput, CompanyUncheckedUpdateWithoutApplicationsInput>
  }

  export type CompanyUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    headquarters?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    corporateCulture?: NullableStringFieldUpdateOperationsInput | string | null
    workEnvironment?: NullableStringFieldUpdateOperationsInput | string | null
    managementStyle?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    diversityPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyImportance?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenImplementation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiStandards?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyStructure?: NullableStringFieldUpdateOperationsInput | string | null
    consensusDecisionMaking?: NullableFloatFieldUpdateOperationsInput | number | null
    revenue?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    foundedYear?: NullableIntFieldUpdateOperationsInput | number | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    businessModel?: NullableStringFieldUpdateOperationsInput | string | null
    competitiveAdvantage?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCandidateProfile?: NullableStringFieldUpdateOperationsInput | string | null
    culturalRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    jobPostings?: JobPostingUncheckedUpdateManyWithoutCompanyNestedInput
    onboardingRecords?: OnboardingRecordUncheckedUpdateManyWithoutCompanyNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type JobPostingUpsertWithoutApplicationsInput = {
    update: XOR<JobPostingUpdateWithoutApplicationsInput, JobPostingUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobPostingCreateWithoutApplicationsInput, JobPostingUncheckedCreateWithoutApplicationsInput>
    where?: JobPostingWhereInput
  }

  export type JobPostingUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobPostingWhereInput
    data: XOR<JobPostingUpdateWithoutApplicationsInput, JobPostingUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobPostingUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutJobPostingsNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
  }

  export type InterviewSessionUpsertWithWhereUniqueWithoutApplicationInput = {
    where: InterviewSessionWhereUniqueInput
    update: XOR<InterviewSessionUpdateWithoutApplicationInput, InterviewSessionUncheckedUpdateWithoutApplicationInput>
    create: XOR<InterviewSessionCreateWithoutApplicationInput, InterviewSessionUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewSessionUpdateWithWhereUniqueWithoutApplicationInput = {
    where: InterviewSessionWhereUniqueInput
    data: XOR<InterviewSessionUpdateWithoutApplicationInput, InterviewSessionUncheckedUpdateWithoutApplicationInput>
  }

  export type InterviewSessionUpdateManyWithWhereWithoutApplicationInput = {
    where: InterviewSessionScalarWhereInput
    data: XOR<InterviewSessionUpdateManyMutationInput, InterviewSessionUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ApplicationCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    jobPostingId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
  }

  export type CulturalAssessmentCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    overallScore: number
    culturalFitPrediction: number
    integrationTimelineDays: number
    waHarmonyScore?: number
    kaizenImprovementScore?: number
    omotenashiServiceScore?: number
    bushidoDedicationScore?: number
    nemawashiConsensusScore?: number
    honneTatemaeBalance?: number
    indirectCommunication?: number
    nonverbalAwareness?: number
    silenceComfort?: number
    contextualUnderstanding?: number
    senpaiKohaiRespect?: number
    authorityRecognition?: number
    formalityAdherence?: number
    statusAwareness?: number
    hierarchyNavigation?: number
    groupHarmonyPriority?: number
    collectiveDecisionMaking?: number
    consensusBuilding?: number
    teamLoyalty?: number
    groupAccountability?: number
    dedicationToWork?: number
    qualityFocus?: number
    continuousImprovement?: number
    attentionToDetail?: number
    processAdherence?: number
    punctualityImportance?: number
    timeRespect?: number
    scheduleAdherence?: number
    planningOrientation?: number
    deadlineCommitment?: number
    relationshipInvestment?: number
    trustBuilding?: number
    longTermOrientation?: number
    loyaltyDemonstration?: number
    networkMaintenance?: number
    changeAcceptance?: number
    flexibilityInApproach?: number
    learningOrientation?: number
    culturalAdaptability?: number
    resilienceInChallenges?: number
    professionalEtiquette?: number
    businessCardProtocol?: number
    meetingParticipation?: number
    presentationSkills?: number
    clientServiceOrientation?: number
    creativeThinking?: number
    innovationBalance?: number
    riskAssessment?: number
    dimensionScores?: string | null
    culturalTrainingNeeded?: string | null
    assessmentNotes?: string | null
  }

  export type PsychologicalAssessmentCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    openness?: number | null
    conscientiousness?: number | null
    extraversion?: number | null
    agreeableness?: number | null
    neuroticism?: number | null
    logicalReasoning?: number | null
    numericalAbility?: number | null
    verbalAbility?: number | null
    spatialAbility?: number | null
    memoryCapacity?: number | null
    selfAwareness?: number | null
    selfRegulation?: number | null
    motivation?: number | null
    empathy?: number | null
    socialSkills?: number | null
    stressResilience?: number | null
    teamworkAbility?: number | null
    leadershipPotential?: number | null
    adaptability?: number | null
    problemSolving?: number | null
    overallScore: number
    recommendations?: string | null
    assessmentNotes?: string | null
  }

  export type LanguageAssessmentCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language: string
    assessmentDate?: Date | string
    assessmentType: string
    speakingLevel: string
    listeningLevel: string
    readingLevel: string
    writingLevel: string
    overallScore: number
    speakingScore?: number | null
    listeningScore?: number | null
    readingScore?: number | null
    writingScore?: number | null
    businessCommunication?: number | null
    technicalVocabulary?: number | null
    presentationSkills?: number | null
    negotiationSkills?: number | null
    certificationLevel?: string | null
    certificationDate?: Date | string | null
    assessmentNotes?: string | null
  }

  export type ProfessionalAssessmentCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assessmentType: string
    assessmentDate?: Date | string
    technicalProficiency?: number | null
    toolsAndTechnologies?: string | null
    industryKnowledge?: number | null
    problemSolvingAbility?: number | null
    innovationCapability?: number | null
    projectManagement?: number | null
    teamLeadership?: number | null
    clientManagement?: number | null
    strategicThinking?: number | null
    analyticalSkills?: number | null
    domainExpertise?: number | null
    regulatoryKnowledge?: number | null
    marketUnderstanding?: number | null
    competitorAwareness?: number | null
    overallScore: number
    skillGaps?: string | null
    developmentPlan?: string | null
    assessmentNotes?: string | null
  }

  export type InterviewSessionCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationId?: string | null
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
  }

  export type OnboardingRecordCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
  }

  export type PerformanceReviewCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
  }

  export type CandidateStatusHistoryCreateManyCandidateInput = {
    id?: string
    createdAt?: Date | string
    previousStatus: $Enums.CandidateStatus
    newStatus: $Enums.CandidateStatus
    changeReason?: string | null
    changedBy?: string | null
    notes?: string | null
  }

  export type ApplicationUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutApplicationsNestedInput
    jobPosting?: JobPostingUpdateOneRequiredWithoutApplicationsNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    jobPostingId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    jobPostingId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CulturalAssessmentUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    culturalFitPrediction?: FloatFieldUpdateOperationsInput | number
    integrationTimelineDays?: IntFieldUpdateOperationsInput | number
    waHarmonyScore?: FloatFieldUpdateOperationsInput | number
    kaizenImprovementScore?: FloatFieldUpdateOperationsInput | number
    omotenashiServiceScore?: FloatFieldUpdateOperationsInput | number
    bushidoDedicationScore?: FloatFieldUpdateOperationsInput | number
    nemawashiConsensusScore?: FloatFieldUpdateOperationsInput | number
    honneTatemaeBalance?: FloatFieldUpdateOperationsInput | number
    indirectCommunication?: FloatFieldUpdateOperationsInput | number
    nonverbalAwareness?: FloatFieldUpdateOperationsInput | number
    silenceComfort?: FloatFieldUpdateOperationsInput | number
    contextualUnderstanding?: FloatFieldUpdateOperationsInput | number
    senpaiKohaiRespect?: FloatFieldUpdateOperationsInput | number
    authorityRecognition?: FloatFieldUpdateOperationsInput | number
    formalityAdherence?: FloatFieldUpdateOperationsInput | number
    statusAwareness?: FloatFieldUpdateOperationsInput | number
    hierarchyNavigation?: FloatFieldUpdateOperationsInput | number
    groupHarmonyPriority?: FloatFieldUpdateOperationsInput | number
    collectiveDecisionMaking?: FloatFieldUpdateOperationsInput | number
    consensusBuilding?: FloatFieldUpdateOperationsInput | number
    teamLoyalty?: FloatFieldUpdateOperationsInput | number
    groupAccountability?: FloatFieldUpdateOperationsInput | number
    dedicationToWork?: FloatFieldUpdateOperationsInput | number
    qualityFocus?: FloatFieldUpdateOperationsInput | number
    continuousImprovement?: FloatFieldUpdateOperationsInput | number
    attentionToDetail?: FloatFieldUpdateOperationsInput | number
    processAdherence?: FloatFieldUpdateOperationsInput | number
    punctualityImportance?: FloatFieldUpdateOperationsInput | number
    timeRespect?: FloatFieldUpdateOperationsInput | number
    scheduleAdherence?: FloatFieldUpdateOperationsInput | number
    planningOrientation?: FloatFieldUpdateOperationsInput | number
    deadlineCommitment?: FloatFieldUpdateOperationsInput | number
    relationshipInvestment?: FloatFieldUpdateOperationsInput | number
    trustBuilding?: FloatFieldUpdateOperationsInput | number
    longTermOrientation?: FloatFieldUpdateOperationsInput | number
    loyaltyDemonstration?: FloatFieldUpdateOperationsInput | number
    networkMaintenance?: FloatFieldUpdateOperationsInput | number
    changeAcceptance?: FloatFieldUpdateOperationsInput | number
    flexibilityInApproach?: FloatFieldUpdateOperationsInput | number
    learningOrientation?: FloatFieldUpdateOperationsInput | number
    culturalAdaptability?: FloatFieldUpdateOperationsInput | number
    resilienceInChallenges?: FloatFieldUpdateOperationsInput | number
    professionalEtiquette?: FloatFieldUpdateOperationsInput | number
    businessCardProtocol?: FloatFieldUpdateOperationsInput | number
    meetingParticipation?: FloatFieldUpdateOperationsInput | number
    presentationSkills?: FloatFieldUpdateOperationsInput | number
    clientServiceOrientation?: FloatFieldUpdateOperationsInput | number
    creativeThinking?: FloatFieldUpdateOperationsInput | number
    innovationBalance?: FloatFieldUpdateOperationsInput | number
    riskAssessment?: FloatFieldUpdateOperationsInput | number
    dimensionScores?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrainingNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CulturalAssessmentUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    culturalFitPrediction?: FloatFieldUpdateOperationsInput | number
    integrationTimelineDays?: IntFieldUpdateOperationsInput | number
    waHarmonyScore?: FloatFieldUpdateOperationsInput | number
    kaizenImprovementScore?: FloatFieldUpdateOperationsInput | number
    omotenashiServiceScore?: FloatFieldUpdateOperationsInput | number
    bushidoDedicationScore?: FloatFieldUpdateOperationsInput | number
    nemawashiConsensusScore?: FloatFieldUpdateOperationsInput | number
    honneTatemaeBalance?: FloatFieldUpdateOperationsInput | number
    indirectCommunication?: FloatFieldUpdateOperationsInput | number
    nonverbalAwareness?: FloatFieldUpdateOperationsInput | number
    silenceComfort?: FloatFieldUpdateOperationsInput | number
    contextualUnderstanding?: FloatFieldUpdateOperationsInput | number
    senpaiKohaiRespect?: FloatFieldUpdateOperationsInput | number
    authorityRecognition?: FloatFieldUpdateOperationsInput | number
    formalityAdherence?: FloatFieldUpdateOperationsInput | number
    statusAwareness?: FloatFieldUpdateOperationsInput | number
    hierarchyNavigation?: FloatFieldUpdateOperationsInput | number
    groupHarmonyPriority?: FloatFieldUpdateOperationsInput | number
    collectiveDecisionMaking?: FloatFieldUpdateOperationsInput | number
    consensusBuilding?: FloatFieldUpdateOperationsInput | number
    teamLoyalty?: FloatFieldUpdateOperationsInput | number
    groupAccountability?: FloatFieldUpdateOperationsInput | number
    dedicationToWork?: FloatFieldUpdateOperationsInput | number
    qualityFocus?: FloatFieldUpdateOperationsInput | number
    continuousImprovement?: FloatFieldUpdateOperationsInput | number
    attentionToDetail?: FloatFieldUpdateOperationsInput | number
    processAdherence?: FloatFieldUpdateOperationsInput | number
    punctualityImportance?: FloatFieldUpdateOperationsInput | number
    timeRespect?: FloatFieldUpdateOperationsInput | number
    scheduleAdherence?: FloatFieldUpdateOperationsInput | number
    planningOrientation?: FloatFieldUpdateOperationsInput | number
    deadlineCommitment?: FloatFieldUpdateOperationsInput | number
    relationshipInvestment?: FloatFieldUpdateOperationsInput | number
    trustBuilding?: FloatFieldUpdateOperationsInput | number
    longTermOrientation?: FloatFieldUpdateOperationsInput | number
    loyaltyDemonstration?: FloatFieldUpdateOperationsInput | number
    networkMaintenance?: FloatFieldUpdateOperationsInput | number
    changeAcceptance?: FloatFieldUpdateOperationsInput | number
    flexibilityInApproach?: FloatFieldUpdateOperationsInput | number
    learningOrientation?: FloatFieldUpdateOperationsInput | number
    culturalAdaptability?: FloatFieldUpdateOperationsInput | number
    resilienceInChallenges?: FloatFieldUpdateOperationsInput | number
    professionalEtiquette?: FloatFieldUpdateOperationsInput | number
    businessCardProtocol?: FloatFieldUpdateOperationsInput | number
    meetingParticipation?: FloatFieldUpdateOperationsInput | number
    presentationSkills?: FloatFieldUpdateOperationsInput | number
    clientServiceOrientation?: FloatFieldUpdateOperationsInput | number
    creativeThinking?: FloatFieldUpdateOperationsInput | number
    innovationBalance?: FloatFieldUpdateOperationsInput | number
    riskAssessment?: FloatFieldUpdateOperationsInput | number
    dimensionScores?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrainingNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CulturalAssessmentUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    culturalFitPrediction?: FloatFieldUpdateOperationsInput | number
    integrationTimelineDays?: IntFieldUpdateOperationsInput | number
    waHarmonyScore?: FloatFieldUpdateOperationsInput | number
    kaizenImprovementScore?: FloatFieldUpdateOperationsInput | number
    omotenashiServiceScore?: FloatFieldUpdateOperationsInput | number
    bushidoDedicationScore?: FloatFieldUpdateOperationsInput | number
    nemawashiConsensusScore?: FloatFieldUpdateOperationsInput | number
    honneTatemaeBalance?: FloatFieldUpdateOperationsInput | number
    indirectCommunication?: FloatFieldUpdateOperationsInput | number
    nonverbalAwareness?: FloatFieldUpdateOperationsInput | number
    silenceComfort?: FloatFieldUpdateOperationsInput | number
    contextualUnderstanding?: FloatFieldUpdateOperationsInput | number
    senpaiKohaiRespect?: FloatFieldUpdateOperationsInput | number
    authorityRecognition?: FloatFieldUpdateOperationsInput | number
    formalityAdherence?: FloatFieldUpdateOperationsInput | number
    statusAwareness?: FloatFieldUpdateOperationsInput | number
    hierarchyNavigation?: FloatFieldUpdateOperationsInput | number
    groupHarmonyPriority?: FloatFieldUpdateOperationsInput | number
    collectiveDecisionMaking?: FloatFieldUpdateOperationsInput | number
    consensusBuilding?: FloatFieldUpdateOperationsInput | number
    teamLoyalty?: FloatFieldUpdateOperationsInput | number
    groupAccountability?: FloatFieldUpdateOperationsInput | number
    dedicationToWork?: FloatFieldUpdateOperationsInput | number
    qualityFocus?: FloatFieldUpdateOperationsInput | number
    continuousImprovement?: FloatFieldUpdateOperationsInput | number
    attentionToDetail?: FloatFieldUpdateOperationsInput | number
    processAdherence?: FloatFieldUpdateOperationsInput | number
    punctualityImportance?: FloatFieldUpdateOperationsInput | number
    timeRespect?: FloatFieldUpdateOperationsInput | number
    scheduleAdherence?: FloatFieldUpdateOperationsInput | number
    planningOrientation?: FloatFieldUpdateOperationsInput | number
    deadlineCommitment?: FloatFieldUpdateOperationsInput | number
    relationshipInvestment?: FloatFieldUpdateOperationsInput | number
    trustBuilding?: FloatFieldUpdateOperationsInput | number
    longTermOrientation?: FloatFieldUpdateOperationsInput | number
    loyaltyDemonstration?: FloatFieldUpdateOperationsInput | number
    networkMaintenance?: FloatFieldUpdateOperationsInput | number
    changeAcceptance?: FloatFieldUpdateOperationsInput | number
    flexibilityInApproach?: FloatFieldUpdateOperationsInput | number
    learningOrientation?: FloatFieldUpdateOperationsInput | number
    culturalAdaptability?: FloatFieldUpdateOperationsInput | number
    resilienceInChallenges?: FloatFieldUpdateOperationsInput | number
    professionalEtiquette?: FloatFieldUpdateOperationsInput | number
    businessCardProtocol?: FloatFieldUpdateOperationsInput | number
    meetingParticipation?: FloatFieldUpdateOperationsInput | number
    presentationSkills?: FloatFieldUpdateOperationsInput | number
    clientServiceOrientation?: FloatFieldUpdateOperationsInput | number
    creativeThinking?: FloatFieldUpdateOperationsInput | number
    innovationBalance?: FloatFieldUpdateOperationsInput | number
    riskAssessment?: FloatFieldUpdateOperationsInput | number
    dimensionScores?: NullableStringFieldUpdateOperationsInput | string | null
    culturalTrainingNeeded?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsychologicalAssessmentUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    openness?: NullableFloatFieldUpdateOperationsInput | number | null
    conscientiousness?: NullableFloatFieldUpdateOperationsInput | number | null
    extraversion?: NullableFloatFieldUpdateOperationsInput | number | null
    agreeableness?: NullableFloatFieldUpdateOperationsInput | number | null
    neuroticism?: NullableFloatFieldUpdateOperationsInput | number | null
    logicalReasoning?: NullableFloatFieldUpdateOperationsInput | number | null
    numericalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    verbalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    spatialAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    selfAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    selfRegulation?: NullableFloatFieldUpdateOperationsInput | number | null
    motivation?: NullableFloatFieldUpdateOperationsInput | number | null
    empathy?: NullableFloatFieldUpdateOperationsInput | number | null
    socialSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    stressResilience?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    leadershipPotential?: NullableFloatFieldUpdateOperationsInput | number | null
    adaptability?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolving?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsychologicalAssessmentUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    openness?: NullableFloatFieldUpdateOperationsInput | number | null
    conscientiousness?: NullableFloatFieldUpdateOperationsInput | number | null
    extraversion?: NullableFloatFieldUpdateOperationsInput | number | null
    agreeableness?: NullableFloatFieldUpdateOperationsInput | number | null
    neuroticism?: NullableFloatFieldUpdateOperationsInput | number | null
    logicalReasoning?: NullableFloatFieldUpdateOperationsInput | number | null
    numericalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    verbalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    spatialAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    selfAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    selfRegulation?: NullableFloatFieldUpdateOperationsInput | number | null
    motivation?: NullableFloatFieldUpdateOperationsInput | number | null
    empathy?: NullableFloatFieldUpdateOperationsInput | number | null
    socialSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    stressResilience?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    leadershipPotential?: NullableFloatFieldUpdateOperationsInput | number | null
    adaptability?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolving?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsychologicalAssessmentUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    openness?: NullableFloatFieldUpdateOperationsInput | number | null
    conscientiousness?: NullableFloatFieldUpdateOperationsInput | number | null
    extraversion?: NullableFloatFieldUpdateOperationsInput | number | null
    agreeableness?: NullableFloatFieldUpdateOperationsInput | number | null
    neuroticism?: NullableFloatFieldUpdateOperationsInput | number | null
    logicalReasoning?: NullableFloatFieldUpdateOperationsInput | number | null
    numericalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    verbalAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    spatialAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    selfAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    selfRegulation?: NullableFloatFieldUpdateOperationsInput | number | null
    motivation?: NullableFloatFieldUpdateOperationsInput | number | null
    empathy?: NullableFloatFieldUpdateOperationsInput | number | null
    socialSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    stressResilience?: NullableFloatFieldUpdateOperationsInput | number | null
    teamworkAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    leadershipPotential?: NullableFloatFieldUpdateOperationsInput | number | null
    adaptability?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolving?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageAssessmentUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    speakingLevel?: StringFieldUpdateOperationsInput | string
    listeningLevel?: StringFieldUpdateOperationsInput | string
    readingLevel?: StringFieldUpdateOperationsInput | string
    writingLevel?: StringFieldUpdateOperationsInput | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    speakingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    listeningScore?: NullableFloatFieldUpdateOperationsInput | number | null
    readingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    writingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    businessCommunication?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalVocabulary?: NullableFloatFieldUpdateOperationsInput | number | null
    presentationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    negotiationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    certificationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageAssessmentUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    speakingLevel?: StringFieldUpdateOperationsInput | string
    listeningLevel?: StringFieldUpdateOperationsInput | string
    readingLevel?: StringFieldUpdateOperationsInput | string
    writingLevel?: StringFieldUpdateOperationsInput | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    speakingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    listeningScore?: NullableFloatFieldUpdateOperationsInput | number | null
    readingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    writingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    businessCommunication?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalVocabulary?: NullableFloatFieldUpdateOperationsInput | number | null
    presentationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    negotiationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    certificationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageAssessmentUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    speakingLevel?: StringFieldUpdateOperationsInput | string
    listeningLevel?: StringFieldUpdateOperationsInput | string
    readingLevel?: StringFieldUpdateOperationsInput | string
    writingLevel?: StringFieldUpdateOperationsInput | string
    overallScore?: FloatFieldUpdateOperationsInput | number
    speakingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    listeningScore?: NullableFloatFieldUpdateOperationsInput | number | null
    readingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    writingScore?: NullableFloatFieldUpdateOperationsInput | number | null
    businessCommunication?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalVocabulary?: NullableFloatFieldUpdateOperationsInput | number | null
    presentationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    negotiationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    certificationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessionalAssessmentUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    technicalProficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    toolsAndTechnologies?: NullableStringFieldUpdateOperationsInput | string | null
    industryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolvingAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    innovationCapability?: NullableFloatFieldUpdateOperationsInput | number | null
    projectManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    teamLeadership?: NullableFloatFieldUpdateOperationsInput | number | null
    clientManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    strategicThinking?: NullableFloatFieldUpdateOperationsInput | number | null
    analyticalSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    domainExpertise?: NullableFloatFieldUpdateOperationsInput | number | null
    regulatoryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    marketUnderstanding?: NullableFloatFieldUpdateOperationsInput | number | null
    competitorAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    skillGaps?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessionalAssessmentUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    technicalProficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    toolsAndTechnologies?: NullableStringFieldUpdateOperationsInput | string | null
    industryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolvingAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    innovationCapability?: NullableFloatFieldUpdateOperationsInput | number | null
    projectManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    teamLeadership?: NullableFloatFieldUpdateOperationsInput | number | null
    clientManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    strategicThinking?: NullableFloatFieldUpdateOperationsInput | number | null
    analyticalSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    domainExpertise?: NullableFloatFieldUpdateOperationsInput | number | null
    regulatoryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    marketUnderstanding?: NullableFloatFieldUpdateOperationsInput | number | null
    competitorAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    skillGaps?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessionalAssessmentUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessmentType?: StringFieldUpdateOperationsInput | string
    assessmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    technicalProficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    toolsAndTechnologies?: NullableStringFieldUpdateOperationsInput | string | null
    industryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    problemSolvingAbility?: NullableFloatFieldUpdateOperationsInput | number | null
    innovationCapability?: NullableFloatFieldUpdateOperationsInput | number | null
    projectManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    teamLeadership?: NullableFloatFieldUpdateOperationsInput | number | null
    clientManagement?: NullableFloatFieldUpdateOperationsInput | number | null
    strategicThinking?: NullableFloatFieldUpdateOperationsInput | number | null
    analyticalSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    domainExpertise?: NullableFloatFieldUpdateOperationsInput | number | null
    regulatoryKnowledge?: NullableFloatFieldUpdateOperationsInput | number | null
    marketUnderstanding?: NullableFloatFieldUpdateOperationsInput | number | null
    competitorAwareness?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    skillGaps?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    assessmentNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewSessionUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    application?: ApplicationUpdateOneWithoutInterviewSessionsNestedInput
  }

  export type InterviewSessionUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewSessionUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OnboardingRecordUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutOnboardingRecordsNestedInput
  }

  export type OnboardingRecordUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OnboardingRecordUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerformanceReviewUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: StringFieldUpdateOperationsInput | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateStatusHistoryUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateStatusHistoryUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateStatusHistoryUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    newStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobPostingCreateManyCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobTitle: string
    department?: string | null
    location: string
    employmentType: string
    experienceLevel: string
    jobDescription: string
    responsibilities?: string | null
    requirements?: string | null
    qualifications?: string | null
    technicalSkills?: string | null
    salaryRangeMinimum?: number | null
    salaryRangeMaximum?: number | null
    benefits?: string | null
    bonusStructure?: string | null
    culturalFitRequirements?: string | null
    languageRequirements?: string | null
    communicationStyle?: string | null
    teamworkExpectation?: string | null
    leadershipExpectation?: string | null
    waHarmonyRequired?: number | null
    kaizenParticipation?: number | null
    omotenashiExpectation?: number | null
    hierarchyRespect?: number | null
    consensusBuilding?: number | null
    postingStatus?: $Enums.PostingStatus
    applicationDeadline?: Date | string | null
    startDate?: Date | string | null
    urgencyLevel?: string | null
  }

  export type ApplicationCreateManyCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    jobPostingId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
  }

  export type OnboardingRecordCreateManyCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    startDate: Date | string
    onboardingStatus: string
    documentationComplete?: boolean
    systemAccessGranted?: boolean
    trainingCompleted?: boolean
    culturalOrientationDone?: boolean
    mentorAssigned?: boolean
    culturalAdaptationScore?: number | null
    integrationChallenges?: string | null
    supportProvided?: string | null
    expectedCompletionDate?: Date | string | null
    actualCompletionDate?: Date | string | null
    onboardingNotes?: string | null
  }

  export type PerformanceReviewCreateManyCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    reviewPeriod: string
    reviewDate: Date | string
    reviewType: string
    technicalPerformance?: number | null
    culturalIntegration?: number | null
    teamCollaboration?: number | null
    communicationSkills?: number | null
    goalAchievement?: number | null
    overallPerformance: number
    culturalFitImprovement?: number | null
    japaneseBusinessEtiquette?: number | null
    teamHarmonyContribution?: number | null
    achievements?: string | null
    areasForImprovement?: string | null
    developmentGoals?: string | null
    reviewerName?: string | null
    reviewerRole?: string | null
    reviewNotes?: string | null
  }

  export type JobPostingUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    applications?: ApplicationUncheckedUpdateManyWithoutJobPostingNestedInput
  }

  export type JobPostingUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    employmentType?: StringFieldUpdateOperationsInput | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableStringFieldUpdateOperationsInput | string | null
    technicalSkills?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRangeMinimum?: NullableIntFieldUpdateOperationsInput | number | null
    salaryRangeMaximum?: NullableIntFieldUpdateOperationsInput | number | null
    benefits?: NullableStringFieldUpdateOperationsInput | string | null
    bonusStructure?: NullableStringFieldUpdateOperationsInput | string | null
    culturalFitRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    languageRequirements?: NullableStringFieldUpdateOperationsInput | string | null
    communicationStyle?: NullableStringFieldUpdateOperationsInput | string | null
    teamworkExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipExpectation?: NullableStringFieldUpdateOperationsInput | string | null
    waHarmonyRequired?: NullableFloatFieldUpdateOperationsInput | number | null
    kaizenParticipation?: NullableFloatFieldUpdateOperationsInput | number | null
    omotenashiExpectation?: NullableFloatFieldUpdateOperationsInput | number | null
    hierarchyRespect?: NullableFloatFieldUpdateOperationsInput | number | null
    consensusBuilding?: NullableFloatFieldUpdateOperationsInput | number | null
    postingStatus?: EnumPostingStatusFieldUpdateOperationsInput | $Enums.PostingStatus
    applicationDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urgencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    jobPosting?: JobPostingUpdateOneRequiredWithoutApplicationsNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    jobPostingId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    jobPostingId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OnboardingRecordUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutOnboardingRecordsNestedInput
  }

  export type OnboardingRecordUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OnboardingRecordUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    onboardingStatus?: StringFieldUpdateOperationsInput | string
    documentationComplete?: BoolFieldUpdateOperationsInput | boolean
    systemAccessGranted?: BoolFieldUpdateOperationsInput | boolean
    trainingCompleted?: BoolFieldUpdateOperationsInput | boolean
    culturalOrientationDone?: BoolFieldUpdateOperationsInput | boolean
    mentorAssigned?: BoolFieldUpdateOperationsInput | boolean
    culturalAdaptationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    integrationChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    supportProvided?: NullableStringFieldUpdateOperationsInput | string | null
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    onboardingNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerformanceReviewUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    reviewPeriod?: StringFieldUpdateOperationsInput | string
    reviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewType?: StringFieldUpdateOperationsInput | string
    technicalPerformance?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalIntegration?: NullableFloatFieldUpdateOperationsInput | number | null
    teamCollaboration?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationSkills?: NullableFloatFieldUpdateOperationsInput | number | null
    goalAchievement?: NullableFloatFieldUpdateOperationsInput | number | null
    overallPerformance?: FloatFieldUpdateOperationsInput | number
    culturalFitImprovement?: NullableFloatFieldUpdateOperationsInput | number | null
    japaneseBusinessEtiquette?: NullableFloatFieldUpdateOperationsInput | number | null
    teamHarmonyContribution?: NullableFloatFieldUpdateOperationsInput | number | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentGoals?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationCreateManyJobPostingInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    companyId: string
    applicationStatus?: $Enums.ApplicationStatus
    applicationDate?: Date | string
    overallMatchScore?: number | null
    technicalMatchScore?: number | null
    culturalFitScore?: number | null
    languageMatchScore?: number | null
    experienceMatchScore?: number | null
    resumeUrl?: string | null
    coverLetterUrl?: string | null
    portfolioUrl?: string | null
    finalDecision?: string | null
    decisionDate?: Date | string | null
    decisionReason?: string | null
    applicationNotes?: string | null
  }

  export type ApplicationUpdateWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    company?: CompanyUpdateOneRequiredWithoutApplicationsNestedInput
    interviewSessions?: InterviewSessionUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewSessions?: InterviewSessionUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutJobPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    applicationStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overallMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    technicalMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    languageMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    experienceMatchScore?: NullableFloatFieldUpdateOperationsInput | number | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    finalDecision?: NullableStringFieldUpdateOperationsInput | string | null
    decisionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    decisionReason?: NullableStringFieldUpdateOperationsInput | string | null
    applicationNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewSessionCreateManyApplicationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateId: string
    interviewType: string
    interviewRound: number
    interviewDate: Date | string
    duration?: number | null
    technicalScore?: number | null
    culturalFitScore?: number | null
    communicationScore?: number | null
    motivationScore?: number | null
    overallScore: number
    strengths?: string | null
    weaknesses?: string | null
    recommendations?: string | null
    interviewNotes?: string | null
    recommendation: string
    interviewerName?: string | null
    interviewerRole?: string | null
  }

  export type InterviewSessionUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutInterviewSessionsNestedInput
  }

  export type InterviewSessionUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewSessionUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
    interviewType?: StringFieldUpdateOperationsInput | string
    interviewRound?: IntFieldUpdateOperationsInput | number
    interviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    technicalScore?: NullableFloatFieldUpdateOperationsInput | number | null
    culturalFitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    communicationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    motivationScore?: NullableFloatFieldUpdateOperationsInput | number | null
    overallScore?: FloatFieldUpdateOperationsInput | number
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    weaknesses?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    interviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendation?: StringFieldUpdateOperationsInput | string
    interviewerName?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerRole?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}